{"ast":null,"code":"var UNITS = ['B', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\nexport default (function (num) {\n  if (!Number.isFinite(num)) {\n    throw new TypeError(\"Expected a finite number, got \".concat(typeof num, \": \").concat(num));\n  }\n\n  var neg = num < 0;\n\n  if (neg) {\n    num = -num;\n  }\n\n  if (num < 1) {\n    return (neg ? '-' : '') + num + ' B';\n  }\n\n  var exponent = Math.min(Math.floor(Math.log10(num) / 3), UNITS.length - 1);\n  var numStr = Number((num / Math.pow(1000, exponent)).toPrecision(3));\n  var unit = UNITS[exponent];\n  return (neg ? '-' : '') + numStr + ' ' + unit;\n});","map":{"version":3,"sources":["/Users/amipatel/Desktop/money-tracker/src/util/PrettyBytes.js"],"names":["UNITS","num","Number","isFinite","TypeError","neg","exponent","Math","min","floor","log10","length","numStr","pow","toPrecision","unit"],"mappings":"AAAA,IAAMA,KAAK,GAAG,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkB,IAAlB,EAAwB,IAAxB,EAA8B,IAA9B,EAAoC,IAApC,EAA0C,IAA1C,EAAgD,IAAhD,CAAd;AAEA,gBAAe,UAAAC,GAAG,EAAI;AACpB,MAAI,CAACC,MAAM,CAACC,QAAP,CAAgBF,GAAhB,CAAL,EAA2B;AACzB,UAAM,IAAIG,SAAJ,yCAA+C,OAAOH,GAAtD,eAA8DA,GAA9D,EAAN;AACD;;AAED,MAAMI,GAAG,GAAGJ,GAAG,GAAG,CAAlB;;AAEA,MAAII,GAAJ,EAAS;AACPJ,IAAAA,GAAG,GAAG,CAACA,GAAP;AACD;;AAED,MAAIA,GAAG,GAAG,CAAV,EAAa;AACX,WAAO,CAACI,GAAG,GAAG,GAAH,GAAS,EAAb,IAAmBJ,GAAnB,GAAyB,IAAhC;AACD;;AAED,MAAMK,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,KAAL,CAAWF,IAAI,CAACG,KAAL,CAAWT,GAAX,IAAkB,CAA7B,CAAT,EAA0CD,KAAK,CAACW,MAAN,GAAe,CAAzD,CAAjB;AACA,MAAMC,MAAM,GAAGV,MAAM,CAAC,CAACD,GAAG,GAAGM,IAAI,CAACM,GAAL,CAAS,IAAT,EAAeP,QAAf,CAAP,EAAiCQ,WAAjC,CAA6C,CAA7C,CAAD,CAArB;AACA,MAAMC,IAAI,GAAGf,KAAK,CAACM,QAAD,CAAlB;AAEA,SAAO,CAACD,GAAG,GAAG,GAAH,GAAS,EAAb,IAAmBO,MAAnB,GAA4B,GAA5B,GAAkCG,IAAzC;AACD,CApBD","sourcesContent":["const UNITS = ['B', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\nexport default num => {\n  if (!Number.isFinite(num)) {\n    throw new TypeError(`Expected a finite number, got ${typeof num}: ${num}`);\n  }\n\n  const neg = num < 0;\n\n  if (neg) {\n    num = -num;\n  }\n\n  if (num < 1) {\n    return (neg ? '-' : '') + num + ' B';\n  }\n\n  const exponent = Math.min(Math.floor(Math.log10(num) / 3), UNITS.length - 1);\n  const numStr = Number((num / Math.pow(1000, exponent)).toPrecision(3));\n  const unit = UNITS[exponent];\n\n  return (neg ? '-' : '') + numStr + ' ' + unit;\n};\n"]},"metadata":{},"sourceType":"module"}