{"ast":null,"code":"import _objectSpread from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { createSelector } from 'reselect';\nimport { getAccountsMap } from './accounts';\nimport { getBaseCurrency, getExchangeRate } from '../settings';\nimport { getPage } from '../ui/transaction/filter';\nimport { recentListLimit, rowsPerSearchPage } from '../../entities/Transaction';\nimport Currency from '../../entities/Currency';\nimport EntityMap from '../../entities/EntityMap';\n\nvar recentTransactionsSelector = function recentTransactionsSelector(state) {\n  return state.entities.transactions.recent;\n};\n\nvar filterTransactionsSelector = function filterTransactionsSelector(state) {\n  return state.entities.transactions.filter;\n};\n\nexport var getRecentTransactions = createSelector(recentTransactionsSelector, getAccountsMap, function (transactions, accounts) {\n  return EntityMap.map(transactions, function (transaction) {\n    return joinAccount(transaction, accounts);\n  }, recentListLimit);\n});\nexport var getFilterTransactions = createSelector(filterTransactionsSelector, getPage, getAccountsMap, function (transactions, page, accounts) {\n  return EntityMap.map(transactions, function (transaction) {\n    return joinAccount(transaction, accounts);\n  }, rowsPerSearchPage, page * rowsPerSearchPage);\n});\n\nfunction joinAccount(transaction, accounts) {\n  var account = EntityMap.get(accounts, transaction.accountId);\n  var linked = EntityMap.get(accounts, transaction.linkedAccountId);\n  return _objectSpread({}, transaction, {\n    archived: account.archived || linked.archived,\n    accountName: account.name,\n    linkedAccountName: linked.name\n  });\n}\n\nexport var getFilterTotal = function getFilterTotal(kind) {\n  return createSelector(filterTransactionsSelector, getBaseCurrency, getExchangeRate, function (transactions, base, rate) {\n    return EntityMap.filter(transactions, function (tx) {\n      return tx.kind === kind;\n    }).reduce(function (total, tx) {\n      return Math.floor(total + Currency.convert(tx.amount, rate[tx.currency], base, tx.currency));\n    }, 0);\n  });\n};","map":{"version":3,"sources":["/Users/amipatel/Desktop/money-tracker/src/selectors/entities/transactions.js"],"names":["createSelector","getAccountsMap","getBaseCurrency","getExchangeRate","getPage","recentListLimit","rowsPerSearchPage","Currency","EntityMap","recentTransactionsSelector","state","entities","transactions","recent","filterTransactionsSelector","filter","getRecentTransactions","accounts","map","transaction","joinAccount","getFilterTransactions","page","account","get","accountId","linked","linkedAccountId","archived","accountName","name","linkedAccountName","getFilterTotal","kind","base","rate","tx","reduce","total","Math","floor","convert","amount","currency"],"mappings":";AAAA,SAASA,cAAT,QAA+B,UAA/B;AACA,SAASC,cAAT,QAA+B,YAA/B;AACA,SAASC,eAAT,EAA0BC,eAA1B,QAAiD,aAAjD;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,eAAT,EAA0BC,iBAA1B,QAAmD,4BAAnD;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;;AAEA,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAAAC,KAAK;AAAA,SAAIA,KAAK,CAACC,QAAN,CAAeC,YAAf,CAA4BC,MAAhC;AAAA,CAAxC;;AACA,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAAAJ,KAAK;AAAA,SAAIA,KAAK,CAACC,QAAN,CAAeC,YAAf,CAA4BG,MAAhC;AAAA,CAAxC;;AAEA,OAAO,IAAMC,qBAAqB,GAAGhB,cAAc,CACjDS,0BADiD,EAEjDR,cAFiD,EAGjD,UAACW,YAAD,EAAeK,QAAf;AAAA,SACET,SAAS,CAACU,GAAV,CACEN,YADF,EAEE,UAAAO,WAAW;AAAA,WAAIC,WAAW,CAACD,WAAD,EAAcF,QAAd,CAAf;AAAA,GAFb,EAGEZ,eAHF,CADF;AAAA,CAHiD,CAA5C;AAWP,OAAO,IAAMgB,qBAAqB,GAAGrB,cAAc,CACjDc,0BADiD,EAEjDV,OAFiD,EAGjDH,cAHiD,EAIjD,UAACW,YAAD,EAAeU,IAAf,EAAqBL,QAArB;AAAA,SACET,SAAS,CAACU,GAAV,CACEN,YADF,EAEE,UAAAO,WAAW;AAAA,WAAIC,WAAW,CAACD,WAAD,EAAcF,QAAd,CAAf;AAAA,GAFb,EAGEX,iBAHF,EAIEgB,IAAI,GAAGhB,iBAJT,CADF;AAAA,CAJiD,CAA5C;;AAaP,SAASc,WAAT,CAAqBD,WAArB,EAAkCF,QAAlC,EAA4C;AAC1C,MAAMM,OAAO,GAAGf,SAAS,CAACgB,GAAV,CAAcP,QAAd,EAAwBE,WAAW,CAACM,SAApC,CAAhB;AACA,MAAMC,MAAM,GAAGlB,SAAS,CAACgB,GAAV,CAAcP,QAAd,EAAwBE,WAAW,CAACQ,eAApC,CAAf;AACA,2BACKR,WADL;AAEES,IAAAA,QAAQ,EAAEL,OAAO,CAACK,QAAR,IAAoBF,MAAM,CAACE,QAFvC;AAGEC,IAAAA,WAAW,EAAEN,OAAO,CAACO,IAHvB;AAIEC,IAAAA,iBAAiB,EAAEL,MAAM,CAACI;AAJ5B;AAMD;;AAED,OAAO,IAAME,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,IAAI;AAAA,SAChCjC,cAAc,CACZc,0BADY,EAEZZ,eAFY,EAGZC,eAHY,EAIZ,UAACS,YAAD,EAAesB,IAAf,EAAqBC,IAArB;AAAA,WACE3B,SAAS,CAACO,MAAV,CAAiBH,YAAjB,EAA+B,UAAAwB,EAAE;AAAA,aAAIA,EAAE,CAACH,IAAH,KAAYA,IAAhB;AAAA,KAAjC,EAAuDI,MAAvD,CACE,UAACC,KAAD,EAAQF,EAAR;AAAA,aACEG,IAAI,CAACC,KAAL,CACEF,KAAK,GACH/B,QAAQ,CAACkC,OAAT,CAAiBL,EAAE,CAACM,MAApB,EAA4BP,IAAI,CAACC,EAAE,CAACO,QAAJ,CAAhC,EAA+CT,IAA/C,EAAqDE,EAAE,CAACO,QAAxD,CAFJ,CADF;AAAA,KADF,EAME,CANF,CADF;AAAA,GAJY,CADkB;AAAA,CAA3B","sourcesContent":["import { createSelector } from 'reselect';\nimport { getAccountsMap } from './accounts';\nimport { getBaseCurrency, getExchangeRate } from '../settings';\nimport { getPage } from '../ui/transaction/filter';\nimport { recentListLimit, rowsPerSearchPage } from '../../entities/Transaction';\nimport Currency from '../../entities/Currency';\nimport EntityMap from '../../entities/EntityMap';\n\nconst recentTransactionsSelector = state => state.entities.transactions.recent;\nconst filterTransactionsSelector = state => state.entities.transactions.filter;\n\nexport const getRecentTransactions = createSelector(\n  recentTransactionsSelector,\n  getAccountsMap,\n  (transactions, accounts) =>\n    EntityMap.map(\n      transactions,\n      transaction => joinAccount(transaction, accounts),\n      recentListLimit\n    )\n);\n\nexport const getFilterTransactions = createSelector(\n  filterTransactionsSelector,\n  getPage,\n  getAccountsMap,\n  (transactions, page, accounts) =>\n    EntityMap.map(\n      transactions,\n      transaction => joinAccount(transaction, accounts),\n      rowsPerSearchPage,\n      page * rowsPerSearchPage\n    )\n);\n\nfunction joinAccount(transaction, accounts) {\n  const account = EntityMap.get(accounts, transaction.accountId);\n  const linked = EntityMap.get(accounts, transaction.linkedAccountId);\n  return {\n    ...transaction,\n    archived: account.archived || linked.archived,\n    accountName: account.name,\n    linkedAccountName: linked.name\n  };\n}\n\nexport const getFilterTotal = kind =>\n  createSelector(\n    filterTransactionsSelector,\n    getBaseCurrency,\n    getExchangeRate,\n    (transactions, base, rate) =>\n      EntityMap.filter(transactions, tx => tx.kind === kind).reduce(\n        (total, tx) =>\n          Math.floor(\n            total +\n              Currency.convert(tx.amount, rate[tx.currency], base, tx.currency)\n          ),\n        0\n      )\n  );\n"]},"metadata":{},"sourceType":"module"}