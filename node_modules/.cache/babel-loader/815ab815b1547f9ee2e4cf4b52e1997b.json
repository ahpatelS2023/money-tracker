{"ast":null,"code":"import _regeneratorRuntime from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadReportSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(refreshReportSaga);\n\nimport { call, put, select, takeLatest } from 'redux-saga/effects';\nimport { changeReportAccounts, changeReportExcludedTags, changeReportKind, changeReportTimespan, loadReport, loadReportFailure, loadReportSuccess, moveReportDateBackwards, moveReportDateForwards } from 'actions/ui/report';\nimport { transactionFilters, loadReportData } from 'entities/Report';\nimport { getNetWorth } from 'selectors/entities/accounts';\nimport { getBaseCurrency, getExchangeRate } from 'selectors/settings';\nimport { getReport } from 'selectors/ui/report';\nimport TransactionsStorage from 'util/storage/transactions';\nexport function loadReportSaga() {\n  var report, base, exchangeRate, netWorthEnd, transactions, data;\n  return _regeneratorRuntime.wrap(function loadReportSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return select(getReport);\n\n        case 2:\n          report = _context.sent;\n          _context.next = 5;\n          return select(getBaseCurrency);\n\n        case 5:\n          base = _context.sent;\n          _context.next = 8;\n          return select(getExchangeRate);\n\n        case 8:\n          exchangeRate = _context.sent;\n          _context.t0 = report.data.netWorthEnd;\n\n          if (_context.t0) {\n            _context.next = 14;\n            break;\n          }\n\n          _context.next = 13;\n          return select(getNetWorth);\n\n        case 13:\n          _context.t0 = _context.sent;\n\n        case 14:\n          netWorthEnd = _context.t0;\n          _context.prev = 15;\n          _context.next = 18;\n          return call(TransactionsStorage.loadFiltered, transactionFilters(report));\n\n        case 18:\n          transactions = _context.sent;\n          _context.next = 21;\n          return call(loadReportData, report, transactions, exchangeRate, base, netWorthEnd);\n\n        case 21:\n          data = _context.sent;\n          _context.next = 24;\n          return put(loadReportSuccess(data));\n\n        case 24:\n          _context.next = 30;\n          break;\n\n        case 26:\n          _context.prev = 26;\n          _context.t1 = _context[\"catch\"](15);\n          _context.next = 30;\n          return put(loadReportFailure(_context.t1.message));\n\n        case 30:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[15, 26]]);\n}\nexport function refreshReportSaga() {\n  return _regeneratorRuntime.wrap(function refreshReportSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return put(loadReport());\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}\nexport default [takeLatest(loadReport, loadReportSaga), takeLatest(changeReportKind, refreshReportSaga), takeLatest(changeReportTimespan, refreshReportSaga), takeLatest(changeReportAccounts, refreshReportSaga), takeLatest(changeReportExcludedTags, refreshReportSaga), takeLatest(moveReportDateBackwards, refreshReportSaga), takeLatest(moveReportDateForwards, refreshReportSaga)];","map":{"version":3,"sources":["/Users/amipatel/Desktop/money-tracker/src/sagas/report.js"],"names":["loadReportSaga","refreshReportSaga","call","put","select","takeLatest","changeReportAccounts","changeReportExcludedTags","changeReportKind","changeReportTimespan","loadReport","loadReportFailure","loadReportSuccess","moveReportDateBackwards","moveReportDateForwards","transactionFilters","loadReportData","getNetWorth","getBaseCurrency","getExchangeRate","getReport","TransactionsStorage","report","base","exchangeRate","data","netWorthEnd","loadFiltered","transactions","message"],"mappings":";;;;yBAkBiBA,c;;;yBAwBAC,iB;;AA1CjB,SAASC,IAAT,EAAeC,GAAf,EAAoBC,MAApB,EAA4BC,UAA5B,QAA8C,oBAA9C;AACA,SACEC,oBADF,EAEEC,wBAFF,EAGEC,gBAHF,EAIEC,oBAJF,EAKEC,UALF,EAMEC,iBANF,EAOEC,iBAPF,EAQEC,uBARF,EASEC,sBATF,QAUO,mBAVP;AAWA,SAASC,kBAAT,EAA6BC,cAA7B,QAAmD,iBAAnD;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,SAASC,eAAT,EAA0BC,eAA1B,QAAiD,oBAAjD;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,OAAOC,mBAAP,MAAgC,2BAAhC;AAEA,OAAO,SAAUrB,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACU,iBAAMI,MAAM,CAACgB,SAAD,CAAZ;;AADV;AACCE,UAAAA,MADD;AAAA;AAEQ,iBAAMlB,MAAM,CAACc,eAAD,CAAZ;;AAFR;AAECK,UAAAA,IAFD;AAAA;AAGgB,iBAAMnB,MAAM,CAACe,eAAD,CAAZ;;AAHhB;AAGCK,UAAAA,YAHD;AAAA,wBAIeF,MAAM,CAACG,IAAP,CAAYC,WAJ3B;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAI2C,iBAAMtB,MAAM,CAACa,WAAD,CAAZ;;AAJ3C;AAAA;;AAAA;AAICS,UAAAA,WAJD;AAAA;AAAA;AAMkB,iBAAMxB,IAAI,CAC7BmB,mBAAmB,CAACM,YADS,EAE7BZ,kBAAkB,CAACO,MAAD,CAFW,CAAV;;AANlB;AAMGM,UAAAA,YANH;AAAA;AAUU,iBAAM1B,IAAI,CACrBc,cADqB,EAErBM,MAFqB,EAGrBM,YAHqB,EAIrBJ,YAJqB,EAKrBD,IALqB,EAMrBG,WANqB,CAAV;;AAVV;AAUGD,UAAAA,IAVH;AAAA;AAkBH,iBAAMtB,GAAG,CAACS,iBAAiB,CAACa,IAAD,CAAlB,CAAT;;AAlBG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAoBH,iBAAMtB,GAAG,CAACQ,iBAAiB,CAAC,YAAMkB,OAAP,CAAlB,CAAT;;AApBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBP,OAAO,SAAU5B,iBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAME,GAAG,CAACO,UAAU,EAAX,CAAT;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIP,eAAe,CACbL,UAAU,CAACK,UAAD,EAAaV,cAAb,CADG,EAEbK,UAAU,CAACG,gBAAD,EAAmBP,iBAAnB,CAFG,EAGbI,UAAU,CAACI,oBAAD,EAAuBR,iBAAvB,CAHG,EAIbI,UAAU,CAACC,oBAAD,EAAuBL,iBAAvB,CAJG,EAKbI,UAAU,CAACE,wBAAD,EAA2BN,iBAA3B,CALG,EAMbI,UAAU,CAACQ,uBAAD,EAA0BZ,iBAA1B,CANG,EAObI,UAAU,CAACS,sBAAD,EAAyBb,iBAAzB,CAPG,CAAf","sourcesContent":["import { call, put, select, takeLatest } from 'redux-saga/effects';\nimport {\n  changeReportAccounts,\n  changeReportExcludedTags,\n  changeReportKind,\n  changeReportTimespan,\n  loadReport,\n  loadReportFailure,\n  loadReportSuccess,\n  moveReportDateBackwards,\n  moveReportDateForwards\n} from 'actions/ui/report';\nimport { transactionFilters, loadReportData } from 'entities/Report';\nimport { getNetWorth } from 'selectors/entities/accounts';\nimport { getBaseCurrency, getExchangeRate } from 'selectors/settings';\nimport { getReport } from 'selectors/ui/report';\nimport TransactionsStorage from 'util/storage/transactions';\n\nexport function* loadReportSaga() {\n  const report = yield select(getReport);\n  const base = yield select(getBaseCurrency);\n  const exchangeRate = yield select(getExchangeRate);\n  const netWorthEnd = report.data.netWorthEnd || (yield select(getNetWorth));\n  try {\n    const transactions = yield call(\n      TransactionsStorage.loadFiltered,\n      transactionFilters(report)\n    );\n    const data = yield call(\n      loadReportData,\n      report,\n      transactions,\n      exchangeRate,\n      base,\n      netWorthEnd\n    );\n    yield put(loadReportSuccess(data));\n  } catch (error) {\n    yield put(loadReportFailure(error.message));\n  }\n}\n\nexport function* refreshReportSaga() {\n  yield put(loadReport());\n}\n\nexport default [\n  takeLatest(loadReport, loadReportSaga),\n  takeLatest(changeReportKind, refreshReportSaga),\n  takeLatest(changeReportTimespan, refreshReportSaga),\n  takeLatest(changeReportAccounts, refreshReportSaga),\n  takeLatest(changeReportExcludedTags, refreshReportSaga),\n  takeLatest(moveReportDateBackwards, refreshReportSaga),\n  takeLatest(moveReportDateForwards, refreshReportSaga)\n];\n"]},"metadata":{},"sourceType":"module"}