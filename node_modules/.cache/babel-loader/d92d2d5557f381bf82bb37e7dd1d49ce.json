{"ast":null,"code":"import format from 'date-fns/format';\nimport getDaysInMonth from 'date-fns/get_days_in_month';\nimport range from 'lodash/range';\nimport Currency from 'entities/Currency';\nimport { ReportTimespanT } from 'entities/Report';\nimport { TransationKindT } from 'entities/Transaction';\nimport { toUtcTimestamp } from 'util/timezone';\nvar Expense = TransationKindT.Expense,\n    Income = TransationKindT.Income;\nexport default function ExpenseIncomeData(report, transactions, exchangeRate, base) {\n  var labels = report.timespan === ReportTimespanT.Yearly ? range(0, 12).map(function (month) {\n    return format(new Date().setMonth(month), 'MMM');\n  }) : range(1, getDaysInMonth(report.date.start) + 1).map(function (day) {\n    return \"\".concat(day).padStart(2, '0');\n  });\n  var data = [new Array(labels.length).fill(0), // income series\n  new Array(labels.length).fill(0) // expense series\n  ];\n  var excluded = new Set(report.excludeTags);\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = transactions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var tx = _step.value;\n      if (tx.kind !== Expense && tx.kind !== Income) continue;\n      var period = format(toUtcTimestamp(tx.date), report.timespan === ReportTimespanT.Yearly ? 'M' : 'D');\n      var txAmount = Currency.convert(Math.abs(tx.amount), exchangeRate[tx.currency], base, tx.currency);\n      data[tx.kind === Income ? 0 : 1][parseInt(period) - 1] += txAmount;\n\n      if (tx.tags && tx.tags.find(function (tag) {\n        return excluded.has(tag);\n      })) {\n        data[0][parseInt(period) - 1] -= txAmount;\n        data[1][parseInt(period) - 1] -= txAmount;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return {\n    labels: labels,\n    series: data.map(function (set) {\n      return set.map(function (amount) {\n        return Math.floor(Currency.centsToNumber(amount, base));\n      });\n    })\n  };\n}","map":{"version":3,"sources":["/Users/amipatel/Desktop/money-tracker/src/entities/Report/ExpenseIncomeData.ts"],"names":["format","getDaysInMonth","range","Currency","ReportTimespanT","TransationKindT","toUtcTimestamp","Expense","Income","ExpenseIncomeData","report","transactions","exchangeRate","base","labels","timespan","Yearly","map","month","Date","setMonth","date","start","day","padStart","data","Array","length","fill","excluded","Set","excludeTags","tx","kind","period","txAmount","convert","Math","abs","amount","currency","parseInt","tags","find","tag","has","series","set","floor","centsToNumber"],"mappings":"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","sourcesContent":["import format from 'date-fns/format';\nimport getDaysInMonth from 'date-fns/get_days_in_month';\nimport range from 'lodash/range';\nimport Currency, { ExchangeRateT } from 'entities/Currency';\nimport { ReportDataT, ReportStateT, ReportTimespanT } from 'entities/Report';\nimport { TransactionStateT, TransationKindT } from 'entities/Transaction';\nimport { toUtcTimestamp } from 'util/timezone';\n\nconst { Expense, Income } = TransationKindT;\n\nexport default function ExpenseIncomeData(\n  report: ReportStateT,\n  transactions: TransactionStateT[],\n  exchangeRate: ExchangeRateT,\n  base: string\n): ReportDataT {\n  const labels =\n    report.timespan === ReportTimespanT.Yearly\n      ? range(0, 12).map(month => format(new Date().setMonth(month), 'MMM'))\n      : range(1, getDaysInMonth(report.date.start) + 1).map(day =>\n          `${day}`.padStart(2, '0')\n        );\n  const data = [\n    new Array(labels.length).fill(0), // income series\n    new Array(labels.length).fill(0) // expense series\n  ];\n  const excluded = new Set(report.excludeTags);\n\n  for (const tx of transactions) {\n    if (tx.kind !== Expense && tx.kind !== Income) continue;\n\n    const period = format(\n      toUtcTimestamp(tx.date),\n      report.timespan === ReportTimespanT.Yearly ? 'M' : 'D'\n    );\n    const txAmount = Currency.convert(\n      Math.abs(tx.amount),\n      exchangeRate[tx.currency],\n      base,\n      tx.currency\n    );\n    data[tx.kind === Income ? 0 : 1][parseInt(period) - 1] += txAmount;\n    if (tx.tags && tx.tags.find(tag => excluded.has(tag))) {\n      data[0][parseInt(period) - 1] -= txAmount;\n      data[1][parseInt(period) - 1] -= txAmount;\n    }\n  }\n\n  return {\n    labels,\n    series: data.map(set =>\n      set.map(amount => Math.floor(Currency.centsToNumber(amount, base)))\n    )\n  };\n}\n"]},"metadata":{},"sourceType":"module"}