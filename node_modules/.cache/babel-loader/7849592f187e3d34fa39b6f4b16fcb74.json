{"ast":null,"code":"import fetch from 'isomorphic-fetch';\nexport function fetchExchangeRates(base, target) {\n  if (!target.includes(base)) target.push(base);\n  var exchangeServiceUrl = process.env.REACT_APP_XCHANGE_URL;\n  var pairs = target.map(function (code) {\n    return \"\".concat(base).concat(code);\n  });\n  return fetch(\"\".concat(exchangeServiceUrl, \"?pairs=\").concat(pairs.join(','))).then(function (body) {\n    return body.json();\n  }).then(function (response) {\n    return response.rates.reduce(function (result, row) {\n      result[row.id.substring(3)] = parseFloat(row['rate']);\n      return result;\n    }, {});\n  });\n}","map":{"version":3,"sources":["/Users/amipatel/Desktop/money-tracker/src/util/currency.js"],"names":["fetch","fetchExchangeRates","base","target","includes","push","exchangeServiceUrl","process","env","REACT_APP_XCHANGE_URL","pairs","map","code","join","then","body","json","response","rates","reduce","result","row","id","substring","parseFloat"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AAEA,OAAO,SAASC,kBAAT,CAA4BC,IAA5B,EAAkCC,MAAlC,EAA0C;AAC/C,MAAI,CAACA,MAAM,CAACC,QAAP,CAAgBF,IAAhB,CAAL,EAA4BC,MAAM,CAACE,IAAP,CAAYH,IAAZ;AAC5B,MAAMI,kBAAkB,GAAGC,OAAO,CAACC,GAAR,CAAYC,qBAAvC;AACA,MAAMC,KAAK,GAAGP,MAAM,CAACQ,GAAP,CAAW,UAAAC,IAAI;AAAA,qBAAOV,IAAP,SAAcU,IAAd;AAAA,GAAf,CAAd;AAEA,SAAOZ,KAAK,WAAIM,kBAAJ,oBAAgCI,KAAK,CAACG,IAAN,CAAW,GAAX,CAAhC,EAAL,CACJC,IADI,CACC,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACC,IAAL,EAAJ;AAAA,GADL,EAEJF,IAFI,CAEC,UAAAG,QAAQ;AAAA,WACZA,QAAQ,CAACC,KAAT,CAAeC,MAAf,CAAsB,UAACC,MAAD,EAASC,GAAT,EAAiB;AACrCD,MAAAA,MAAM,CAACC,GAAG,CAACC,EAAJ,CAAOC,SAAP,CAAiB,CAAjB,CAAD,CAAN,GAA8BC,UAAU,CAACH,GAAG,CAAC,MAAD,CAAJ,CAAxC;AACA,aAAOD,MAAP;AACD,KAHD,EAGG,EAHH,CADY;AAAA,GAFT,CAAP;AAQD","sourcesContent":["import fetch from 'isomorphic-fetch';\n\nexport function fetchExchangeRates(base, target) {\n  if (!target.includes(base)) target.push(base);\n  const exchangeServiceUrl = process.env.REACT_APP_XCHANGE_URL;\n  const pairs = target.map(code => `${base}${code}`);\n\n  return fetch(`${exchangeServiceUrl}?pairs=${pairs.join(',')}`)\n    .then(body => body.json())\n    .then(response =>\n      response.rates.reduce((result, row) => {\n        result[row.id.substring(3)] = parseFloat(row['rate']);\n        return result;\n      }, {})\n    );\n}\n"]},"metadata":{},"sourceType":"module"}