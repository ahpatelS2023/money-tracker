{"ast":null,"code":"import format from 'date-fns/format';\nimport getDaysInMonth from 'date-fns/get_days_in_month';\nimport range from 'lodash/range';\nimport { toUtcTimestamp } from 'util/timezone';\nimport Currency from 'entities/Currency';\nimport { ReportTimespanT } from 'entities/Report';\nimport { TransationKindT } from 'entities/Transaction';\nvar Expense = TransationKindT.Expense,\n    Income = TransationKindT.Income;\nexport default function NetWorthData(report, transactions, exchangeRate, base, netWorthEnd) {\n  var labels = report.timespan === ReportTimespanT.Yearly ? range(0, 12).map(function (month) {\n    return format(new Date().setMonth(month), 'MMM');\n  }) : range(1, getDaysInMonth(report.date.start) + 1).map(function (day) {\n    return \"\".concat(day).padStart(2, '0');\n  });\n  var data = [];\n  var lastPeriod;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = transactions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var tx = _step.value;\n      if (tx.kind !== Expense && tx.kind !== Income) continue;\n      var period = parseInt(format(toUtcTimestamp(tx.date), report.timespan === ReportTimespanT.Yearly ? 'M' : 'D')) - 1;\n\n      if (period !== lastPeriod) {\n        if (lastPeriod === undefined) {\n          lastPeriod = period + 1;\n          data[lastPeriod] = netWorthEnd;\n        }\n\n        data[period] = data[lastPeriod];\n      }\n\n      lastPeriod = period;\n      data[period] -= Currency.convert(tx.amount, exchangeRate[tx.currency], base, tx.currency);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  if (lastPeriod && lastPeriod > 0) data[0] = data[lastPeriod];\n\n  if (report.date.end < Date.now() && data.length < labels.length) {\n    data[labels.length - 1] = data[data.length - 1];\n  }\n\n  return {\n    labels: labels,\n    series: [data.map(function (amount) {\n      return Math.floor(Currency.centsToNumber(amount, base));\n    })],\n    netWorthStart: data[0],\n    netWorthEnd: netWorthEnd\n  };\n}","map":{"version":3,"sources":["/Users/amipatel/Desktop/money-tracker/src/entities/Report/NetWorthData.ts"],"names":["format","getDaysInMonth","range","toUtcTimestamp","Currency","ReportTimespanT","TransationKindT","Expense","Income","NetWorthData","report","transactions","exchangeRate","base","netWorthEnd","labels","timespan","Yearly","map","month","Date","setMonth","date","start","day","padStart","data","lastPeriod","tx","kind","period","parseInt","undefined","convert","amount","currency","end","now","length","series","Math","floor","centsToNumber","netWorthStart"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,iBAAnB;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,QAAP,MAAwC,mBAAxC;AACA,SAAoCC,eAApC,QAA2D,iBAA3D;AACA,SAA4BC,eAA5B,QAAmD,sBAAnD;IAEQC,O,GAAoBD,e,CAApBC,O;IAASC,M,GAAWF,e,CAAXE,M;AAEjB,eAAe,SAASC,YAAT,CACbC,MADa,EAEbC,YAFa,EAGbC,YAHa,EAIbC,IAJa,EAKbC,WALa,EAMA;AACb,MAAMC,MAAM,GACVL,MAAM,CAACM,QAAP,KAAoBX,eAAe,CAACY,MAApC,GACIf,KAAK,CAAC,CAAD,EAAI,EAAJ,CAAL,CAAagB,GAAb,CAAiB,UAAAC,KAAK;AAAA,WAAInB,MAAM,CAAC,IAAIoB,IAAJ,GAAWC,QAAX,CAAoBF,KAApB,CAAD,EAA6B,KAA7B,CAAV;AAAA,GAAtB,CADJ,GAEIjB,KAAK,CAAC,CAAD,EAAID,cAAc,CAACS,MAAM,CAACY,IAAP,CAAYC,KAAb,CAAd,GAAoC,CAAxC,CAAL,CAAgDL,GAAhD,CAAoD,UAAAM,GAAG;AAAA,WACrD,UAAGA,GAAH,EAASC,QAAT,CAAkB,CAAlB,EAAqB,GAArB,CADqD;AAAA,GAAvD,CAHN;AAOA,MAAMC,IAAI,GAAG,EAAb;AACA,MAAIC,UAAJ;AATa;AAAA;AAAA;;AAAA;AAUb,yBAAiBhB,YAAjB,8HAA+B;AAAA,UAApBiB,EAAoB;AAC7B,UAAIA,EAAE,CAACC,IAAH,KAAYtB,OAAZ,IAAuBqB,EAAE,CAACC,IAAH,KAAYrB,MAAvC,EAA+C;AAE/C,UAAMsB,MAAM,GACVC,QAAQ,CACN/B,MAAM,CACJG,cAAc,CAACyB,EAAE,CAACN,IAAJ,CADV,EAEJZ,MAAM,CAACM,QAAP,KAAoBX,eAAe,CAACY,MAApC,GAA6C,GAA7C,GAAmD,GAF/C,CADA,CAAR,GAKI,CANN;;AAOA,UAAIa,MAAM,KAAKH,UAAf,EAA2B;AACzB,YAAIA,UAAU,KAAKK,SAAnB,EAA8B;AAC5BL,UAAAA,UAAU,GAAGG,MAAM,GAAG,CAAtB;AACAJ,UAAAA,IAAI,CAACC,UAAD,CAAJ,GAAmBb,WAAnB;AACD;;AACDY,QAAAA,IAAI,CAACI,MAAD,CAAJ,GAAeJ,IAAI,CAACC,UAAD,CAAnB;AACD;;AAEDA,MAAAA,UAAU,GAAGG,MAAb;AAEAJ,MAAAA,IAAI,CAACI,MAAD,CAAJ,IAAgB1B,QAAQ,CAAC6B,OAAT,CACdL,EAAE,CAACM,MADW,EAEdtB,YAAY,CAACgB,EAAE,CAACO,QAAJ,CAFE,EAGdtB,IAHc,EAIde,EAAE,CAACO,QAJW,CAAhB;AAMD;AApCY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsCb,MAAIR,UAAU,IAAIA,UAAU,GAAG,CAA/B,EAAkCD,IAAI,CAAC,CAAD,CAAJ,GAAUA,IAAI,CAACC,UAAD,CAAd;;AAClC,MAAIjB,MAAM,CAACY,IAAP,CAAYc,GAAZ,GAAkBhB,IAAI,CAACiB,GAAL,EAAlB,IAAgCX,IAAI,CAACY,MAAL,GAAcvB,MAAM,CAACuB,MAAzD,EAAiE;AAC/DZ,IAAAA,IAAI,CAACX,MAAM,CAACuB,MAAP,GAAgB,CAAjB,CAAJ,GAA0BZ,IAAI,CAACA,IAAI,CAACY,MAAL,GAAc,CAAf,CAA9B;AACD;;AAED,SAAO;AACLvB,IAAAA,MAAM,EAANA,MADK;AAELwB,IAAAA,MAAM,EAAE,CACNb,IAAI,CAACR,GAAL,CAAS,UAAAgB,MAAM;AAAA,aAAIM,IAAI,CAACC,KAAL,CAAWrC,QAAQ,CAACsC,aAAT,CAAuBR,MAAvB,EAA+BrB,IAA/B,CAAX,CAAJ;AAAA,KAAf,CADM,CAFH;AAKL8B,IAAAA,aAAa,EAAEjB,IAAI,CAAC,CAAD,CALd;AAMLZ,IAAAA,WAAW,EAAXA;AANK,GAAP;AAQD","sourcesContent":["import format from 'date-fns/format';\nimport getDaysInMonth from 'date-fns/get_days_in_month';\nimport range from 'lodash/range';\nimport { toUtcTimestamp } from 'util/timezone';\nimport Currency, { ExchangeRateT } from 'entities/Currency';\nimport { ReportStateT, ReportDataT, ReportTimespanT } from 'entities/Report';\nimport { TransactionStateT, TransationKindT } from 'entities/Transaction';\n\nconst { Expense, Income } = TransationKindT;\n\nexport default function NetWorthData(\n  report: ReportStateT,\n  transactions: TransactionStateT[],\n  exchangeRate: ExchangeRateT,\n  base: string,\n  netWorthEnd: number\n): ReportDataT {\n  const labels =\n    report.timespan === ReportTimespanT.Yearly\n      ? range(0, 12).map(month => format(new Date().setMonth(month), 'MMM'))\n      : range(1, getDaysInMonth(report.date.start) + 1).map(day =>\n          `${day}`.padStart(2, '0')\n        );\n\n  const data = [];\n  let lastPeriod: number | undefined;\n  for (const tx of transactions) {\n    if (tx.kind !== Expense && tx.kind !== Income) continue;\n\n    const period =\n      parseInt(\n        format(\n          toUtcTimestamp(tx.date),\n          report.timespan === ReportTimespanT.Yearly ? 'M' : 'D'\n        )\n      ) - 1;\n    if (period !== lastPeriod) {\n      if (lastPeriod === undefined) {\n        lastPeriod = period + 1;\n        data[lastPeriod] = netWorthEnd;\n      }\n      data[period] = data[lastPeriod];\n    }\n\n    lastPeriod = period;\n\n    data[period] -= Currency.convert(\n      tx.amount,\n      exchangeRate[tx.currency],\n      base,\n      tx.currency\n    );\n  }\n\n  if (lastPeriod && lastPeriod > 0) data[0] = data[lastPeriod];\n  if (report.date.end < Date.now() && data.length < labels.length) {\n    data[labels.length - 1] = data[data.length - 1];\n  }\n\n  return {\n    labels,\n    series: [\n      data.map(amount => Math.floor(Currency.centsToNumber(amount, base)))\n    ],\n    netWorthStart: data[0],\n    netWorthEnd\n  };\n}\n"]},"metadata":{},"sourceType":"module"}