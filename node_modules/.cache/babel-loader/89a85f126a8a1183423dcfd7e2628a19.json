{"ast":null,"code":"import _regeneratorRuntime from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadSetting),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(updateCurrencySaga),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(completeSetupSaga),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(saveCollapsedSectionsSaga);\n\nimport { takeLatest, call, put, select } from 'redux-saga/effects';\nimport union from 'lodash/union';\nimport { loadSettingsSuccess, changeSettingsCurrency, updateExchangeRate, updateExchangeRateSuccess, updateExchangeRateFailure, completeSetup, toggleSectionCollapse } from '../actions/settings';\nimport { getCollapsedSections, getBaseCurrency, getSecondaryCurrency } from '../selectors/settings';\nimport { getAccountsCurrencyList } from '../selectors/entities/accounts';\nimport SettingsStorage from '../util/storage/settings';\nimport { fetchExchangeRates } from '../util/currency';\nexport function loadSetting() {\n  var settings;\n  return _regeneratorRuntime.wrap(function loadSetting$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return call(SettingsStorage.load);\n\n        case 2:\n          settings = _context.sent;\n          _context.next = 5;\n          return put(loadSettingsSuccess(settings));\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this);\n}\nexport function updateCurrencySaga() {\n  var base, secondary, used, exchangeRate;\n  return _regeneratorRuntime.wrap(function updateCurrencySaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return select(getBaseCurrency);\n\n        case 2:\n          base = _context2.sent;\n          _context2.next = 5;\n          return select(getSecondaryCurrency);\n\n        case 5:\n          secondary = _context2.sent;\n          _context2.next = 8;\n          return select(getAccountsCurrencyList);\n\n        case 8:\n          used = _context2.sent;\n          _context2.prev = 9;\n          _context2.next = 12;\n          return call(fetchExchangeRates, base, union(secondary, used));\n\n        case 12:\n          exchangeRate = _context2.sent;\n          _context2.next = 15;\n          return put(updateExchangeRateSuccess(exchangeRate));\n\n        case 15:\n          _context2.next = 17;\n          return call(SettingsStorage.save, {\n            currency: {\n              base: base,\n              secondary: secondary\n            },\n            exchangeRate: exchangeRate\n          });\n\n        case 17:\n          _context2.next = 23;\n          break;\n\n        case 19:\n          _context2.prev = 19;\n          _context2.t0 = _context2[\"catch\"](9);\n          _context2.next = 23;\n          return put(updateExchangeRateFailure(_context2.t0));\n\n        case 23:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this, [[9, 19]]);\n}\nexport function completeSetupSaga() {\n  return _regeneratorRuntime.wrap(function completeSetupSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return call(SettingsStorage.save, {\n            isSetupComplete: true\n          });\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, this);\n}\nexport function saveCollapsedSectionsSaga() {\n  var collapsedSections;\n  return _regeneratorRuntime.wrap(function saveCollapsedSectionsSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return select(getCollapsedSections);\n\n        case 2:\n          collapsedSections = _context4.sent;\n          _context4.next = 5;\n          return call(SettingsStorage.saveLocal, {\n            collapsedSections: collapsedSections\n          });\n\n        case 5:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, this);\n}\nexport default [takeLatest(changeSettingsCurrency, updateCurrencySaga), takeLatest(updateExchangeRate, updateCurrencySaga), takeLatest(completeSetup, completeSetupSaga), takeLatest(toggleSectionCollapse, saveCollapsedSectionsSaga)];","map":{"version":3,"sources":["/Users/amipatel/Desktop/money-tracker/src/sagas/settings.js"],"names":["loadSetting","updateCurrencySaga","completeSetupSaga","saveCollapsedSectionsSaga","takeLatest","call","put","select","union","loadSettingsSuccess","changeSettingsCurrency","updateExchangeRate","updateExchangeRateSuccess","updateExchangeRateFailure","completeSetup","toggleSectionCollapse","getCollapsedSections","getBaseCurrency","getSecondaryCurrency","getAccountsCurrencyList","SettingsStorage","fetchExchangeRates","load","settings","base","secondary","used","exchangeRate","save","currency","isSetupComplete","collapsedSections","saveLocal"],"mappings":";;;;yBAoBiBA,W;;;yBAKAC,kB;;;yBAoBAC,iB;;;yBAIAC,yB;;AAjDjB,SAASC,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,MAAhC,QAA8C,oBAA9C;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,SACEC,mBADF,EAEEC,sBAFF,EAGEC,kBAHF,EAIEC,yBAJF,EAKEC,yBALF,EAMEC,aANF,EAOEC,qBAPF,QAQO,qBARP;AASA,SACEC,oBADF,EAEEC,eAFF,EAGEC,oBAHF,QAIO,uBAJP;AAKA,SAASC,uBAAT,QAAwC,gCAAxC;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,SAASC,kBAAT,QAAmC,kBAAnC;AAEA,OAAO,SAAUrB,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACY,iBAAMK,IAAI,CAACe,eAAe,CAACE,IAAjB,CAAV;;AADZ;AACCC,UAAAA,QADD;AAAA;AAEL,iBAAMjB,GAAG,CAACG,mBAAmB,CAACc,QAAD,CAApB,CAAT;;AAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKP,OAAO,SAAUtB,kBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACQ,iBAAMM,MAAM,CAACU,eAAD,CAAZ;;AADR;AACCO,UAAAA,IADD;AAAA;AAEa,iBAAMjB,MAAM,CAACW,oBAAD,CAAZ;;AAFb;AAECO,UAAAA,SAFD;AAAA;AAGQ,iBAAMlB,MAAM,CAACY,uBAAD,CAAZ;;AAHR;AAGCO,UAAAA,IAHD;AAAA;AAAA;AAKkB,iBAAMrB,IAAI,CAC7BgB,kBAD6B,EAE7BG,IAF6B,EAG7BhB,KAAK,CAACiB,SAAD,EAAYC,IAAZ,CAHwB,CAAV;;AALlB;AAKGC,UAAAA,YALH;AAAA;AAUH,iBAAMrB,GAAG,CAACM,yBAAyB,CAACe,YAAD,CAA1B,CAAT;;AAVG;AAAA;AAWH,iBAAMtB,IAAI,CAACe,eAAe,CAACQ,IAAjB,EAAuB;AAC/BC,YAAAA,QAAQ,EAAE;AAAEL,cAAAA,IAAI,EAAJA,IAAF;AAAQC,cAAAA,SAAS,EAATA;AAAR,aADqB;AAE/BE,YAAAA,YAAY,EAAZA;AAF+B,WAAvB,CAAV;;AAXG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAgBH,iBAAMrB,GAAG,CAACO,yBAAyB,cAA1B,CAAT;;AAhBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBP,OAAO,SAAUX,iBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAMG,IAAI,CAACe,eAAe,CAACQ,IAAjB,EAAuB;AAAEE,YAAAA,eAAe,EAAE;AAAnB,WAAvB,CAAV;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIP,OAAO,SAAU3B,yBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACqB,iBAAMI,MAAM,CAACS,oBAAD,CAAZ;;AADrB;AACCe,UAAAA,iBADD;AAAA;AAEL,iBAAM1B,IAAI,CAACe,eAAe,CAACY,SAAjB,EAA4B;AAAED,YAAAA,iBAAiB,EAAjBA;AAAF,WAA5B,CAAV;;AAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKP,eAAe,CACb3B,UAAU,CAACM,sBAAD,EAAyBT,kBAAzB,CADG,EAEbG,UAAU,CAACO,kBAAD,EAAqBV,kBAArB,CAFG,EAGbG,UAAU,CAACU,aAAD,EAAgBZ,iBAAhB,CAHG,EAIbE,UAAU,CAACW,qBAAD,EAAwBZ,yBAAxB,CAJG,CAAf","sourcesContent":["import { takeLatest, call, put, select } from 'redux-saga/effects';\nimport union from 'lodash/union';\nimport {\n  loadSettingsSuccess,\n  changeSettingsCurrency,\n  updateExchangeRate,\n  updateExchangeRateSuccess,\n  updateExchangeRateFailure,\n  completeSetup,\n  toggleSectionCollapse\n} from '../actions/settings';\nimport {\n  getCollapsedSections,\n  getBaseCurrency,\n  getSecondaryCurrency\n} from '../selectors/settings';\nimport { getAccountsCurrencyList } from '../selectors/entities/accounts';\nimport SettingsStorage from '../util/storage/settings';\nimport { fetchExchangeRates } from '../util/currency';\n\nexport function* loadSetting() {\n  const settings = yield call(SettingsStorage.load);\n  yield put(loadSettingsSuccess(settings));\n}\n\nexport function* updateCurrencySaga() {\n  const base = yield select(getBaseCurrency);\n  const secondary = yield select(getSecondaryCurrency);\n  const used = yield select(getAccountsCurrencyList);\n  try {\n    const exchangeRate = yield call(\n      fetchExchangeRates,\n      base,\n      union(secondary, used)\n    );\n    yield put(updateExchangeRateSuccess(exchangeRate));\n    yield call(SettingsStorage.save, {\n      currency: { base, secondary },\n      exchangeRate\n    });\n  } catch (error) {\n    yield put(updateExchangeRateFailure(error));\n  }\n}\n\nexport function* completeSetupSaga() {\n  yield call(SettingsStorage.save, { isSetupComplete: true });\n}\n\nexport function* saveCollapsedSectionsSaga() {\n  const collapsedSections = yield select(getCollapsedSections);\n  yield call(SettingsStorage.saveLocal, { collapsedSections });\n}\n\nexport default [\n  takeLatest(changeSettingsCurrency, updateCurrencySaga),\n  takeLatest(updateExchangeRate, updateCurrencySaga),\n  takeLatest(completeSetup, completeSetupSaga),\n  takeLatest(toggleSectionCollapse, saveCollapsedSectionsSaga)\n];\n"]},"metadata":{},"sourceType":"module"}