{"ast":null,"code":"import _regeneratorRuntime from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadTagsSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(updateTagsUsage);\n\nimport { takeLatest, call, put } from 'redux-saga/effects';\nimport { loadTags, loadExpenseTagsSuccess, loadIncomeTagsSuccess } from '../actions/entities/tags';\nimport { TransationKindT } from '../entities/Transaction';\nimport TagsStorage from '../util/storage/tags';\nimport difference from '../util/SetDifference';\nvar Expense = TransationKindT.Expense,\n    Income = TransationKindT.Income;\nexport function loadTagsSaga() {\n  var expenseTags, incomeTags;\n  return _regeneratorRuntime.wrap(function loadTagsSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return call(TagsStorage.load, Expense);\n\n        case 2:\n          expenseTags = _context.sent;\n          _context.next = 5;\n          return put(loadExpenseTagsSuccess(expenseTags));\n\n        case 5:\n          _context.next = 7;\n          return call(TagsStorage.load, Income);\n\n        case 7:\n          incomeTags = _context.sent;\n          _context.next = 10;\n          return put(loadIncomeTagsSuccess(incomeTags));\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this);\n}\nexport function updateTagsUsage(prev, next) {\n  var prevTags, nextTags, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, newTag, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, oldTag;\n\n  return _regeneratorRuntime.wrap(function updateTagsUsage$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          prevTags = new Set(prev && prev.tags || []);\n          nextTags = new Set(next && next.tags || []);\n          _iteratorNormalCompletion = true;\n          _didIteratorError = false;\n          _iteratorError = undefined;\n          _context2.prev = 5;\n          _iterator = difference(nextTags, prevTags)[Symbol.iterator]();\n\n        case 7:\n          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n            _context2.next = 14;\n            break;\n          }\n\n          newTag = _step.value;\n          _context2.next = 11;\n          return call(TagsStorage.updateUsage, next.kind, newTag, 1);\n\n        case 11:\n          _iteratorNormalCompletion = true;\n          _context2.next = 7;\n          break;\n\n        case 14:\n          _context2.next = 20;\n          break;\n\n        case 16:\n          _context2.prev = 16;\n          _context2.t0 = _context2[\"catch\"](5);\n          _didIteratorError = true;\n          _iteratorError = _context2.t0;\n\n        case 20:\n          _context2.prev = 20;\n          _context2.prev = 21;\n\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n\n        case 23:\n          _context2.prev = 23;\n\n          if (!_didIteratorError) {\n            _context2.next = 26;\n            break;\n          }\n\n          throw _iteratorError;\n\n        case 26:\n          return _context2.finish(23);\n\n        case 27:\n          return _context2.finish(20);\n\n        case 28:\n          _iteratorNormalCompletion2 = true;\n          _didIteratorError2 = false;\n          _iteratorError2 = undefined;\n          _context2.prev = 31;\n          _iterator2 = difference(prevTags, nextTags)[Symbol.iterator]();\n\n        case 33:\n          if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {\n            _context2.next = 40;\n            break;\n          }\n\n          oldTag = _step2.value;\n          _context2.next = 37;\n          return call(TagsStorage.updateUsage, prev.kind, oldTag, -1);\n\n        case 37:\n          _iteratorNormalCompletion2 = true;\n          _context2.next = 33;\n          break;\n\n        case 40:\n          _context2.next = 46;\n          break;\n\n        case 42:\n          _context2.prev = 42;\n          _context2.t1 = _context2[\"catch\"](31);\n          _didIteratorError2 = true;\n          _iteratorError2 = _context2.t1;\n\n        case 46:\n          _context2.prev = 46;\n          _context2.prev = 47;\n\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n\n        case 49:\n          _context2.prev = 49;\n\n          if (!_didIteratorError2) {\n            _context2.next = 52;\n            break;\n          }\n\n          throw _iteratorError2;\n\n        case 52:\n          return _context2.finish(49);\n\n        case 53:\n          return _context2.finish(46);\n\n        case 54:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this, [[5, 16, 20, 28], [21,, 23, 27], [31, 42, 46, 54], [47,, 49, 53]]);\n}\nexport default [takeLatest(loadTags, loadTagsSaga)];","map":{"version":3,"sources":["/Users/amipatel/Desktop/money-tracker/src/sagas/tags.js"],"names":["loadTagsSaga","updateTagsUsage","takeLatest","call","put","loadTags","loadExpenseTagsSuccess","loadIncomeTagsSuccess","TransationKindT","TagsStorage","difference","Expense","Income","load","expenseTags","incomeTags","prev","next","prevTags","Set","tags","nextTags","newTag","updateUsage","kind","oldTag"],"mappings":";;;;yBAYiBA,Y;;;yBAOAC,e;;AAnBjB,SAASC,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,QAAsC,oBAAtC;AACA,SACEC,QADF,EAEEC,sBAFF,EAGEC,qBAHF,QAIO,0BAJP;AAKA,SAASC,eAAT,QAAgC,yBAAhC;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;IAEQC,O,GAAoBH,e,CAApBG,O;IAASC,M,GAAWJ,e,CAAXI,M;AAEjB,OAAO,SAAUZ,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACe,iBAAMG,IAAI,CAACM,WAAW,CAACI,IAAb,EAAmBF,OAAnB,CAAV;;AADf;AACCG,UAAAA,WADD;AAAA;AAEL,iBAAMV,GAAG,CAACE,sBAAsB,CAACQ,WAAD,CAAvB,CAAT;;AAFK;AAAA;AAGc,iBAAMX,IAAI,CAACM,WAAW,CAACI,IAAb,EAAmBD,MAAnB,CAAV;;AAHd;AAGCG,UAAAA,UAHD;AAAA;AAIL,iBAAMX,GAAG,CAACG,qBAAqB,CAACQ,UAAD,CAAtB,CAAT;;AAJK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOP,OAAO,SAAUd,eAAV,CAA0Be,IAA1B,EAAgCC,IAAhC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACCC,UAAAA,QADD,GACY,IAAIC,GAAJ,CAASH,IAAI,IAAIA,IAAI,CAACI,IAAd,IAAuB,EAA/B,CADZ;AAECC,UAAAA,QAFD,GAEY,IAAIF,GAAJ,CAASF,IAAI,IAAIA,IAAI,CAACG,IAAd,IAAuB,EAA/B,CAFZ;AAAA;AAAA;AAAA;AAAA;AAAA,sBAIgBV,UAAU,CAACW,QAAD,EAAWH,QAAX,CAJ1B;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIMI,UAAAA,MAJN;AAAA;AAKH,iBAAMnB,IAAI,CAACM,WAAW,CAACc,WAAb,EAA0BN,IAAI,CAACO,IAA/B,EAAqCF,MAArC,EAA6C,CAA7C,CAAV;;AALG;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAOgBZ,UAAU,CAACQ,QAAD,EAAWG,QAAX,CAP1B;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOMI,UAAAA,MAPN;AAAA;AAQH,iBAAMtB,IAAI,CAACM,WAAW,CAACc,WAAb,EAA0BP,IAAI,CAACQ,IAA/B,EAAqCC,MAArC,EAA6C,CAAC,CAA9C,CAAV;;AARG;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYP,eAAe,CAACvB,UAAU,CAACG,QAAD,EAAWL,YAAX,CAAX,CAAf","sourcesContent":["import { takeLatest, call, put } from 'redux-saga/effects';\nimport {\n  loadTags,\n  loadExpenseTagsSuccess,\n  loadIncomeTagsSuccess\n} from '../actions/entities/tags';\nimport { TransationKindT } from '../entities/Transaction';\nimport TagsStorage from '../util/storage/tags';\nimport difference from '../util/SetDifference';\n\nconst { Expense, Income } = TransationKindT;\n\nexport function* loadTagsSaga() {\n  const expenseTags = yield call(TagsStorage.load, Expense);\n  yield put(loadExpenseTagsSuccess(expenseTags));\n  const incomeTags = yield call(TagsStorage.load, Income);\n  yield put(loadIncomeTagsSuccess(incomeTags));\n}\n\nexport function* updateTagsUsage(prev, next) {\n  const prevTags = new Set((prev && prev.tags) || []);\n  const nextTags = new Set((next && next.tags) || []);\n\n  for (const newTag of difference(nextTags, prevTags)) {\n    yield call(TagsStorage.updateUsage, next.kind, newTag, 1);\n  }\n  for (const oldTag of difference(prevTags, nextTags)) {\n    yield call(TagsStorage.updateUsage, prev.kind, oldTag, -1);\n  }\n}\n\nexport default [takeLatest(loadTags, loadTagsSaga)];\n"]},"metadata":{},"sourceType":"module"}