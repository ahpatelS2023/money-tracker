{"ast":null,"code":"import _slicedToArray from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/amipatel/Desktop/money-tracker/src/containers/ParticipantSurvey.js\";\nimport React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport * as Survey from 'survey-react';\nimport 'survey-react/survey.css';\nimport Modal from 'react-modal';\nimport { getTaskGroup, getTask } from '../tracking/utils/usabilityTasks';\nimport { sendResult } from '../tracking/utils/usabilityResult';\nimport { resetAlertCount, getAlertCount } from '../tracking/wrapper/alert';\nvar TASK_COUNT = 6;\nvar customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    transform: 'translate(-50%, -50%)',\n    maxHeight: '90vh',\n    maxWidth: '90%',\n    overflowY: 'auto'\n  }\n};\nvar defaultThemeColors = Survey.StylesManager.ThemeColors['default'];\ndefaultThemeColors['$main-color'] = '#00acc1 !important';\ndefaultThemeColors['$body-container-background-color'] = '#f0f9fa !important';\nvar init = {\n  title: \"Welcome to Money Tracker Usability Study\",\n  startSurveyText: 'Begin',\n  firstPageIsStarted: true,\n  pages: [{\n    questions: [{\n      type: 'html',\n      html: \"\\n            You are going to participate in a usability study for Money Tracker application.\\n            We are studying how machine learning can be leveraged to infer the usability of \\n            an application. You can help us by participating in a usability testing activity.\\n            It will take only a few minutes. \\n            <br/><br/>\\n            You will be using an app meant for managing your daily expenses. You will go through the activity by performing \".concat(TASK_COUNT, \" tasks. After all the tasks, you will take a short survey.\\n            <br/><br/>\\n            Please click on <b>Begin</b> button when you are ready.\\n            \")\n    }]\n  }, {\n    questions: [{\n      name: 'gender',\n      type: 'radiogroup',\n      title: 'Please select your gender:',\n      isRequired: true,\n      choices: [{\n        value: 'M',\n        text: 'Male'\n      }, {\n        value: 'F',\n        text: 'Female'\n      }, {\n        value: 'NB',\n        text: 'Non-binary'\n      }, {\n        value: 'NA',\n        text: 'Prefer not to disclose'\n      }]\n    }, {\n      name: 'age',\n      type: 'radiogroup',\n      title: 'Please select your age group:',\n      isRequired: true,\n      choices: [{\n        value: 0,\n        text: 'Under 18'\n      }, {\n        value: 18,\n        text: '18 to 24'\n      }, {\n        value: 25,\n        text: '25 to 39'\n      }, {\n        value: 40,\n        text: '40 to 59'\n      }, {\n        value: 60,\n        text: 'Over 60'\n      }]\n    }, {\n      name: 'consent',\n      type: 'checkbox',\n      title: 'Participation in this usability study is voluntary. All information will \\\n                  remain strictly confidential. Interactions made with the application \\\n                  during the test will be recorded. However, at no time will your name or \\\n                  any other identification be used.',\n      isRequired: true,\n      hasNone: false,\n      choices: ['I have read and understood the above information.']\n    }]\n  }]\n};\n\nvar beginTask = function beginTask(taskId) {\n  var taskGroup = localStorage.getItem('taskGroup');\n  var task = getTask(taskGroup, taskId);\n  return {\n    title: \"Task \".concat(taskId, \" out of \").concat(TASK_COUNT),\n    description: \"\".concat(task.title),\n    questions: [{\n      type: 'html',\n      html: \"\\n          You are about begin task \".concat(taskId, \" of the usability study.\\n          <br/><br/>\\n          <u>Scenario:</u> \").concat(task.scenario, \"\\n          <br/><br/>\\n          <u>Task:</u> \").concat(task.description, \"\\n          <br/><br/>\\n          Please click on <b>Begin Task</b> to start the task, and click on <b>Finish Task</b> button to end the task.\\n          <br/><br/>\\n          (If you want to view the task descriptions again during the test, click on <b>?</b> button.)\\n        \")\n    }]\n  };\n};\n\nvar positiveUsabilityChoices = [{\n  value: 1,\n  text: 'Strongly Disagree'\n}, {\n  value: 2,\n  text: 'Disagree'\n}, {\n  value: 3,\n  text: 'Indifferent'\n}, {\n  value: 4,\n  text: 'Agree'\n}, {\n  value: 5,\n  text: 'Strongly Agree'\n}];\nvar negativeUsabilityChoices = [{\n  value: 5,\n  text: 'Strongly Disagree'\n}, {\n  value: 4,\n  text: 'Disagree'\n}, {\n  value: 3,\n  text: 'Indifferent'\n}, {\n  value: 2,\n  text: 'Agree'\n}, {\n  value: 1,\n  text: 'Strongly Agree'\n}];\n\nvar finishTask = function finishTask() {\n  var questionArray = [{\n    type: 'dropdown',\n    name: 'satisfaction-positive',\n    title: 'I am satisfied with the system.',\n    choices: positiveUsabilityChoices,\n    isRequired: true\n  }, {\n    type: 'dropdown',\n    name: 'satisfaction-negative',\n    title: 'I found the system unpleasant to use.',\n    choices: negativeUsabilityChoices,\n    isRequired: true\n  }, {\n    type: 'dropdown',\n    name: 'effectiveness-1-positive',\n    title: 'I was able to use the system successfully.',\n    choices: positiveUsabilityChoices,\n    isRequired: true\n  }, {\n    type: 'dropdown',\n    name: 'effectiveness-1-negative',\n    title: 'I found some tasks cumbersome to complete.',\n    choices: negativeUsabilityChoices,\n    isRequired: true\n  }, {\n    type: 'dropdown',\n    name: 'effectiveness-2-positive',\n    title: 'The system allowed me to complete the tasks accurately.',\n    choices: positiveUsabilityChoices,\n    isRequired: true\n  }, {\n    type: 'dropdown',\n    name: 'effectiveness-2-negative',\n    title: 'I wish the system had provided more instructions.',\n    choices: negativeUsabilityChoices,\n    isRequired: true\n  }, {\n    type: 'dropdown',\n    name: 'efficiency-1-positive',\n    title: 'I was able to complete the tasks quickly.',\n    choices: positiveUsabilityChoices,\n    isRequired: true\n  }, {\n    type: 'dropdown',\n    name: 'efficiency-1-negative',\n    title: 'I found some tasks unnecessary long.',\n    choices: negativeUsabilityChoices,\n    isRequired: true\n  }, {\n    type: 'dropdown',\n    name: 'efficiency-2-positive',\n    title: 'I was able to copmlete the tasks with a reasonable number of steps.',\n    choices: positiveUsabilityChoices,\n    isRequired: true\n  }, {\n    type: 'dropdown',\n    name: 'efficiency-2-negative',\n    title: 'I found the system unnecessarily complex.',\n    choices: negativeUsabilityChoices,\n    isRequired: true\n  }, {\n    type: 'dropdown',\n    name: 'learnability-positive',\n    title: 'It was easy to learn to use this system.',\n    choices: positiveUsabilityChoices,\n    isRequired: true\n  }, {\n    type: 'dropdown',\n    name: 'learnability-negative',\n    title: 'I wish the system would have provided more information to help me better understand the outcomes of my actions.',\n    choices: negativeUsabilityChoices,\n    isRequired: true\n  }];\n  var currentIndex = questionArray.length,\n      randomIndex;\n\n  while (currentIndex != 0) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n    var _ref = [questionArray[randomIndex], questionArray[currentIndex]];\n    questionArray[currentIndex] = _ref[0];\n    questionArray[randomIndex] = _ref[1];\n  }\n\n  return {\n    title: \"All Tasks\",\n    description: \"Usability Survey Questions\",\n    questions: questionArray\n  };\n};\n\nvar done = {\n  title: 'Finishing Up',\n  description: 'Thank you for participating!',\n  showQuestionNumbers: 'off',\n  questions: [{\n    name: 'comment',\n    type: 'comment',\n    title: 'Please provide any additional comments you would like to share. If you would \\\n              like to be contacted in the future with the study results, please leave \\\n              your e-mail address.'\n  }]\n};\nexport default function ParticipantSurvey(props) {\n  var _useState = useState(JSON.parse(localStorage.getItem('taskComplete'))),\n      _useState2 = _slicedToArray(_useState, 2),\n      isVisible = _useState2[0],\n      setIsVisible = _useState2[1];\n\n  var _useState3 = useState(JSON.parse(localStorage.getItem('taskId'))),\n      _useState4 = _slicedToArray(_useState3, 2),\n      taskId = _useState4[0],\n      setTaskId = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isDone = _useState6[0],\n      setIsDone = _useState6[1];\n\n  function onCompleteInit(result) {\n    var demographics = {\n      age: result.data.age,\n      gender: result.data.gender\n    }; // Begin the usability test process, starting from task 1\n\n    localStorage.setItem('demographics', JSON.stringify(demographics));\n    localStorage.setItem('taskGroup', getTaskGroup());\n    localStorage.setItem('taskId', 1);\n    localStorage.setItem('taskComplete', false);\n    localStorage.setItem('taskInProgress', false);\n    setTaskId(1);\n  }\n\n  function onCompleteBeginTask(result) {\n    // Begin Task\n    localStorage.setItem('taskInProgress', true);\n    var events = [];\n    localStorage.setItem('events', JSON.stringify(events));\n    setIsVisible(false);\n  }\n\n  function onCompleteFinishTask(result) {\n    saveTaskResult(result);\n  }\n\n  function saveTaskResult(result) {\n    // Store collected events\n    var events = JSON.parse(localStorage.getItem('events'));\n    console.log(\"task\".concat(taskId, \"_events\"), JSON.stringify(events));\n    localStorage.setItem(\"task\".concat(taskId, \"_events\"), JSON.stringify(events)); // Reset events array\n\n    events = [];\n    localStorage.setItem('events', JSON.stringify(events)); // Store collected number of alerts\n\n    localStorage.setItem(\"task\".concat(taskId, \"_alerts\"), getAlertCount()); // Reset number of alerts\n\n    resetAlertCount();\n\n    if (result !== null) {\n      // Store collected survey results\n      var orderedResult = Object.keys(result.data).sort().reduce(function (obj, key) {\n        obj[key] = result.data[key];\n        return obj;\n      }, {});\n      localStorage.setItem(\"surveyResults\", JSON.stringify(orderedResult));\n    }\n\n    localStorage.setItem('taskInProgress', false);\n\n    if (taskId < TASK_COUNT) {\n      localStorage.setItem('taskId', taskId + 1);\n      localStorage.setItem('taskComplete', false);\n      setTaskId(taskId + 1);\n    } else {\n      setIsDone(true);\n    }\n  }\n\n  function onCompleteDone(result) {\n    var comment = result.data.comment ? result.data.comment : '';\n    localStorage.setItem('comment', comment);\n    sendResult();\n  }\n\n  Survey.StylesManager.applyTheme(); // select which survey screen to display based on the state'\n\n  var survey;\n  var surveyJSON, onComplete;\n  var completeText = 'Complete';\n\n  if (!localStorage.getItem('demographics')) {\n    surveyJSON = init;\n    onComplete = onCompleteInit;\n  } else {\n    var _taskId = JSON.parse(localStorage.getItem('taskId'));\n\n    var taskComplete = JSON.parse(localStorage.getItem('taskComplete'));\n\n    if (taskComplete && _taskId < TASK_COUNT) {\n      saveTaskResult(null);\n      _taskId = JSON.parse(localStorage.getItem('taskId'));\n      taskComplete = JSON.parse(localStorage.getItem('taskComplete'));\n    }\n\n    if (isDone) {\n      surveyJSON = done;\n      onComplete = onCompleteDone;\n    } else if (taskComplete) {\n      surveyJSON = finishTask(_taskId);\n      onComplete = onCompleteFinishTask;\n    } else {\n      surveyJSON = beginTask(_taskId);\n      onComplete = onCompleteBeginTask;\n      completeText = 'Begin Task';\n    }\n  }\n\n  survey = React.createElement(Survey.Survey, {\n    json: surveyJSON,\n    showCompletedPage: false,\n    onComplete: onComplete,\n    completeText: completeText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434\n    },\n    __self: this\n  });\n  useEffect(function () {\n    var taskComplete = JSON.parse(localStorage.getItem('taskComplete'));\n    var taskInProgress = JSON.parse(localStorage.getItem('taskInProgress'));\n\n    if (taskInProgress && !taskComplete) {\n      setIsVisible(false);\n    } else {\n      setIsVisible(true);\n    }\n  }, [localStorage.getItem('taskComplete'), localStorage.getItem('taskInProgress')]); // render survey\n\n  var surveyRender = React.createElement(Modal, {\n    isOpen: !localStorage.getItem('demographics') || isVisible,\n    style: customStyles,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 460\n    },\n    __self: this\n  }, survey);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 468\n    },\n    __self: this\n  }, surveyRender);\n}","map":{"version":3,"sources":["/Users/amipatel/Desktop/money-tracker/src/containers/ParticipantSurvey.js"],"names":["React","useEffect","useState","Survey","Modal","getTaskGroup","getTask","sendResult","resetAlertCount","getAlertCount","TASK_COUNT","customStyles","content","top","left","right","bottom","transform","maxHeight","maxWidth","overflowY","defaultThemeColors","StylesManager","ThemeColors","init","title","startSurveyText","firstPageIsStarted","pages","questions","type","html","name","isRequired","choices","value","text","hasNone","beginTask","taskId","taskGroup","localStorage","getItem","task","description","scenario","positiveUsabilityChoices","negativeUsabilityChoices","finishTask","questionArray","currentIndex","length","randomIndex","Math","floor","random","done","showQuestionNumbers","ParticipantSurvey","props","JSON","parse","isVisible","setIsVisible","setTaskId","isDone","setIsDone","onCompleteInit","result","demographics","age","data","gender","setItem","stringify","onCompleteBeginTask","events","onCompleteFinishTask","saveTaskResult","console","log","orderedResult","Object","keys","sort","reduce","obj","key","onCompleteDone","comment","applyTheme","survey","surveyJSON","onComplete","completeText","taskComplete","taskInProgress","surveyRender"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport * as Survey from 'survey-react';\nimport 'survey-react/survey.css';\nimport Modal from 'react-modal';\nimport { getTaskGroup, getTask } from '../tracking/utils/usabilityTasks';\nimport { sendResult } from '../tracking/utils/usabilityResult';\nimport { resetAlertCount, getAlertCount } from '../tracking/wrapper/alert';\n\nconst TASK_COUNT = 6;\n\nconst customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    transform: 'translate(-50%, -50%)',\n    maxHeight: '90vh',\n    maxWidth: '90%',\n    overflowY: 'auto'\n  }\n};\n\nvar defaultThemeColors = Survey.StylesManager.ThemeColors['default'];\ndefaultThemeColors['$main-color'] = '#00acc1 !important';\ndefaultThemeColors['$body-container-background-color'] = '#f0f9fa !important';\n\nconst init = {\n  title: `Welcome to Money Tracker Usability Study`,\n  startSurveyText: 'Begin',\n  firstPageIsStarted: true,\n  pages: [\n    {\n      questions: [\n        {\n          type: 'html',\n          html: `\n            You are going to participate in a usability study for Money Tracker application.\n            We are studying how machine learning can be leveraged to infer the usability of \n            an application. You can help us by participating in a usability testing activity.\n            It will take only a few minutes. \n            <br/><br/>\n            You will be using an app meant for managing your daily expenses. You will go through the activity by performing ${TASK_COUNT} tasks. After all the tasks, you will take a short survey.\n            <br/><br/>\n            Please click on <b>Begin</b> button when you are ready.\n            `\n        }\n      ]\n    },\n    {\n      questions: [\n        {\n          name: 'gender',\n          type: 'radiogroup',\n          title: 'Please select your gender:',\n          isRequired: true,\n          choices: [\n            {\n              value: 'M',\n              text: 'Male'\n            },\n            {\n              value: 'F',\n              text: 'Female'\n            },\n            {\n              value: 'NB',\n              text: 'Non-binary'\n            },\n            {\n              value: 'NA',\n              text: 'Prefer not to disclose'\n            }\n          ]\n        },\n        {\n          name: 'age',\n          type: 'radiogroup',\n          title: 'Please select your age group:',\n          isRequired: true,\n          choices: [\n            {\n              value: 0,\n              text: 'Under 18'\n            },\n            {\n              value: 18,\n              text: '18 to 24'\n            },\n            {\n              value: 25,\n              text: '25 to 39'\n            },\n            {\n              value: 40,\n              text: '40 to 59'\n            },\n            {\n              value: 60,\n              text: 'Over 60'\n            }\n          ]\n        },\n        {\n          name: 'consent',\n          type: 'checkbox',\n          title:\n            'Participation in this usability study is voluntary. All information will \\\n                  remain strictly confidential. Interactions made with the application \\\n                  during the test will be recorded. However, at no time will your name or \\\n                  any other identification be used.',\n          isRequired: true,\n          hasNone: false,\n          choices: ['I have read and understood the above information.']\n        }\n      ]\n    }\n  ]\n};\n\nconst beginTask = taskId => {\n  const taskGroup = localStorage.getItem('taskGroup');\n  const task = getTask(taskGroup, taskId);\n  return {\n    title: `Task ${taskId} out of ${TASK_COUNT}`,\n    description: `${task.title}`,\n    questions: [\n      {\n        type: 'html',\n        html: `\n          You are about begin task ${taskId} of the usability study.\n          <br/><br/>\n          <u>Scenario:</u> ${task.scenario}\n          <br/><br/>\n          <u>Task:</u> ${task.description}\n          <br/><br/>\n          Please click on <b>Begin Task</b> to start the task, and click on <b>Finish Task</b> button to end the task.\n          <br/><br/>\n          (If you want to view the task descriptions again during the test, click on <b>?</b> button.)\n        `\n      }\n    ]\n  };\n};\n\nconst positiveUsabilityChoices = [\n  {\n    value: 1,\n    text: 'Strongly Disagree'\n  },\n  {\n    value: 2,\n    text: 'Disagree'\n  },\n  {\n    value: 3,\n    text: 'Indifferent'\n  },\n  {\n    value: 4,\n    text: 'Agree'\n  },\n  {\n    value: 5,\n    text: 'Strongly Agree'\n  }\n];\n\nconst negativeUsabilityChoices = [\n  {\n    value: 5,\n    text: 'Strongly Disagree'\n  },\n  {\n    value: 4,\n    text: 'Disagree'\n  },\n  {\n    value: 3,\n    text: 'Indifferent'\n  },\n  {\n    value: 2,\n    text: 'Agree'\n  },\n  {\n    value: 1,\n    text: 'Strongly Agree'\n  }\n];\n\nconst finishTask = () => {\n  const questionArray = [\n    {\n      type: 'dropdown',\n      name: 'satisfaction-positive',\n      title: 'I am satisfied with the system.',\n      choices: positiveUsabilityChoices,\n      isRequired: true\n    },\n    {\n      type: 'dropdown',\n      name: 'satisfaction-negative',\n      title: 'I found the system unpleasant to use.',\n      choices: negativeUsabilityChoices,\n      isRequired: true\n    },\n    {\n      type: 'dropdown',\n      name: 'effectiveness-1-positive',\n      title: 'I was able to use the system successfully.',\n      choices: positiveUsabilityChoices,\n      isRequired: true\n    },\n    {\n      type: 'dropdown',\n      name: 'effectiveness-1-negative',\n      title: 'I found some tasks cumbersome to complete.',\n      choices: negativeUsabilityChoices,\n      isRequired: true\n    },\n    {\n      type: 'dropdown',\n      name: 'effectiveness-2-positive',\n      title: 'The system allowed me to complete the tasks accurately.',\n      choices: positiveUsabilityChoices,\n      isRequired: true\n    },\n    {\n      type: 'dropdown',\n      name: 'effectiveness-2-negative',\n      title: 'I wish the system had provided more instructions.',\n      choices: negativeUsabilityChoices,\n      isRequired: true\n    },\n    {\n      type: 'dropdown',\n      name: 'efficiency-1-positive',\n      title: 'I was able to complete the tasks quickly.',\n      choices: positiveUsabilityChoices,\n      isRequired: true\n    },\n    {\n      type: 'dropdown',\n      name: 'efficiency-1-negative',\n      title: 'I found some tasks unnecessary long.',\n      choices: negativeUsabilityChoices,\n      isRequired: true\n    },\n    {\n      type: 'dropdown',\n      name: 'efficiency-2-positive',\n      title:\n        'I was able to copmlete the tasks with a reasonable number of steps.',\n      choices: positiveUsabilityChoices,\n      isRequired: true\n    },\n    {\n      type: 'dropdown',\n      name: 'efficiency-2-negative',\n      title: 'I found the system unnecessarily complex.',\n      choices: negativeUsabilityChoices,\n      isRequired: true\n    },\n    {\n      type: 'dropdown',\n      name: 'learnability-positive',\n      title: 'It was easy to learn to use this system.',\n      choices: positiveUsabilityChoices,\n      isRequired: true\n    },\n    {\n      type: 'dropdown',\n      name: 'learnability-negative',\n      title:\n        'I wish the system would have provided more information to help me better understand the outcomes of my actions.',\n      choices: negativeUsabilityChoices,\n      isRequired: true\n    }\n  ];\n\n  let currentIndex = questionArray.length,\n    randomIndex;\n\n  while (currentIndex != 0) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    [questionArray[currentIndex], questionArray[randomIndex]] = [\n      questionArray[randomIndex],\n      questionArray[currentIndex]\n    ];\n  }\n\n  return {\n    title: `All Tasks`,\n    description: `Usability Survey Questions`,\n    questions: questionArray\n  };\n};\n\nconst done = {\n  title: 'Finishing Up',\n  description: 'Thank you for participating!',\n  showQuestionNumbers: 'off',\n  questions: [\n    {\n      name: 'comment',\n      type: 'comment',\n      title:\n        'Please provide any additional comments you would like to share. If you would \\\n              like to be contacted in the future with the study results, please leave \\\n              your e-mail address.'\n    }\n  ]\n};\nexport default function ParticipantSurvey(props) {\n  const [isVisible, setIsVisible] = useState(\n    JSON.parse(localStorage.getItem('taskComplete'))\n  );\n  const [taskId, setTaskId] = useState(\n    JSON.parse(localStorage.getItem('taskId'))\n  );\n  const [isDone, setIsDone] = useState(false);\n\n  function onCompleteInit(result) {\n    var demographics = {\n      age: result.data.age,\n      gender: result.data.gender\n    };\n\n    // Begin the usability test process, starting from task 1\n    localStorage.setItem('demographics', JSON.stringify(demographics));\n    localStorage.setItem('taskGroup', getTaskGroup());\n    localStorage.setItem('taskId', 1);\n    localStorage.setItem('taskComplete', false);\n    localStorage.setItem('taskInProgress', false);\n    setTaskId(1);\n  }\n\n  function onCompleteBeginTask(result) {\n    // Begin Task\n    localStorage.setItem('taskInProgress', true);\n\n    var events = [];\n    localStorage.setItem('events', JSON.stringify(events));\n\n    setIsVisible(false);\n  }\n\n  function onCompleteFinishTask(result) {\n    saveTaskResult(result);\n  }\n\n  function saveTaskResult(result) {\n    // Store collected events\n    var events = JSON.parse(localStorage.getItem('events'));\n    console.log(`task${taskId}_events`, JSON.stringify(events));\n    localStorage.setItem(`task${taskId}_events`, JSON.stringify(events));\n\n    // Reset events array\n    events = [];\n    localStorage.setItem('events', JSON.stringify(events));\n\n    // Store collected number of alerts\n    localStorage.setItem(`task${taskId}_alerts`, getAlertCount());\n\n    // Reset number of alerts\n    resetAlertCount();\n\n    if (result !== null) {\n      // Store collected survey results\n      const orderedResult = Object.keys(result.data)\n        .sort()\n        .reduce((obj, key) => {\n          obj[key] = result.data[key];\n          return obj;\n        }, {});\n\n      localStorage.setItem(`surveyResults`, JSON.stringify(orderedResult));\n    }\n    localStorage.setItem('taskInProgress', false);\n\n    if (taskId < TASK_COUNT) {\n      localStorage.setItem('taskId', taskId + 1);\n      localStorage.setItem('taskComplete', false);\n      setTaskId(taskId + 1);\n    } else {\n      setIsDone(true);\n    }\n  }\n\n  function onCompleteDone(result) {\n    var comment = result.data.comment ? result.data.comment : '';\n    localStorage.setItem('comment', comment);\n\n    sendResult();\n  }\n\n  Survey.StylesManager.applyTheme();\n\n  // select which survey screen to display based on the state'\n  var survey;\n  var surveyJSON, onComplete;\n  var completeText = 'Complete';\n  if (!localStorage.getItem('demographics')) {\n    surveyJSON = init;\n    onComplete = onCompleteInit;\n  } else {\n    let taskId = JSON.parse(localStorage.getItem('taskId'));\n    let taskComplete = JSON.parse(localStorage.getItem('taskComplete'));\n\n    if (taskComplete && taskId < TASK_COUNT) {\n      saveTaskResult(null);\n      taskId = JSON.parse(localStorage.getItem('taskId'));\n      taskComplete = JSON.parse(localStorage.getItem('taskComplete'));\n    }\n\n    if (isDone) {\n      surveyJSON = done;\n      onComplete = onCompleteDone;\n    } else if (taskComplete) {\n      surveyJSON = finishTask(taskId);\n      onComplete = onCompleteFinishTask;\n    } else {\n      surveyJSON = beginTask(taskId);\n      onComplete = onCompleteBeginTask;\n      completeText = 'Begin Task';\n    }\n  }\n\n  survey = (\n    <Survey.Survey\n      json={surveyJSON}\n      showCompletedPage={false}\n      onComplete={onComplete}\n      completeText={completeText}\n    />\n  );\n\n  useEffect(\n    () => {\n      const taskComplete = JSON.parse(localStorage.getItem('taskComplete'));\n      const taskInProgress = JSON.parse(localStorage.getItem('taskInProgress'));\n      if (taskInProgress && !taskComplete) {\n        setIsVisible(false);\n      } else {\n        setIsVisible(true);\n      }\n    },\n    [\n      localStorage.getItem('taskComplete'),\n      localStorage.getItem('taskInProgress')\n    ]\n  );\n\n  // render survey\n  var surveyRender = (\n    <Modal\n      isOpen={!localStorage.getItem('demographics') || isVisible}\n      style={customStyles}\n    >\n      {survey}\n    </Modal>\n  );\n\n  return <div>{surveyRender}</div>;\n}\n"]},"metadata":{},"sourceType":"module"}