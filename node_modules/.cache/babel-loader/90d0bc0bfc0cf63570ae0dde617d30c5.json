{"ast":null,"code":"import _toConsumableArray from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport Currency from 'entities/Currency';\nimport { TransationKindT } from 'entities/Transaction';\nexport default function ExpenseTagsData(report, transactions, exchangeRate, base) {\n  var data = new Map();\n  var excluded = new Set(report.excludeTags);\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = transactions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var tx = _step.value;\n\n      if (tx.kind !== TransationKindT.Expense || !tx.tags || tx.tags.find(function (tag) {\n        return excluded.has(tag);\n      })) {\n        continue;\n      }\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = tx.tags[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var tag = _step2.value;\n          var tagAmount = data.get(tag) || 0;\n          var amount = Currency.convert(Math.abs(tx.amount), exchangeRate[tx.currency], base, tx.currency);\n          data.set(tag, tagAmount + amount);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  var sorted = new Map(_toConsumableArray(data.entries()).sort(function (a, b) {\n    return b[1] - a[1];\n  }));\n  return {\n    labels: _toConsumableArray(sorted.keys()),\n    series: [_toConsumableArray(sorted.values()).map(function (amount) {\n      return Math.floor(Currency.centsToNumber(amount, base));\n    })]\n  };\n}","map":{"version":3,"sources":["/Users/amipatel/Desktop/money-tracker/src/entities/Report/ExpenseTagsData.ts"],"names":["Currency","TransationKindT","ExpenseTagsData","report","transactions","exchangeRate","base","data","Map","excluded","Set","excludeTags","tx","kind","Expense","tags","find","tag","has","tagAmount","get","amount","convert","Math","abs","currency","set","sorted","entries","sort","a","b","labels","keys","series","values","map","floor","centsToNumber"],"mappings":";AAAA,OAAOA,QAAP,MAAwC,mBAAxC;AACA,SAA4BC,eAA5B,QAAmD,sBAAnD;AAGA,eAAe,SAASC,eAAT,CACbC,MADa,EAEbC,YAFa,EAGbC,YAHa,EAIbC,IAJa,EAKA;AACb,MAAMC,IAAI,GAAG,IAAIC,GAAJ,EAAb;AACA,MAAMC,QAAQ,GAAG,IAAIC,GAAJ,CAAQP,MAAM,CAACQ,WAAf,CAAjB;AAFa;AAAA;AAAA;;AAAA;AAIb,yBAAiBP,YAAjB,8HAA+B;AAAA,UAApBQ,EAAoB;;AAC7B,UACEA,EAAE,CAACC,IAAH,KAAYZ,eAAe,CAACa,OAA5B,IACA,CAACF,EAAE,CAACG,IADJ,IAEAH,EAAE,CAACG,IAAH,CAAQC,IAAR,CAAa,UAAAC,GAAG;AAAA,eAAIR,QAAQ,CAACS,GAAT,CAAaD,GAAb,CAAJ;AAAA,OAAhB,CAHF,EAIE;AACA;AACD;;AAP4B;AAAA;AAAA;;AAAA;AAQ7B,8BAAkBL,EAAE,CAACG,IAArB,mIAA2B;AAAA,cAAhBE,GAAgB;AACzB,cAAME,SAAS,GAAGZ,IAAI,CAACa,GAAL,CAASH,GAAT,KAAiB,CAAnC;AACA,cAAMI,MAAM,GAAGrB,QAAQ,CAACsB,OAAT,CACbC,IAAI,CAACC,GAAL,CAASZ,EAAE,CAACS,MAAZ,CADa,EAEbhB,YAAY,CAACO,EAAE,CAACa,QAAJ,CAFC,EAGbnB,IAHa,EAIbM,EAAE,CAACa,QAJU,CAAf;AAMAlB,UAAAA,IAAI,CAACmB,GAAL,CAAST,GAAT,EAAcE,SAAS,GAAGE,MAA1B;AACD;AAjB4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkB9B;AAtBY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAwBb,MAAMM,MAAM,GAAG,IAAInB,GAAJ,CAAQ,mBAAID,IAAI,CAACqB,OAAL,EAAJ,EAAoBC,IAApB,CAAyB,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUA,CAAC,CAAC,CAAD,CAAD,GAAOD,CAAC,CAAC,CAAD,CAAlB;AAAA,GAAzB,CAAR,CAAf;AAEA,SAAO;AACLE,IAAAA,MAAM,qBAAML,MAAM,CAACM,IAAP,EAAN,CADD;AAELC,IAAAA,MAAM,EAAE,CACN,mBAAIP,MAAM,CAACQ,MAAP,EAAJ,EAAqBC,GAArB,CAAyB,UAAAf,MAAM;AAAA,aAC7BE,IAAI,CAACc,KAAL,CAAWrC,QAAQ,CAACsC,aAAT,CAAuBjB,MAAvB,EAA+Bf,IAA/B,CAAX,CAD6B;AAAA,KAA/B,CADM;AAFH,GAAP;AAQD","sourcesContent":["import Currency, { ExchangeRateT } from 'entities/Currency';\nimport { TransactionStateT, TransationKindT } from 'entities/Transaction';\nimport { ReportDataT, ReportStateT } from 'entities/Report';\n\nexport default function ExpenseTagsData(\n  report: ReportStateT,\n  transactions: TransactionStateT[],\n  exchangeRate: ExchangeRateT,\n  base: string\n): ReportDataT {\n  const data = new Map();\n  const excluded = new Set(report.excludeTags);\n\n  for (const tx of transactions) {\n    if (\n      tx.kind !== TransationKindT.Expense ||\n      !tx.tags ||\n      tx.tags.find(tag => excluded.has(tag))\n    ) {\n      continue;\n    }\n    for (const tag of tx.tags) {\n      const tagAmount = data.get(tag) || 0;\n      const amount = Currency.convert(\n        Math.abs(tx.amount),\n        exchangeRate[tx.currency],\n        base,\n        tx.currency\n      );\n      data.set(tag, tagAmount + amount);\n    }\n  }\n\n  const sorted = new Map([...data.entries()].sort((a, b) => b[1] - a[1]));\n\n  return {\n    labels: [...sorted.keys()],\n    series: [\n      [...sorted.values()].map(amount =>\n        Math.floor(Currency.centsToNumber(amount, base))\n      )\n    ]\n  };\n}\n"]},"metadata":{},"sourceType":"module"}