{"ast":null,"code":"import _objectSpread from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { createSelector } from 'reselect';\nimport { getBaseCurrency, getExchangeRate } from '../settings';\nimport { getGroupName } from '../../entities/Account';\nimport Currency from '../../entities/Currency';\nimport EntityMap from '../../entities/EntityMap';\nimport sortByName from '../../util/sortByName';\nexport var getAccountsMap = function getAccountsMap(state) {\n  return state.entities.accounts;\n};\nexport var getAccount = function getAccount(id) {\n  return createSelector(getAccountsMap, function (accounts) {\n    return EntityMap.get(accounts, id);\n  });\n};\nexport var getAccountByName = function getAccountByName(name) {\n  return createSelector(getAccountsList, function (accounts) {\n    return accounts.find(function (account) {\n      return account.name === name;\n    });\n  });\n};\nexport var getAccountsList = function getAccountsList(state) {\n  return EntityMap.map(state.entities.accounts, function (account) {\n    return _objectSpread({}, account);\n  }).sort(sortByName);\n};\nexport var getVisibleAccountsList = createSelector(getAccountsList, function (accounts) {\n  return accounts.filter(function (account) {\n    return !account.archived;\n  });\n});\nexport var getDashboardAccountsList = createSelector(getVisibleAccountsList, function (accounts) {\n  return accounts.filter(function (account) {\n    return account.on_dashboard;\n  });\n});\nexport var getAccountsNameMap = createSelector(getAccountsList, function (accounts) {\n  return accounts.reduce(function (acc, account) {\n    acc[account.id] = account.name;\n    return acc;\n  }, {});\n});\nexport var getAccountsCurrencyMap = createSelector(getAccountsList, function (accounts) {\n  return accounts.reduce(function (acc, account) {\n    acc[account.id] = account.currencies;\n    return acc;\n  }, {});\n});\nexport var getAccountsCurrencyList = createSelector(getAccountsList, function (accounts) {\n  return accounts.reduce(function (currencies, account) {\n    return currencies.concat(account.currencies.filter(function (code) {\n      return !currencies.includes(code);\n    }));\n  }, []);\n});\n\nvar groupAccounts = function groupAccounts(accounts, base, rate) {\n  var grouped = accounts.reduce(function (grouped, account) {\n    var group = account.group;\n\n    if (!grouped[group]) {\n      grouped[group] = {\n        name: getGroupName(group),\n        accounts: [],\n        total: 0\n      };\n    }\n\n    grouped[group].accounts.push(account);\n    grouped[group].total += getBaseTotal(account, base, rate);\n    return grouped;\n  }, {});\n\n  var _arr = Object.keys(grouped);\n\n  for (var _i = 0; _i < _arr.length; _i++) {\n    var group = _arr[_i];\n    grouped[group].accounts.sort(sortByName);\n  }\n\n  return grouped;\n};\n\nexport var getVisibleGroupedAccounts = createSelector(getVisibleAccountsList, getBaseCurrency, getExchangeRate, groupAccounts);\nexport var getDashboardGroupedAccounts = createSelector(getDashboardAccountsList, getBaseCurrency, getExchangeRate, groupAccounts);\nexport var getGroupedAccounts = createSelector(getAccountsList, getBaseCurrency, getExchangeRate, groupAccounts);\nexport var getAccountsAsOptions = createSelector(getVisibleGroupedAccounts, function (groups) {\n  var options = [];\n\n  var _arr2 = Object.keys(groups);\n\n  for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n    var group = _arr2[_i2];\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = groups[group].accounts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var account = _step.value;\n        options.push({\n          key: account.id,\n          value: account.id,\n          text: account.name,\n          description: getGroupName(group)\n        });\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n\n  return options;\n});\nexport var getNetWorth = createSelector(getAccountsList, getBaseCurrency, getExchangeRate, function (accounts, base, rate) {\n  return accounts.reduce(function (netWorth, account) {\n    return netWorth + getBaseTotal(account, base, rate);\n  }, 0);\n});\n\nvar getBaseTotal = function getBaseTotal(account, base, rate) {\n  return account.currencies.reduce(function (total, code) {\n    return Math.floor(total + Currency.convert(account.balance[code], rate[code], base, code));\n  }, 0);\n};","map":{"version":3,"sources":["/Users/amipatel/Desktop/money-tracker/src/selectors/entities/accounts.js"],"names":["createSelector","getBaseCurrency","getExchangeRate","getGroupName","Currency","EntityMap","sortByName","getAccountsMap","state","entities","accounts","getAccount","id","get","getAccountByName","name","getAccountsList","find","account","map","sort","getVisibleAccountsList","filter","archived","getDashboardAccountsList","on_dashboard","getAccountsNameMap","reduce","acc","getAccountsCurrencyMap","currencies","getAccountsCurrencyList","concat","code","includes","groupAccounts","base","rate","grouped","group","total","push","getBaseTotal","Object","keys","getVisibleGroupedAccounts","getDashboardGroupedAccounts","getGroupedAccounts","getAccountsAsOptions","groups","options","key","value","text","description","getNetWorth","netWorth","Math","floor","convert","balance"],"mappings":"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","sourcesContent":["import { createSelector } from 'reselect';\nimport { getBaseCurrency, getExchangeRate } from '../settings';\nimport { getGroupName } from '../../entities/Account';\nimport Currency from '../../entities/Currency';\nimport EntityMap from '../../entities/EntityMap';\nimport sortByName from '../../util/sortByName';\n\nexport const getAccountsMap = state => state.entities.accounts;\n\nexport const getAccount = id =>\n  createSelector(\n    getAccountsMap,\n    accounts => EntityMap.get(accounts, id)\n  );\n\nexport const getAccountByName = name =>\n  createSelector(\n    getAccountsList,\n    accounts => accounts.find(account => account.name === name)\n  );\n\nexport const getAccountsList = state =>\n  EntityMap.map(state.entities.accounts, account => ({ ...account })).sort(\n    sortByName\n  );\n\nexport const getVisibleAccountsList = createSelector(\n  getAccountsList,\n  accounts => accounts.filter(account => !account.archived)\n);\n\nexport const getDashboardAccountsList = createSelector(\n  getVisibleAccountsList,\n  accounts => accounts.filter(account => account.on_dashboard)\n);\n\nexport const getAccountsNameMap = createSelector(\n  getAccountsList,\n  accounts =>\n    accounts.reduce((acc, account) => {\n      acc[account.id] = account.name;\n      return acc;\n    }, {})\n);\n\nexport const getAccountsCurrencyMap = createSelector(\n  getAccountsList,\n  accounts =>\n    accounts.reduce((acc, account) => {\n      acc[account.id] = account.currencies;\n      return acc;\n    }, {})\n);\n\nexport const getAccountsCurrencyList = createSelector(\n  getAccountsList,\n  accounts =>\n    accounts.reduce(\n      (currencies, account) =>\n        currencies.concat(\n          account.currencies.filter(code => !currencies.includes(code))\n        ),\n      []\n    )\n);\n\nconst groupAccounts = (accounts, base, rate) => {\n  const grouped = accounts.reduce((grouped, account) => {\n    const group = account.group;\n    if (!grouped[group]) {\n      grouped[group] = {\n        name: getGroupName(group),\n        accounts: [],\n        total: 0\n      };\n    }\n\n    grouped[group].accounts.push(account);\n    grouped[group].total += getBaseTotal(account, base, rate);\n\n    return grouped;\n  }, {});\n\n  for (const group of Object.keys(grouped)) {\n    grouped[group].accounts.sort(sortByName);\n  }\n\n  return grouped;\n};\n\nexport const getVisibleGroupedAccounts = createSelector(\n  getVisibleAccountsList,\n  getBaseCurrency,\n  getExchangeRate,\n  groupAccounts\n);\n\nexport const getDashboardGroupedAccounts = createSelector(\n  getDashboardAccountsList,\n  getBaseCurrency,\n  getExchangeRate,\n  groupAccounts\n);\n\nexport const getGroupedAccounts = createSelector(\n  getAccountsList,\n  getBaseCurrency,\n  getExchangeRate,\n  groupAccounts\n);\n\nexport const getAccountsAsOptions = createSelector(\n  getVisibleGroupedAccounts,\n  groups => {\n    const options = [];\n    for (const group of Object.keys(groups)) {\n      for (const account of groups[group].accounts) {\n        options.push({\n          key: account.id,\n          value: account.id,\n          text: account.name,\n          description: getGroupName(group)\n        });\n      }\n    }\n    return options;\n  }\n);\n\nexport const getNetWorth = createSelector(\n  getAccountsList,\n  getBaseCurrency,\n  getExchangeRate,\n  (accounts, base, rate) =>\n    accounts.reduce(\n      (netWorth, account) => netWorth + getBaseTotal(account, base, rate),\n      0\n    )\n);\n\nconst getBaseTotal = (account, base, rate) =>\n  account.currencies.reduce(\n    (total, code) =>\n      Math.floor(\n        total + Currency.convert(account.balance[code], rate[code], base, code)\n      ),\n    0\n  );\n"]},"metadata":{},"sourceType":"module"}