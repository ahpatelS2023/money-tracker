{"ast":null,"code":"import _objectSpread from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadAccountsSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(saveAccountSaga),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(updateAccountBalanceSaga),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(removeAccountSaga),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(deleteStrategyArchive),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(deleteStrategyCleanup),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(deleteStrategyMove);\n\nimport { takeLatest, call, put, select } from 'redux-saga/effects';\nimport { loadAccounts, loadAccountsSuccess, saveAccount, saveAccountSuccess, saveAccountFailure, updateAccount, removeAccount, removeAccountStart, removeAccountItemProcessed, removeAccountFailure, removeAccountSuccess } from '../actions/entities/accounts';\nimport { getForm } from '../selectors/ui/form/transaction';\nimport { resetTransactionFormSaga, removeTransactionSaga, saveTransactionSaga } from './transactions';\nimport { removeTransaction, saveTransaction } from '../actions/entities/transactions';\nimport AccountsStorage from '../util/storage/accounts';\nimport TransactionsStorage from '../util/storage/transactions';\nimport { DeleteStrategyT } from '../entities/Account';\nexport function loadAccountsSaga() {\n  var accounts, transactionForm;\n  return _regeneratorRuntime.wrap(function loadAccountsSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return call(AccountsStorage.loadAll);\n\n        case 2:\n          accounts = _context.sent;\n          _context.next = 5;\n          return put(loadAccountsSuccess(accounts));\n\n        case 5:\n          _context.next = 7;\n          return select(getForm);\n\n        case 7:\n          transactionForm = _context.sent;\n\n          if (!(!transactionForm.accountId && accounts.length > 0)) {\n            _context.next = 11;\n            break;\n          }\n\n          _context.next = 11;\n          return resetTransactionFormSaga();\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this);\n}\nexport function saveAccountSaga(action) {\n  var account;\n  return _regeneratorRuntime.wrap(function saveAccountSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          account = action.payload;\n          _context2.prev = 1;\n          _context2.next = 4;\n          return call(AccountsStorage.save, account);\n\n        case 4:\n          _context2.next = 6;\n          return resetTransactionFormSaga();\n\n        case 6:\n          _context2.next = 8;\n          return put(saveAccountSuccess());\n\n        case 8:\n          _context2.next = 14;\n          break;\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](1);\n          _context2.next = 14;\n          return put(saveAccountFailure(account.id));\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this, [[1, 10]]);\n}\nexport function updateAccountBalanceSaga(mutation) {\n  var account;\n  return _regeneratorRuntime.wrap(function updateAccountBalanceSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return call(AccountsStorage.mutateBalance, mutation);\n\n        case 2:\n          account = _context3.sent;\n          _context3.next = 5;\n          return put(updateAccount(account));\n\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, this);\n}\nexport function removeAccountSaga(_ref) {\n  var payload, _deleteStrategies, deleteStrategies, strategy;\n\n  return _regeneratorRuntime.wrap(function removeAccountSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          payload = _ref.payload;\n          _context4.prev = 1;\n          deleteStrategies = (_deleteStrategies = {}, _defineProperty(_deleteStrategies, DeleteStrategyT.Archive, deleteStrategyArchive), _defineProperty(_deleteStrategies, DeleteStrategyT.Cleanup, deleteStrategyCleanup), _defineProperty(_deleteStrategies, DeleteStrategyT.Move, deleteStrategyMove), _deleteStrategies);\n          strategy = deleteStrategies[payload.strategy];\n\n          if (!strategy) {\n            _context4.next = 7;\n            break;\n          }\n\n          _context4.next = 7;\n          return strategy(payload.id, payload.moveTo);\n\n        case 7:\n          _context4.next = 13;\n          break;\n\n        case 9:\n          _context4.prev = 9;\n          _context4.t0 = _context4[\"catch\"](1);\n          _context4.next = 13;\n          return put(removeAccountFailure(_context4.t0.message));\n\n        case 13:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, this, [[1, 9]]);\n}\n\nfunction deleteStrategyArchive(accountId) {\n  return _regeneratorRuntime.wrap(function deleteStrategyArchive$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return call(AccountsStorage.archive, accountId);\n\n        case 2:\n          _context5.next = 4;\n          return put(removeAccountSuccess(accountId));\n\n        case 4:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, this);\n}\n\nfunction deleteStrategyCleanup(accountId) {\n  var transactions, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _ref4, _ref3, index, tx;\n\n  return _regeneratorRuntime.wrap(function deleteStrategyCleanup$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return call(TransactionsStorage.loadFiltered, {\n            accounts: [accountId]\n          });\n\n        case 2:\n          transactions = _context6.sent;\n\n          if (!(transactions.length > 0)) {\n            _context6.next = 37;\n            break;\n          }\n\n          _context6.next = 6;\n          return put(removeAccountStart(transactions.length));\n\n        case 6:\n          _iteratorNormalCompletion = true;\n          _didIteratorError = false;\n          _iteratorError = undefined;\n          _context6.prev = 9;\n          _iterator = transactions.entries()[Symbol.iterator]();\n\n        case 11:\n          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n            _context6.next = 23;\n            break;\n          }\n\n          _ref4 = _step.value;\n          _ref3 = _slicedToArray(_ref4, 2);\n          index = _ref3[0];\n          tx = _ref3[1];\n          _context6.next = 18;\n          return removeTransactionSaga(removeTransaction(tx.id));\n\n        case 18:\n          _context6.next = 20;\n          return put(removeAccountItemProcessed(index));\n\n        case 20:\n          _iteratorNormalCompletion = true;\n          _context6.next = 11;\n          break;\n\n        case 23:\n          _context6.next = 29;\n          break;\n\n        case 25:\n          _context6.prev = 25;\n          _context6.t0 = _context6[\"catch\"](9);\n          _didIteratorError = true;\n          _iteratorError = _context6.t0;\n\n        case 29:\n          _context6.prev = 29;\n          _context6.prev = 30;\n\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n\n        case 32:\n          _context6.prev = 32;\n\n          if (!_didIteratorError) {\n            _context6.next = 35;\n            break;\n          }\n\n          throw _iteratorError;\n\n        case 35:\n          return _context6.finish(32);\n\n        case 36:\n          return _context6.finish(29);\n\n        case 37:\n          _context6.next = 39;\n          return call(AccountsStorage.remove, accountId);\n\n        case 39:\n          _context6.next = 41;\n          return put(removeAccountSuccess(accountId));\n\n        case 41:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, this, [[9, 25, 29, 37], [30,, 32, 36]]);\n}\n\nfunction deleteStrategyMove(accountId, moveTo) {\n  var transactions, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _ref7, _ref6, index, tx;\n\n  return _regeneratorRuntime.wrap(function deleteStrategyMove$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return call(TransactionsStorage.loadFiltered, {\n            accounts: [accountId]\n          });\n\n        case 2:\n          transactions = _context7.sent;\n\n          if (!(transactions.length > 0)) {\n            _context7.next = 37;\n            break;\n          }\n\n          _context7.next = 6;\n          return put(removeAccountStart(transactions.length));\n\n        case 6:\n          _iteratorNormalCompletion2 = true;\n          _didIteratorError2 = false;\n          _iteratorError2 = undefined;\n          _context7.prev = 9;\n          _iterator2 = transactions.entries()[Symbol.iterator]();\n\n        case 11:\n          if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {\n            _context7.next = 23;\n            break;\n          }\n\n          _ref7 = _step2.value;\n          _ref6 = _slicedToArray(_ref7, 2);\n          index = _ref6[0];\n          tx = _ref6[1];\n          _context7.next = 18;\n          return saveTransactionSaga(saveTransaction(_objectSpread({}, tx, {\n            accountId: tx.accountId === accountId ? moveTo : tx.accountId,\n            linkedAccountId: tx.linkedAccountId === accountId ? moveTo : tx.linkedAccountId\n          })));\n\n        case 18:\n          _context7.next = 20;\n          return put(removeAccountItemProcessed(index));\n\n        case 20:\n          _iteratorNormalCompletion2 = true;\n          _context7.next = 11;\n          break;\n\n        case 23:\n          _context7.next = 29;\n          break;\n\n        case 25:\n          _context7.prev = 25;\n          _context7.t0 = _context7[\"catch\"](9);\n          _didIteratorError2 = true;\n          _iteratorError2 = _context7.t0;\n\n        case 29:\n          _context7.prev = 29;\n          _context7.prev = 30;\n\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n\n        case 32:\n          _context7.prev = 32;\n\n          if (!_didIteratorError2) {\n            _context7.next = 35;\n            break;\n          }\n\n          throw _iteratorError2;\n\n        case 35:\n          return _context7.finish(32);\n\n        case 36:\n          return _context7.finish(29);\n\n        case 37:\n          _context7.next = 39;\n          return call(AccountsStorage.remove, accountId);\n\n        case 39:\n          _context7.next = 41;\n          return put(removeAccountSuccess(accountId));\n\n        case 41:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, this, [[9, 25, 29, 37], [30,, 32, 36]]);\n}\n\nexport default [takeLatest(loadAccounts, loadAccountsSaga), takeLatest(saveAccount, saveAccountSaga), takeLatest(removeAccount, removeAccountSaga), takeLatest(removeAccountSuccess, resetTransactionFormSaga)];","map":{"version":3,"sources":["/Users/amipatel/Desktop/money-tracker/src/sagas/accounts.js"],"names":["loadAccountsSaga","saveAccountSaga","updateAccountBalanceSaga","removeAccountSaga","deleteStrategyArchive","deleteStrategyCleanup","deleteStrategyMove","takeLatest","call","put","select","loadAccounts","loadAccountsSuccess","saveAccount","saveAccountSuccess","saveAccountFailure","updateAccount","removeAccount","removeAccountStart","removeAccountItemProcessed","removeAccountFailure","removeAccountSuccess","getForm","resetTransactionFormSaga","removeTransactionSaga","saveTransactionSaga","removeTransaction","saveTransaction","AccountsStorage","TransactionsStorage","DeleteStrategyT","loadAll","accounts","transactionForm","accountId","length","action","account","payload","save","id","mutation","mutateBalance","deleteStrategies","Archive","Cleanup","Move","strategy","moveTo","message","archive","loadFiltered","transactions","entries","index","tx","remove","linkedAccountId"],"mappings":"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","sourcesContent":["import { takeLatest, call, put, select } from 'redux-saga/effects';\nimport {\n  loadAccounts,\n  loadAccountsSuccess,\n  saveAccount,\n  saveAccountSuccess,\n  saveAccountFailure,\n  updateAccount,\n  removeAccount,\n  removeAccountStart,\n  removeAccountItemProcessed,\n  removeAccountFailure,\n  removeAccountSuccess\n} from '../actions/entities/accounts';\nimport { getForm } from '../selectors/ui/form/transaction';\nimport {\n  resetTransactionFormSaga,\n  removeTransactionSaga,\n  saveTransactionSaga\n} from './transactions';\nimport {\n  removeTransaction,\n  saveTransaction\n} from '../actions/entities/transactions';\nimport AccountsStorage from '../util/storage/accounts';\nimport TransactionsStorage from '../util/storage/transactions';\nimport { DeleteStrategyT } from '../entities/Account';\n\nexport function* loadAccountsSaga() {\n  const accounts = yield call(AccountsStorage.loadAll);\n  yield put(loadAccountsSuccess(accounts));\n  const transactionForm = yield select(getForm);\n  if (!transactionForm.accountId && accounts.length > 0) {\n    yield resetTransactionFormSaga();\n  }\n}\n\nexport function* saveAccountSaga(action) {\n  const account = action.payload;\n  try {\n    yield call(AccountsStorage.save, account);\n    yield resetTransactionFormSaga();\n    yield put(saveAccountSuccess());\n  } catch (error) {\n    yield put(saveAccountFailure(account.id));\n  }\n}\n\nexport function* updateAccountBalanceSaga(mutation) {\n  const account = yield call(AccountsStorage.mutateBalance, mutation);\n  yield put(updateAccount(account));\n}\n\nexport function* removeAccountSaga({ payload }) {\n  try {\n    const deleteStrategies = {\n      [DeleteStrategyT.Archive]: deleteStrategyArchive,\n      [DeleteStrategyT.Cleanup]: deleteStrategyCleanup,\n      [DeleteStrategyT.Move]: deleteStrategyMove\n    };\n    const strategy = deleteStrategies[payload.strategy];\n    if (strategy) yield strategy(payload.id, payload.moveTo);\n  } catch (error) {\n    yield put(removeAccountFailure(error.message));\n  }\n}\n\nfunction* deleteStrategyArchive(accountId) {\n  yield call(AccountsStorage.archive, accountId);\n  yield put(removeAccountSuccess(accountId));\n}\n\nfunction* deleteStrategyCleanup(accountId) {\n  const transactions = yield call(TransactionsStorage.loadFiltered, {\n    accounts: [accountId]\n  });\n  if (transactions.length > 0) {\n    yield put(removeAccountStart(transactions.length));\n\n    for (const [index, tx] of transactions.entries()) {\n      yield removeTransactionSaga(removeTransaction(tx.id));\n      yield put(removeAccountItemProcessed(index));\n    }\n  }\n\n  yield call(AccountsStorage.remove, accountId);\n  yield put(removeAccountSuccess(accountId));\n}\n\nfunction* deleteStrategyMove(accountId, moveTo) {\n  const transactions = yield call(TransactionsStorage.loadFiltered, {\n    accounts: [accountId]\n  });\n  if (transactions.length > 0) {\n    yield put(removeAccountStart(transactions.length));\n\n    for (const [index, tx] of transactions.entries()) {\n      yield saveTransactionSaga(\n        saveTransaction({\n          ...tx,\n          accountId: tx.accountId === accountId ? moveTo : tx.accountId,\n          linkedAccountId:\n            tx.linkedAccountId === accountId ? moveTo : tx.linkedAccountId\n        })\n      );\n      yield put(removeAccountItemProcessed(index));\n    }\n  }\n\n  yield call(AccountsStorage.remove, accountId);\n  yield put(removeAccountSuccess(accountId));\n}\n\nexport default [\n  takeLatest(loadAccounts, loadAccountsSaga),\n  takeLatest(saveAccount, saveAccountSaga),\n  takeLatest(removeAccount, removeAccountSaga),\n  takeLatest(removeAccountSuccess, resetTransactionFormSaga)\n];\n"]},"metadata":{},"sourceType":"module"}