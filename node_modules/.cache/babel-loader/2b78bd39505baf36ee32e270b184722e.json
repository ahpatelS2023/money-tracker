{"ast":null,"code":"import _defineProperty from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\nvar _jsxFileName = \"/Users/amipatel/Desktop/money-tracker/src/components/Transaction/Form/index.js\",\n    _PropTypes$shape;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Button, Dropdown, Input, Segment } from 'semantic-ui-react';\nimport { TransationKindT, getKindLabel, formToState } from 'entities/Transaction';\nimport { DropdownOption } from 'components/types';\nimport Header from './Header';\nimport Account from './Account';\nimport './index.css';\nvar Expense = TransationKindT.Expense,\n    Transfer = TransationKindT.Transfer,\n    Income = TransationKindT.Income;\n\nvar NoAccounts = function NoAccounts() {\n  return React.createElement(\"div\", {\n    className: \"transactions-form__empty\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, \"You don't have any accounts.\");\n};\n\nvar TransactionForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TransactionForm, _React$Component);\n\n  function TransactionForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TransactionForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TransactionForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      searchQuery: ''\n    };\n\n    _this.onSubmit = function (event) {\n      event.preventDefault();\n\n      _this.props.saveTransaction(formToState(_this.props.form));\n    };\n\n    _this.onChange = function (handler) {\n      return function (_, _ref) {\n        var value = _ref.value;\n        return handler(value);\n      };\n    };\n\n    _this.onAccountChange = function (handler) {\n      return function (_, _ref2) {\n        var value = _ref2.value;\n        handler({\n          accountId: value,\n          currency: _this.props.accountCurrency[value]\n        });\n      };\n    };\n\n    _this.onTagAdd = function (_, _ref3) {\n      var value = _ref3.value;\n\n      _this.props.addTag({\n        kind: _this.props.form.kind,\n        tag: value\n      });\n    };\n\n    _this.onTagSearchChange = function (_, _ref4) {\n      var searchQuery = _ref4.searchQuery;\n      return _this.setState({\n        searchQuery: searchQuery\n      });\n    };\n\n    _this.onTagClose = function () {\n      return _this.setState({\n        searchQuery: ''\n      });\n    };\n\n    _this.getCurrencyOptions = function (accountId) {\n      return _this.props.accountCurrency[accountId].map(function (code) {\n        return {\n          key: code,\n          value: code,\n          text: code\n        };\n      });\n    };\n\n    _this.getGridClassName = function () {\n      return _this.props.form.kind === Transfer ? 'transaction-form-grid single-line' : 'transaction-form-grid';\n    };\n\n    return _this;\n  }\n\n  _createClass(TransactionForm, [{\n    key: \"render\",\n    value: function render() {\n      if (!this.props.form.accountId) return React.createElement(NoAccounts, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      });\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(Header, {\n        withTransfer: !!this.props.form.linkedAccountId,\n        activeKind: this.props.form.kind,\n        changeKind: this.props.changeKind,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }), React.createElement(Segment, {\n        attached: \"bottom\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmit,\n        className: \"transaction-form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(Account, {\n        label: this.props.form.kind === Income ? 'To' : 'From',\n        accountId: this.props.form.accountId,\n        amount: this.props.form.amount,\n        currency: this.props.form.currency,\n        accountOptions: this.props.accountOptions,\n        currencyOptions: this.getCurrencyOptions(this.props.form.accountId),\n        onAccountChange: this.onAccountChange(this.props.changeAccount),\n        onAmountChange: this.onChange(this.props.changeAmount),\n        onCurrencyChange: this.onChange(this.props.changeCurrency),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }), this.props.form.kind === Transfer && React.createElement(Account, {\n        label: \"To\",\n        accountId: this.props.form.linkedAccountId,\n        amount: this.props.form.linkedAmount,\n        currency: this.props.form.linkedCurrency,\n        accountOptions: this.props.accountOptions,\n        currencyOptions: this.getCurrencyOptions(this.props.form.linkedAccountId),\n        onAccountChange: this.onAccountChange(this.props.changeLinkedAccount),\n        onAmountChange: this.onChange(this.props.changeLinkedAmount),\n        onCurrencyChange: this.onChange(this.props.changeLinkedCurrency),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: this.getGridClassName(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"transaction-form-grid__column-wide\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, this.props.form.kind !== Transfer && React.createElement(\"div\", {\n        className: \"transaction-form-grid__field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(Form.Field, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"Tags\"), React.createElement(Dropdown, {\n        multiple: true,\n        selection: true,\n        search: true,\n        allowAdditions: true,\n        closeOnChange: true,\n        placeholder: \"Choose existing tags or add new\",\n        value: this.props.form.tags[this.props.form.kind],\n        options: this.props.tagsOptions,\n        onChange: this.onChange(this.props.changeTags),\n        onAddItem: this.onTagAdd,\n        onClose: this.onTagClose,\n        onSearchChange: this.onTagSearchChange,\n        searchQuery: this.state.searchQuery,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"transaction-form-grid__field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(Form.Field, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(Input, {\n        placeholder: \"Note\",\n        value: this.props.form.note,\n        onChange: this.onChange(this.props.changeNote),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        className: \"transaction-form-grid__column-narrow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"transaction-form-grid__field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(Form.Field, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(Input, {\n        required: true,\n        fluid: true,\n        type: \"date\",\n        value: this.props.form.date,\n        onChange: this.onChange(this.props.changeDate),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"transaction-form-grid__field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(Button, {\n        primary: true,\n        fluid: true,\n        disabled: parseFloat(this.props.form.amount) === 0,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, this.props.form.id ? 'Save' : 'Add', ' ', getKindLabel(this.props.form.kind))))))));\n    }\n  }]);\n\n  return TransactionForm;\n}(React.Component);\n\nTransactionForm.propTypes = {\n  form: PropTypes.shape({\n    id: PropTypes.string,\n    kind: PropTypes.oneOf([Expense, Transfer, Income]),\n    accountId: PropTypes.string,\n    amount: PropTypes.string,\n    currency: PropTypes.string,\n    linkedAccountId: PropTypes.string,\n    linkedAmount: PropTypes.string,\n    linkedCurrency: PropTypes.string,\n    tags: PropTypes.shape((_PropTypes$shape = {}, _defineProperty(_PropTypes$shape, Expense, PropTypes.arrayOf(PropTypes.string)), _defineProperty(_PropTypes$shape, Income, PropTypes.arrayOf(PropTypes.string)), _PropTypes$shape)),\n    date: PropTypes.string,\n    note: PropTypes.string\n  }),\n  accountCurrency: PropTypes.object.isRequired,\n  accountOptions: PropTypes.arrayOf(DropdownOption).isRequired,\n  tagsOptions: PropTypes.arrayOf(DropdownOption),\n  changeKind: PropTypes.func.isRequired,\n  changeAccount: PropTypes.func.isRequired,\n  changeAmount: PropTypes.func.isRequired,\n  changeCurrency: PropTypes.func.isRequired,\n  changeLinkedAccount: PropTypes.func,\n  changeLinkedAmount: PropTypes.func,\n  changeLinkedCurrency: PropTypes.func,\n  addTag: PropTypes.func,\n  changeTags: PropTypes.func,\n  changeDate: PropTypes.func.isRequired,\n  changeNote: PropTypes.func.isRequired,\n  loadTags: PropTypes.func,\n  saveTransaction: PropTypes.func.isRequired\n};\nexport default TransactionForm;","map":{"version":3,"sources":["/Users/amipatel/Desktop/money-tracker/src/components/Transaction/Form/index.js"],"names":["React","PropTypes","Form","Button","Dropdown","Input","Segment","TransationKindT","getKindLabel","formToState","DropdownOption","Header","Account","Expense","Transfer","Income","NoAccounts","TransactionForm","state","searchQuery","onSubmit","event","preventDefault","props","saveTransaction","form","onChange","handler","_","value","onAccountChange","accountId","currency","accountCurrency","onTagAdd","addTag","kind","tag","onTagSearchChange","setState","onTagClose","getCurrencyOptions","map","code","key","text","getGridClassName","linkedAccountId","changeKind","amount","accountOptions","changeAccount","changeAmount","changeCurrency","linkedAmount","linkedCurrency","changeLinkedAccount","changeLinkedAmount","changeLinkedCurrency","tags","tagsOptions","changeTags","note","changeNote","date","changeDate","parseFloat","id","Component","propTypes","shape","string","oneOf","arrayOf","object","isRequired","func","loadTags"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Button, Dropdown, Input, Segment } from 'semantic-ui-react';\nimport {\n  TransationKindT,\n  getKindLabel,\n  formToState\n} from 'entities/Transaction';\nimport { DropdownOption } from 'components/types';\nimport Header from './Header';\nimport Account from './Account';\nimport './index.css';\n\nconst { Expense, Transfer, Income } = TransationKindT;\nconst NoAccounts = () => (\n  <div className=\"transactions-form__empty\">You don't have any accounts.</div>\n);\n\nclass TransactionForm extends React.Component {\n  state = { searchQuery: '' };\n\n  onSubmit = event => {\n    event.preventDefault();\n    this.props.saveTransaction(formToState(this.props.form));\n  };\n\n  onChange = handler => (_, { value }) => handler(value);\n\n  onAccountChange = handler => (_, { value }) => {\n    handler({\n      accountId: value,\n      currency: this.props.accountCurrency[value]\n    });\n  };\n\n  onTagAdd = (_, { value }) => {\n    this.props.addTag({ kind: this.props.form.kind, tag: value });\n  };\n  onTagSearchChange = (_, { searchQuery }) => this.setState({ searchQuery });\n  onTagClose = () => this.setState({ searchQuery: '' });\n\n  getCurrencyOptions = accountId => {\n    return this.props.accountCurrency[accountId].map(code => ({\n      key: code,\n      value: code,\n      text: code\n    }));\n  };\n\n  getGridClassName = () =>\n    this.props.form.kind === Transfer\n      ? 'transaction-form-grid single-line'\n      : 'transaction-form-grid';\n\n  render() {\n    if (!this.props.form.accountId) return <NoAccounts />;\n\n    return (\n      <React.Fragment>\n        <Header\n          withTransfer={!!this.props.form.linkedAccountId}\n          activeKind={this.props.form.kind}\n          changeKind={this.props.changeKind}\n        />\n        <Segment attached=\"bottom\">\n          <Form onSubmit={this.onSubmit} className=\"transaction-form\">\n            <Account\n              label={this.props.form.kind === Income ? 'To' : 'From'}\n              accountId={this.props.form.accountId}\n              amount={this.props.form.amount}\n              currency={this.props.form.currency}\n              accountOptions={this.props.accountOptions}\n              currencyOptions={this.getCurrencyOptions(\n                this.props.form.accountId\n              )}\n              onAccountChange={this.onAccountChange(this.props.changeAccount)}\n              onAmountChange={this.onChange(this.props.changeAmount)}\n              onCurrencyChange={this.onChange(this.props.changeCurrency)}\n            />\n            {this.props.form.kind === Transfer && (\n              <Account\n                label=\"To\"\n                accountId={this.props.form.linkedAccountId}\n                amount={this.props.form.linkedAmount}\n                currency={this.props.form.linkedCurrency}\n                accountOptions={this.props.accountOptions}\n                currencyOptions={this.getCurrencyOptions(\n                  this.props.form.linkedAccountId\n                )}\n                onAccountChange={this.onAccountChange(\n                  this.props.changeLinkedAccount\n                )}\n                onAmountChange={this.onChange(this.props.changeLinkedAmount)}\n                onCurrencyChange={this.onChange(\n                  this.props.changeLinkedCurrency\n                )}\n              />\n            )}\n            <div className={this.getGridClassName()}>\n              <div className=\"transaction-form-grid__column-wide\">\n                {this.props.form.kind !== Transfer && (\n                  <div className=\"transaction-form-grid__field\">\n                    <Form.Field>\n                      <label>Tags</label>\n                      <Dropdown\n                        multiple\n                        selection\n                        search\n                        allowAdditions\n                        closeOnChange\n                        placeholder=\"Choose existing tags or add new\"\n                        value={this.props.form.tags[this.props.form.kind]}\n                        options={this.props.tagsOptions}\n                        onChange={this.onChange(this.props.changeTags)}\n                        onAddItem={this.onTagAdd}\n                        onClose={this.onTagClose}\n                        onSearchChange={this.onTagSearchChange}\n                        searchQuery={this.state.searchQuery}\n                      />\n                    </Form.Field>\n                  </div>\n                )}\n                <div className=\"transaction-form-grid__field\">\n                  <Form.Field>\n                    <Input\n                      placeholder=\"Note\"\n                      value={this.props.form.note}\n                      onChange={this.onChange(this.props.changeNote)}\n                    />\n                  </Form.Field>\n                </div>\n              </div>\n              <div className=\"transaction-form-grid__column-narrow\">\n                <div className=\"transaction-form-grid__field\">\n                  <Form.Field>\n                    <Input\n                      required\n                      fluid\n                      type=\"date\"\n                      value={this.props.form.date}\n                      onChange={this.onChange(this.props.changeDate)}\n                    />\n                  </Form.Field>\n                </div>\n                <div className=\"transaction-form-grid__field\">\n                  <Button\n                    primary\n                    fluid\n                    disabled={parseFloat(this.props.form.amount) === 0}\n                  >\n                    {this.props.form.id ? 'Save' : 'Add'}{' '}\n                    {getKindLabel(this.props.form.kind)}\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </Form>\n        </Segment>\n      </React.Fragment>\n    );\n  }\n}\n\nTransactionForm.propTypes = {\n  form: PropTypes.shape({\n    id: PropTypes.string,\n    kind: PropTypes.oneOf([Expense, Transfer, Income]),\n    accountId: PropTypes.string,\n    amount: PropTypes.string,\n    currency: PropTypes.string,\n    linkedAccountId: PropTypes.string,\n    linkedAmount: PropTypes.string,\n    linkedCurrency: PropTypes.string,\n    tags: PropTypes.shape({\n      [Expense]: PropTypes.arrayOf(PropTypes.string),\n      [Income]: PropTypes.arrayOf(PropTypes.string)\n    }),\n    date: PropTypes.string,\n    note: PropTypes.string\n  }),\n  accountCurrency: PropTypes.object.isRequired,\n  accountOptions: PropTypes.arrayOf(DropdownOption).isRequired,\n  tagsOptions: PropTypes.arrayOf(DropdownOption),\n  changeKind: PropTypes.func.isRequired,\n  changeAccount: PropTypes.func.isRequired,\n  changeAmount: PropTypes.func.isRequired,\n  changeCurrency: PropTypes.func.isRequired,\n  changeLinkedAccount: PropTypes.func,\n  changeLinkedAmount: PropTypes.func,\n  changeLinkedCurrency: PropTypes.func,\n  addTag: PropTypes.func,\n  changeTags: PropTypes.func,\n  changeDate: PropTypes.func.isRequired,\n  changeNote: PropTypes.func.isRequired,\n  loadTags: PropTypes.func,\n  saveTransaction: PropTypes.func.isRequired\n};\n\nexport default TransactionForm;\n"]},"metadata":{},"sourceType":"module"}