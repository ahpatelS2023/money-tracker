{"ast":null,"code":"import _objectSpread from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/amipatel/Desktop/money-tracker/src/components/Report/Kind/NetIncome.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ChartistGraph from 'react-chartist';\nimport Chartist from 'chartist';\nimport abbreviate from 'number-abbreviate';\nimport 'chartist-plugin-tooltips';\nimport 'chartist/dist/chartist.min.css';\nimport 'chartist-plugin-tooltips/dist/chartist-plugin-tooltip.css';\nimport Amount from '../../Amount';\nimport { Statistic } from 'semantic-ui-react';\nimport Currency from '../../../entities/Currency';\n\nvar ExpenseIncome =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ExpenseIncome, _React$Component);\n\n  function ExpenseIncome() {\n    _classCallCheck(this, ExpenseIncome);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ExpenseIncome).apply(this, arguments));\n  }\n\n  _createClass(ExpenseIncome, [{\n    key: \"render\",\n    value: function render() {\n      var options = {\n        axisY: {\n          labelInterpolationFnc: function labelInterpolationFnc(value) {\n            return abbreviate(value, 2);\n          }\n        },\n        plugins: [Chartist.plugins.tooltip({\n          class: 'mono',\n          currency: this.props.currency,\n          anchorToPoint: true\n        })]\n      };\n      var _this$props = this.props,\n          data = _this$props.data,\n          base = _this$props.base;\n      var series = data.series[0].map(function (income, idx) {\n        return income - data.series[1][idx];\n      });\n      var nonEmptyValues = series.filter(function (val) {\n        return val !== 0;\n      });\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, nonEmptyValues.length > 0 && React.createElement(\"div\", {\n        className: \"mt-report-stats\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(Statistic.Group, {\n        size: \"mini\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(Statistic, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(Statistic.Value, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(Amount, {\n        code: base,\n        value: Currency.numberToCents(nonEmptyValues.reduce(function (sum, cur) {\n          return sum + cur;\n        }, 0), base),\n        showCents: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      })), React.createElement(Statistic.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"Total net income\")), React.createElement(Statistic, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(Statistic.Value, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(Amount, {\n        code: base,\n        value: Currency.numberToCents(nonEmptyValues.reduce(function (sum, cur) {\n          return sum + cur;\n        }, 0) / nonEmptyValues.length, base),\n        showCents: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      })), React.createElement(Statistic.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Average net income\")))), React.createElement(ChartistGraph, {\n        type: \"Bar\",\n        className: \"ct-octave mt-report-expense-income\",\n        data: _objectSpread({}, data, {\n          series: [series]\n        }),\n        options: options,\n        listener: {\n          draw: function draw(data) {\n            if (data.type === 'bar' && data.value.y < 0) {\n              data.element.attr({\n                style: 'stroke: #f44336'\n              });\n            }\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ExpenseIncome;\n}(React.Component);\n\nExpenseIncome.propTypes = {\n  currency: PropTypes.string,\n  data: PropTypes.shape({\n    labels: PropTypes.array,\n    series: PropTypes.array\n  })\n};\nexport default ExpenseIncome;","map":{"version":3,"sources":["/Users/amipatel/Desktop/money-tracker/src/components/Report/Kind/NetIncome.js"],"names":["React","PropTypes","ChartistGraph","Chartist","abbreviate","Amount","Statistic","Currency","ExpenseIncome","options","axisY","labelInterpolationFnc","value","plugins","tooltip","class","currency","props","anchorToPoint","data","base","series","map","income","idx","nonEmptyValues","filter","val","length","numberToCents","reduce","sum","cur","draw","type","y","element","attr","style","Component","propTypes","string","shape","labels","array"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ChartistGraph from 'react-chartist';\nimport Chartist from 'chartist';\nimport abbreviate from 'number-abbreviate';\nimport 'chartist-plugin-tooltips';\nimport 'chartist/dist/chartist.min.css';\nimport 'chartist-plugin-tooltips/dist/chartist-plugin-tooltip.css';\nimport Amount from '../../Amount';\nimport { Statistic } from 'semantic-ui-react';\nimport Currency from '../../../entities/Currency';\n\nclass ExpenseIncome extends React.Component {\n  render() {\n    const options = {\n      axisY: {\n        labelInterpolationFnc: value => abbreviate(value, 2)\n      },\n      plugins: [\n        Chartist.plugins.tooltip({\n          class: 'mono',\n          currency: this.props.currency,\n          anchorToPoint: true\n        })\n      ]\n    };\n    const { data, base } = this.props;\n    const series = data.series[0].map(\n      (income, idx) => income - data.series[1][idx]\n    );\n    const nonEmptyValues = series.filter(val => val !== 0);\n\n    return (\n      <React.Fragment>\n        {nonEmptyValues.length > 0 && (\n          <div className=\"mt-report-stats\">\n            <Statistic.Group size=\"mini\">\n              <Statistic>\n                <Statistic.Value>\n                  <Amount\n                    code={base}\n                    value={Currency.numberToCents(\n                      nonEmptyValues.reduce((sum, cur) => sum + cur, 0),\n                      base\n                    )}\n                    showCents={false}\n                  />\n                </Statistic.Value>\n                <Statistic.Label>Total net income</Statistic.Label>\n              </Statistic>\n              <Statistic>\n                <Statistic.Value>\n                  <Amount\n                    code={base}\n                    value={Currency.numberToCents(\n                      nonEmptyValues.reduce((sum, cur) => sum + cur, 0) /\n                        nonEmptyValues.length,\n                      base\n                    )}\n                    showCents={false}\n                  />\n                </Statistic.Value>\n                <Statistic.Label>Average net income</Statistic.Label>\n              </Statistic>\n            </Statistic.Group>\n          </div>\n        )}\n        <ChartistGraph\n          type=\"Bar\"\n          className=\"ct-octave mt-report-expense-income\"\n          data={{ ...data, series: [series] }}\n          options={options}\n          listener={{\n            draw: data => {\n              if (data.type === 'bar' && data.value.y < 0) {\n                data.element.attr({ style: 'stroke: #f44336' });\n              }\n            }\n          }}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nExpenseIncome.propTypes = {\n  currency: PropTypes.string,\n  data: PropTypes.shape({\n    labels: PropTypes.array,\n    series: PropTypes.array\n  })\n};\n\nexport default ExpenseIncome;\n"]},"metadata":{},"sourceType":"module"}