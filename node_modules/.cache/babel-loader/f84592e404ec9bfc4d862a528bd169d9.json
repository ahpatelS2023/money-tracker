{"ast":null,"code":"import _toConsumableArray from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(startDataImportSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(updateCurrencySettings),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(mapAccountsId),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(createNewAccount);\n\nimport { takeLatest, call, put, select } from 'redux-saga/effects';\nimport union from 'lodash/union';\nimport { startDataImport, importFileReadSuccess, importLineProcessed, importFailure } from '../actions/ui/dataImport';\nimport { changeSettingsCurrency } from '../actions/settings';\nimport { saveAccount } from '../actions/entities/accounts';\nimport { saveTransaction } from '../actions/entities/transactions';\nimport { getImportFile } from '../selectors/ui/dataImport';\nimport { getBaseCurrency, getSecondaryCurrency } from '../selectors/settings';\nimport { getAccountByName } from '../selectors/entities/accounts';\nimport { saveAccountSaga } from './accounts';\nimport { saveTransactionSaga } from './transactions';\nimport { defaultGroup, formTostate } from '../entities/Account';\nimport { formToState } from '../entities/Transaction';\nimport CsvReader from '../util/CsvReader';\nexport function startDataImportSaga() {\n  var file, _ref, transactions, accounts, currencies, accountIdByName, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _ref4, _ref3, lineNr, transaction;\n\n  return _regeneratorRuntime.wrap(function startDataImportSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return select(getImportFile);\n\n        case 3:\n          file = _context.sent;\n          _context.next = 6;\n          return call(CsvReader, file);\n\n        case 6:\n          _ref = _context.sent;\n          transactions = _ref.transactions;\n          accounts = _ref.accounts;\n          currencies = _ref.currencies;\n          _context.next = 12;\n          return put(importFileReadSuccess(transactions.length - 1));\n\n        case 12:\n          _context.next = 14;\n          return updateCurrencySettings(currencies);\n\n        case 14:\n          _context.next = 16;\n          return mapAccountsId(accounts);\n\n        case 16:\n          accountIdByName = _context.sent;\n          _iteratorNormalCompletion = true;\n          _didIteratorError = false;\n          _iteratorError = undefined;\n          _context.prev = 20;\n          _iterator = transactions.entries()[Symbol.iterator]();\n\n        case 22:\n          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n            _context.next = 34;\n            break;\n          }\n\n          _ref4 = _step.value;\n          _ref3 = _slicedToArray(_ref4, 2);\n          lineNr = _ref3[0];\n          transaction = _ref3[1];\n          _context.next = 29;\n          return saveTransactionSaga(saveTransaction(formToState(_objectSpread({}, transaction, {\n            accountId: accountIdByName.get(transaction.account),\n            linkedAccountId: accountIdByName.get(transaction.linkedAccount)\n          }))));\n\n        case 29:\n          _context.next = 31;\n          return put(importLineProcessed(lineNr));\n\n        case 31:\n          _iteratorNormalCompletion = true;\n          _context.next = 22;\n          break;\n\n        case 34:\n          _context.next = 40;\n          break;\n\n        case 36:\n          _context.prev = 36;\n          _context.t0 = _context[\"catch\"](20);\n          _didIteratorError = true;\n          _iteratorError = _context.t0;\n\n        case 40:\n          _context.prev = 40;\n          _context.prev = 41;\n\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n\n        case 43:\n          _context.prev = 43;\n\n          if (!_didIteratorError) {\n            _context.next = 46;\n            break;\n          }\n\n          throw _iteratorError;\n\n        case 46:\n          return _context.finish(43);\n\n        case 47:\n          return _context.finish(40);\n\n        case 48:\n          _context.next = 54;\n          break;\n\n        case 50:\n          _context.prev = 50;\n          _context.t1 = _context[\"catch\"](0);\n          _context.next = 54;\n          return put(importFailure(_context.t1));\n\n        case 54:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[0, 50], [20, 36, 40, 48], [41,, 43, 47]]);\n}\n/**\n * Set currencies from import file as secondary.\n *\n * @param {Set} currencies\n */\n\nexport function updateCurrencySettings(currencies) {\n  var base, secondary;\n  return _regeneratorRuntime.wrap(function updateCurrencySettings$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return select(getBaseCurrency);\n\n        case 2:\n          base = _context2.sent;\n          _context2.next = 5;\n          return select(getSecondaryCurrency);\n\n        case 5:\n          secondary = _context2.sent;\n          _context2.next = 8;\n          return put(changeSettingsCurrency({\n            base: base,\n            secondary: union(secondary, _toConsumableArray(currencies))\n          }));\n\n        case 8:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}\n/**\n * Map account name to account ID.\n * If no account found in local accounts, create new one.\n *\n * @param {Map} accounts name => set of currencies map\n * @return {Map} account name => account id map\n */\n\nexport function mapAccountsId(accounts) {\n  var idByName, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _ref7, _ref6, name, currency, account;\n\n  return _regeneratorRuntime.wrap(function mapAccountsId$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          idByName = new Map();\n          _iteratorNormalCompletion2 = true;\n          _didIteratorError2 = false;\n          _iteratorError2 = undefined;\n          _context3.prev = 4;\n          _iterator2 = accounts.entries()[Symbol.iterator]();\n\n        case 6:\n          if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {\n            _context3.next = 22;\n            break;\n          }\n\n          _ref7 = _step2.value;\n          _ref6 = _slicedToArray(_ref7, 2);\n          name = _ref6[0];\n          currency = _ref6[1];\n          _context3.next = 13;\n          return select(getAccountByName(name));\n\n        case 13:\n          account = _context3.sent;\n\n          if (account) {\n            _context3.next = 18;\n            break;\n          }\n\n          _context3.next = 17;\n          return createNewAccount(name, _toConsumableArray(currency));\n\n        case 17:\n          account = _context3.sent;\n\n        case 18:\n          idByName.set(name, account.id);\n\n        case 19:\n          _iteratorNormalCompletion2 = true;\n          _context3.next = 6;\n          break;\n\n        case 22:\n          _context3.next = 28;\n          break;\n\n        case 24:\n          _context3.prev = 24;\n          _context3.t0 = _context3[\"catch\"](4);\n          _didIteratorError2 = true;\n          _iteratorError2 = _context3.t0;\n\n        case 28:\n          _context3.prev = 28;\n          _context3.prev = 29;\n\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n\n        case 31:\n          _context3.prev = 31;\n\n          if (!_didIteratorError2) {\n            _context3.next = 34;\n            break;\n          }\n\n          throw _iteratorError2;\n\n        case 34:\n          return _context3.finish(31);\n\n        case 35:\n          return _context3.finish(28);\n\n        case 36:\n          return _context3.abrupt(\"return\", idByName);\n\n        case 37:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, this, [[4, 24, 28, 36], [29,, 31, 35]]);\n}\n/**\n * Create new account.\n *\n * @param {string} name\n * @param {array} currencies list of used currencies\n * @return {object}\n */\n\nexport function createNewAccount(name, currencies) {\n  var account;\n  return _regeneratorRuntime.wrap(function createNewAccount$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          account = formTostate({\n            name: name,\n            group: defaultGroup,\n            balance: currencies.reduce(function (acc, code) {\n              acc[code] = 0;\n              return acc;\n            }, {}),\n            currencies: currencies,\n            on_dashboard: false\n          });\n          _context4.next = 3;\n          return saveAccountSaga(saveAccount(account));\n\n        case 3:\n          return _context4.abrupt(\"return\", account);\n\n        case 4:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, this);\n}\nexport default [takeLatest(startDataImport, startDataImportSaga)];","map":{"version":3,"sources":["/Users/amipatel/Desktop/money-tracker/src/sagas/dataImport.js"],"names":["startDataImportSaga","updateCurrencySettings","mapAccountsId","createNewAccount","takeLatest","call","put","select","union","startDataImport","importFileReadSuccess","importLineProcessed","importFailure","changeSettingsCurrency","saveAccount","saveTransaction","getImportFile","getBaseCurrency","getSecondaryCurrency","getAccountByName","saveAccountSaga","saveTransactionSaga","defaultGroup","formTostate","formToState","CsvReader","file","transactions","accounts","currencies","length","accountIdByName","entries","lineNr","transaction","accountId","get","account","linkedAccountId","linkedAccount","base","secondary","idByName","Map","name","currency","set","id","group","balance","reduce","acc","code","on_dashboard"],"mappings":";;;;;;;yBAoBiBA,mB;;;yBA+BAC,sB;;;yBAmBAC,a;;;yBAmBAC,gB;;AAzFjB,SAASC,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,MAAhC,QAA8C,oBAA9C;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,SACEC,eADF,EAEEC,qBAFF,EAGEC,mBAHF,EAIEC,aAJF,QAKO,0BALP;AAMA,SAASC,sBAAT,QAAuC,qBAAvC;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,SAASC,eAAT,QAAgC,kCAAhC;AACA,SAASC,aAAT,QAA8B,4BAA9B;AACA,SAASC,eAAT,EAA0BC,oBAA1B,QAAsD,uBAAtD;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AACA,SAASC,eAAT,QAAgC,YAAhC;AACA,SAASC,mBAAT,QAAoC,gBAApC;AACA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,qBAA1C;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AAEA,OAAO,SAAUzB,mBAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEU,iBAAMO,MAAM,CAACS,aAAD,CAAZ;;AAFV;AAEGU,UAAAA,IAFH;AAAA;AAG4C,iBAAMrB,IAAI,CAACoB,SAAD,EAAYC,IAAZ,CAAV;;AAH5C;AAAA;AAGKC,UAAAA,YAHL,QAGKA,YAHL;AAGmBC,UAAAA,QAHnB,QAGmBA,QAHnB;AAG6BC,UAAAA,UAH7B,QAG6BA,UAH7B;AAAA;AAKH,iBAAMvB,GAAG,CAACI,qBAAqB,CAACiB,YAAY,CAACG,MAAb,GAAsB,CAAvB,CAAtB,CAAT;;AALG;AAAA;AAMH,iBAAM7B,sBAAsB,CAAC4B,UAAD,CAA5B;;AANG;AAAA;AAOqB,iBAAM3B,aAAa,CAAC0B,QAAD,CAAnB;;AAPrB;AAOGG,UAAAA,eAPH;AAAA;AAAA;AAAA;AAAA;AAAA,sBASiCJ,YAAY,CAACK,OAAb,EATjC;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AASSC,UAAAA,MATT;AASiBC,UAAAA,WATjB;AAAA;AAUD,iBAAMb,mBAAmB,CACvBN,eAAe,CACbS,WAAW,mBACNU,WADM;AAETC,YAAAA,SAAS,EAAEJ,eAAe,CAACK,GAAhB,CAAoBF,WAAW,CAACG,OAAhC,CAFF;AAGTC,YAAAA,eAAe,EAAEP,eAAe,CAACK,GAAhB,CAAoBF,WAAW,CAACK,aAAhC;AAHR,aADE,CADQ,CAAzB;;AAVC;AAAA;AAmBD,iBAAMjC,GAAG,CAACK,mBAAmB,CAACsB,MAAD,CAApB,CAAT;;AAnBC;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAsBH,iBAAM3B,GAAG,CAACM,aAAa,aAAd,CAAT;;AAtBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BP;;;;;;AAKA,OAAO,SAAUX,sBAAV,CAAiC4B,UAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACQ,iBAAMtB,MAAM,CAACU,eAAD,CAAZ;;AADR;AACCuB,UAAAA,IADD;AAAA;AAEa,iBAAMjC,MAAM,CAACW,oBAAD,CAAZ;;AAFb;AAECuB,UAAAA,SAFD;AAAA;AAIL,iBAAMnC,GAAG,CACPO,sBAAsB,CAAC;AACrB2B,YAAAA,IAAI,EAAJA,IADqB;AAErBC,YAAAA,SAAS,EAAEjC,KAAK,CAACiC,SAAD,qBAAgBZ,UAAhB;AAFK,WAAD,CADf,CAAT;;AAJK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYP;;;;;;;;AAOA,OAAO,SAAU3B,aAAV,CAAwB0B,QAAxB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACCc,UAAAA,QADD,GACY,IAAIC,GAAJ,EADZ;AAAA;AAAA;AAAA;AAAA;AAAA,uBAE0Bf,QAAQ,CAACI,OAAT,EAF1B;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAEOY,UAAAA,IAFP;AAEaC,UAAAA,QAFb;AAAA;AAGW,iBAAMtC,MAAM,CAACY,gBAAgB,CAACyB,IAAD,CAAjB,CAAZ;;AAHX;AAGCP,UAAAA,OAHD;;AAAA,cAIEA,OAJF;AAAA;AAAA;AAAA;;AAAA;AAIqB,iBAAMlC,gBAAgB,CAACyC,IAAD,qBAAWC,QAAX,EAAtB;;AAJrB;AAIWR,UAAAA,OAJX;;AAAA;AAMHK,UAAAA,QAAQ,CAACI,GAAT,CAAaF,IAAb,EAAmBP,OAAO,CAACU,EAA3B;;AANG;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,4CASEL,QATF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYP;;;;;;;;AAOA,OAAO,SAAUvC,gBAAV,CAA2ByC,IAA3B,EAAiCf,UAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AACCQ,UAAAA,OADD,GACWd,WAAW,CAAC;AAC1BqB,YAAAA,IAAI,EAAJA,IAD0B;AAE1BI,YAAAA,KAAK,EAAE1B,YAFmB;AAG1B2B,YAAAA,OAAO,EAAEpB,UAAU,CAACqB,MAAX,CAAkB,UAACC,GAAD,EAAMC,IAAN,EAAe;AACxCD,cAAAA,GAAG,CAACC,IAAD,CAAH,GAAY,CAAZ;AACA,qBAAOD,GAAP;AACD,aAHQ,EAGN,EAHM,CAHiB;AAO1BtB,YAAAA,UAAU,EAAVA,UAP0B;AAQ1BwB,YAAAA,YAAY,EAAE;AARY,WAAD,CADtB;AAAA;AAWL,iBAAMjC,eAAe,CAACN,WAAW,CAACuB,OAAD,CAAZ,CAArB;;AAXK;AAAA,4CAaEA,OAbF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBP,eAAe,CAACjC,UAAU,CAACK,eAAD,EAAkBT,mBAAlB,CAAX,CAAf","sourcesContent":["import { takeLatest, call, put, select } from 'redux-saga/effects';\nimport union from 'lodash/union';\nimport {\n  startDataImport,\n  importFileReadSuccess,\n  importLineProcessed,\n  importFailure\n} from '../actions/ui/dataImport';\nimport { changeSettingsCurrency } from '../actions/settings';\nimport { saveAccount } from '../actions/entities/accounts';\nimport { saveTransaction } from '../actions/entities/transactions';\nimport { getImportFile } from '../selectors/ui/dataImport';\nimport { getBaseCurrency, getSecondaryCurrency } from '../selectors/settings';\nimport { getAccountByName } from '../selectors/entities/accounts';\nimport { saveAccountSaga } from './accounts';\nimport { saveTransactionSaga } from './transactions';\nimport { defaultGroup, formTostate } from '../entities/Account';\nimport { formToState } from '../entities/Transaction';\nimport CsvReader from '../util/CsvReader';\n\nexport function* startDataImportSaga() {\n  try {\n    const file = yield select(getImportFile);\n    const { transactions, accounts, currencies } = yield call(CsvReader, file);\n\n    yield put(importFileReadSuccess(transactions.length - 1));\n    yield updateCurrencySettings(currencies);\n    const accountIdByName = yield mapAccountsId(accounts);\n\n    for (const [lineNr, transaction] of transactions.entries()) {\n      yield saveTransactionSaga(\n        saveTransaction(\n          formToState({\n            ...transaction,\n            accountId: accountIdByName.get(transaction.account),\n            linkedAccountId: accountIdByName.get(transaction.linkedAccount)\n          })\n        )\n      );\n      yield put(importLineProcessed(lineNr));\n    }\n  } catch (error) {\n    yield put(importFailure(error));\n  }\n}\n\n/**\n * Set currencies from import file as secondary.\n *\n * @param {Set} currencies\n */\nexport function* updateCurrencySettings(currencies) {\n  const base = yield select(getBaseCurrency);\n  const secondary = yield select(getSecondaryCurrency);\n\n  yield put(\n    changeSettingsCurrency({\n      base,\n      secondary: union(secondary, [...currencies])\n    })\n  );\n}\n\n/**\n * Map account name to account ID.\n * If no account found in local accounts, create new one.\n *\n * @param {Map} accounts name => set of currencies map\n * @return {Map} account name => account id map\n */\nexport function* mapAccountsId(accounts) {\n  const idByName = new Map();\n  for (const [name, currency] of accounts.entries()) {\n    let account = yield select(getAccountByName(name));\n    if (!account) account = yield createNewAccount(name, [...currency]);\n\n    idByName.set(name, account.id);\n  }\n\n  return idByName;\n}\n\n/**\n * Create new account.\n *\n * @param {string} name\n * @param {array} currencies list of used currencies\n * @return {object}\n */\nexport function* createNewAccount(name, currencies) {\n  const account = formTostate({\n    name,\n    group: defaultGroup,\n    balance: currencies.reduce((acc, code) => {\n      acc[code] = 0;\n      return acc;\n    }, {}),\n    currencies,\n    on_dashboard: false\n  });\n  yield saveAccountSaga(saveAccount(account));\n\n  return account;\n}\n\nexport default [takeLatest(startDataImport, startDataImportSaga)];\n"]},"metadata":{},"sourceType":"module"}