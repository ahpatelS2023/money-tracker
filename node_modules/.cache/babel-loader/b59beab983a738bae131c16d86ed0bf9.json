{"ast":null,"code":"/**\r\n * @module  to-array-buffer\r\n */\n'use strict';\n\nvar str2ab = require('string-to-arraybuffer');\n\nvar flat = require('flatten-vertex-data'); // var isBlob = require('is-blob')\n\n\nmodule.exports = function toArrayBuffer(arg) {\n  //zero-length or undefined-like\n  if (!arg) return null; //array buffer\n\n  if (arg instanceof ArrayBuffer) return arg; //try to decode data-uri\n\n  if (typeof arg === 'string') {\n    return str2ab(arg);\n  } // File & Blob\n  // if (isBlob(src) || (src instanceof global.File)) {\n  // FIXME: we cannot use it here bc FileReader is async\n  // }\n  //array buffer view: TypedArray, DataView, Buffer etc\n\n\n  if (ArrayBuffer.isView(arg)) {\n    // if byteOffset is not 0, return sub-reference (slice is the only way)\n    if (arg.byteOffset) {\n      return arg.buffer.slice(arg.byteOffset, arg.byteOffset + arg.byteLength);\n    }\n\n    return arg.buffer;\n  } //buffer/data nested: NDArray, ImageData etc.\n  //FIXME: NDArrays with custom data type may be invalid for this procedure\n\n\n  if (arg.buffer || arg.data || arg._data) {\n    var result = toArrayBuffer(arg.buffer || arg.data || arg._data);\n    return result;\n  } // detect if flat\n\n\n  if (Array.isArray(arg)) {\n    for (var i = 0; i < arg.length; i++) {\n      if (arg[i].length != null) {\n        arg = flat(arg);\n        break;\n      }\n    }\n  } //array-like or unknown\n  //consider Uint8Array knows how to treat the input\n\n\n  var result = new Uint8Array(arg);\n  if (!result.length) return null;\n  return result.buffer;\n};","map":null,"metadata":{},"sourceType":"script"}