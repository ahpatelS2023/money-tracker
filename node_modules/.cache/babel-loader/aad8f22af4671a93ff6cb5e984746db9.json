{"ast":null,"code":"import _slicedToArray from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/amipatel/Desktop/money-tracker/src/components/TaskHelpFooter.js\";\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { tasks } from '../tracking/utils/usabilityTasks';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Fab } from '@material-ui/core';\nimport * as Survey from 'survey-react';\nimport 'survey-react/survey.css';\nimport Modal from 'react-modal';\nimport { withTracking } from 'react-tracker';\nimport { taskDescriptionButtonClick } from '../tracking/events/events';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    bottomRight: {\n      backgroundColor: '#00acc1 !important',\n      color: 'white',\n      border: '0px !important',\n      position: 'fixed',\n      bottom: theme.spacing(1.5),\n      right: theme.spacing(17)\n    }\n  };\n});\nvar customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    transform: 'translate(-50%, -50%)',\n    maxHeight: '90vh',\n    maxWidth: '90%',\n    overflowY: 'auto'\n  }\n};\nvar defaultThemeColors = Survey.StylesManager.ThemeColors['default'];\ndefaultThemeColors['$main-color'] = '#00acc1 !important';\ndefaultThemeColors['$body-container-background-color'] = '#f0f9fa !important';\n\nvar tasksHtml = function tasksHtml() {\n  var html = '';\n  tasks.forEach(function (t) {\n    html += \"\\n      <b>\".concat(t.title, \"</b>\\n      <br/><br/>\\n      <u>Scenario:</u> \").concat(t.scenario, \"\\n      <br/><br/>\\n      <u>Task:</u> \").concat(t.description, \"\\n      <br/><br/>\\n    \");\n  });\n  return html;\n};\n\nvar taskInfoJSON = {\n  title: \"Task Descriptions\",\n  startSurveyText: \"Go Back\",\n  pages: [{\n    questions: [{\n      type: 'html',\n      html: tasksHtml()\n    }]\n  }]\n};\n\nfunction TestMenu(props) {\n  var classes = useStyles();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isOpen = _useState2[0],\n      setIsOpen = _useState2[1];\n\n  var onClick = function onClick() {\n    props.trackTaskDescriptionButtonClick();\n    setIsOpen(true);\n  };\n\n  var onComplete = function onComplete() {\n    return setIsOpen(false);\n  };\n\n  var survey = React.createElement(Survey.Survey, {\n    json: taskInfoJSON,\n    showCompletedPage: false,\n    onComplete: onComplete,\n    completeText: \"Return\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  });\n  var surveyRender = React.createElement(Modal, {\n    isOpen: isOpen,\n    style: customStyles,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, survey);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(Fab, {\n    size: \"small\",\n    className: classes.bottomRight,\n    onClick: onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"?\"), surveyRender);\n}\n\nvar mapTrackingToProps = function mapTrackingToProps(trackEvent) {\n  return {\n    trackTaskDescriptionButtonClick: function trackTaskDescriptionButtonClick() {\n      return trackEvent(taskDescriptionButtonClick());\n    }\n  };\n};\n\nvar TestMenuWithTracking = withTracking(mapTrackingToProps)(TestMenu);\nexport default TestMenuWithTracking;","map":{"version":3,"sources":["/Users/amipatel/Desktop/money-tracker/src/components/TaskHelpFooter.js"],"names":["React","useState","tasks","makeStyles","Fab","Survey","Modal","withTracking","taskDescriptionButtonClick","useStyles","theme","bottomRight","backgroundColor","color","border","position","bottom","spacing","right","customStyles","content","top","left","transform","maxHeight","maxWidth","overflowY","defaultThemeColors","StylesManager","ThemeColors","tasksHtml","html","forEach","t","title","scenario","description","taskInfoJSON","startSurveyText","pages","questions","type","TestMenu","props","classes","isOpen","setIsOpen","onClick","trackTaskDescriptionButtonClick","onComplete","survey","surveyRender","mapTrackingToProps","trackEvent","TestMenuWithTracking"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,KAAT,QAAsB,kCAAtB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,GAAT,QAAoB,mBAApB;AACA,OAAO,KAAKC,MAAZ,MAAwB,cAAxB;AACA,OAAO,yBAAP;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,0BAAT,QAA2C,2BAA3C;AAEA,IAAMC,SAAS,GAAGN,UAAU,CAAC,UAAAO,KAAK;AAAA,SAAK;AACrCC,IAAAA,WAAW,EAAE;AACXC,MAAAA,eAAe,EAAE,oBADN;AAEXC,MAAAA,KAAK,EAAE,OAFI;AAGXC,MAAAA,MAAM,EAAE,gBAHG;AAIXC,MAAAA,QAAQ,EAAE,OAJC;AAKXC,MAAAA,MAAM,EAAEN,KAAK,CAACO,OAAN,CAAc,GAAd,CALG;AAMXC,MAAAA,KAAK,EAAER,KAAK,CAACO,OAAN,CAAc,EAAd;AANI;AADwB,GAAL;AAAA,CAAN,CAA5B;AAWA,IAAME,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,GAAG,EAAE,KADE;AAEPC,IAAAA,IAAI,EAAE,KAFC;AAGPJ,IAAAA,KAAK,EAAE,MAHA;AAIPF,IAAAA,MAAM,EAAE,MAJD;AAKPO,IAAAA,SAAS,EAAE,uBALJ;AAMPC,IAAAA,SAAS,EAAE,MANJ;AAOPC,IAAAA,QAAQ,EAAE,KAPH;AAQPC,IAAAA,SAAS,EAAE;AARJ;AADU,CAArB;AAaA,IAAIC,kBAAkB,GAAGtB,MAAM,CAACuB,aAAP,CAAqBC,WAArB,CAAiC,SAAjC,CAAzB;AACAF,kBAAkB,CAAC,aAAD,CAAlB,GAAoC,oBAApC;AACAA,kBAAkB,CAAC,kCAAD,CAAlB,GAAyD,oBAAzD;;AAEA,IAAMG,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtB,MAAIC,IAAI,GAAG,EAAX;AACA7B,EAAAA,KAAK,CAAC8B,OAAN,CAAc,UAAAC,CAAC,EAAI;AACjBF,IAAAA,IAAI,yBACGE,CAAC,CAACC,KADL,4DAGiBD,CAAC,CAACE,QAHnB,oDAKaF,CAAC,CAACG,WALf,6BAAJ;AAQD,GATD;AAUA,SAAOL,IAAP;AACD,CAbD;;AAeA,IAAMM,YAAY,GAAG;AACnBH,EAAAA,KAAK,qBADc;AAEnBI,EAAAA,eAAe,WAFI;AAGnBC,EAAAA,KAAK,EAAE,CACL;AACEC,IAAAA,SAAS,EAAE,CACT;AACEC,MAAAA,IAAI,EAAE,MADR;AAEEV,MAAAA,IAAI,EAAED,SAAS;AAFjB,KADS;AADb,GADK;AAHY,CAArB;;AAeA,SAASY,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,MAAMC,OAAO,GAAGnC,SAAS,EAAzB;;AADuB,kBAEKR,QAAQ,CAAC,KAAD,CAFb;AAAA;AAAA,MAEhB4C,MAFgB;AAAA,MAERC,SAFQ;;AAIvB,MAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpBJ,IAAAA,KAAK,CAACK,+BAAN;AACAF,IAAAA,SAAS,CAAC,IAAD,CAAT;AACD,GAHD;;AAIA,MAAMG,UAAU,GAAG,SAAbA,UAAa;AAAA,WAAMH,SAAS,CAAC,KAAD,CAAf;AAAA,GAAnB;;AAEA,MAAII,MAAM,GACR,oBAAC,MAAD,CAAQ,MAAR;AACE,IAAA,IAAI,EAAEb,YADR;AAEE,IAAA,iBAAiB,EAAE,KAFrB;AAGE,IAAA,UAAU,EAAEY,UAHd;AAIE,IAAA,YAAY,EAAC,QAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AASA,MAAIE,YAAY,GACd,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAEN,MAAf;AAAuB,IAAA,KAAK,EAAE1B,YAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG+B,MADH,CADF;AAMA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAC,OAAV;AAAkB,IAAA,SAAS,EAAEN,OAAO,CAACjC,WAArC;AAAkD,IAAA,OAAO,EAAEoC,OAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,EAIGI,YAJH,CADF;AAQD;;AAED,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,UAAU,EAAI;AACvC,SAAO;AACLL,IAAAA,+BAA+B,EAAE;AAAA,aAC/BK,UAAU,CAAC7C,0BAA0B,EAA3B,CADqB;AAAA;AAD5B,GAAP;AAID,CALD;;AAOA,IAAM8C,oBAAoB,GAAG/C,YAAY,CAAC6C,kBAAD,CAAZ,CAAiCV,QAAjC,CAA7B;AAEA,eAAeY,oBAAf","sourcesContent":["import * as React from 'react';\nimport { useState } from 'react';\nimport { tasks } from '../tracking/utils/usabilityTasks';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Fab } from '@material-ui/core';\nimport * as Survey from 'survey-react';\nimport 'survey-react/survey.css';\nimport Modal from 'react-modal';\nimport { withTracking } from 'react-tracker';\nimport { taskDescriptionButtonClick } from '../tracking/events/events';\n\nconst useStyles = makeStyles(theme => ({\n  bottomRight: {\n    backgroundColor: '#00acc1 !important',\n    color: 'white',\n    border: '0px !important',\n    position: 'fixed',\n    bottom: theme.spacing(1.5),\n    right: theme.spacing(17)\n  }\n}));\n\nconst customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    transform: 'translate(-50%, -50%)',\n    maxHeight: '90vh',\n    maxWidth: '90%',\n    overflowY: 'auto'\n  }\n};\n\nvar defaultThemeColors = Survey.StylesManager.ThemeColors['default'];\ndefaultThemeColors['$main-color'] = '#00acc1 !important';\ndefaultThemeColors['$body-container-background-color'] = '#f0f9fa !important';\n\nconst tasksHtml = () => {\n  var html = '';\n  tasks.forEach(t => {\n    html += `\n      <b>${t.title}</b>\n      <br/><br/>\n      <u>Scenario:</u> ${t.scenario}\n      <br/><br/>\n      <u>Task:</u> ${t.description}\n      <br/><br/>\n    `;\n  });\n  return html;\n};\n\nconst taskInfoJSON = {\n  title: `Task Descriptions`,\n  startSurveyText: `Go Back`,\n  pages: [\n    {\n      questions: [\n        {\n          type: 'html',\n          html: tasksHtml()\n        }\n      ]\n    }\n  ]\n};\n\nfunction TestMenu(props) {\n  const classes = useStyles();\n  const [isOpen, setIsOpen] = useState(false);\n\n  const onClick = () => {\n    props.trackTaskDescriptionButtonClick();\n    setIsOpen(true);\n  };\n  const onComplete = () => setIsOpen(false);\n\n  var survey = (\n    <Survey.Survey\n      json={taskInfoJSON}\n      showCompletedPage={false}\n      onComplete={onComplete}\n      completeText=\"Return\"\n    />\n  );\n\n  var surveyRender = (\n    <Modal isOpen={isOpen} style={customStyles}>\n      {survey}\n    </Modal>\n  );\n\n  return (\n    <div>\n      <Fab size=\"small\" className={classes.bottomRight} onClick={onClick}>\n        ?\n      </Fab>\n      {surveyRender}\n    </div>\n  );\n}\n\nconst mapTrackingToProps = trackEvent => {\n  return {\n    trackTaskDescriptionButtonClick: () =>\n      trackEvent(taskDescriptionButtonClick())\n  };\n};\n\nconst TestMenuWithTracking = withTracking(mapTrackingToProps)(TestMenu);\n\nexport default TestMenuWithTracking;\n"]},"metadata":{},"sourceType":"module"}