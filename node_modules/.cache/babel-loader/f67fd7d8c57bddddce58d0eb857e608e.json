{"ast":null,"code":"import _defineProperty from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport format from 'date-fns/format';\nimport { createSelector } from 'reselect';\nimport { getAccountsCurrencyMap, getAccountsAsOptions } from '../../entities/accounts';\nimport { getBaseCurrency } from '../../settings';\nimport { defaultKind, TransationKindT } from '../../../entities/Transaction';\nvar Expense = TransationKindT.Expense,\n    Income = TransationKindT.Income;\nexport var getForm = function getForm(state) {\n  return state.ui.form.transaction;\n};\nvar getDefaultAccountId = createSelector(getAccountsAsOptions, function (options) {\n  return options.length > 0 && options[0].key;\n});\nvar getDefaultCurrency = createSelector(getDefaultAccountId, getAccountsCurrencyMap, getBaseCurrency, function (accountId, currencies, base) {\n  return accountId && (currencies[accountId].includes(base) ? base : currencies[accountId][0]);\n});\nvar getDefaultLinkedAccountId = createSelector(getAccountsAsOptions, getDefaultAccountId, getAccountsCurrencyMap, function (options, defaultAccountId, currencies) {\n  return options.length > 1 ? options[1].key : defaultAccountId && currencies[defaultAccountId].length > 1 && defaultAccountId;\n});\nvar getDefaultLinkedCurrency = createSelector(getDefaultAccountId, getDefaultLinkedAccountId, getAccountsCurrencyMap, getBaseCurrency, function (accountId, linkedAccountId, currencies, base) {\n  return accountId && accountId === linkedAccountId ? currencies[accountId][1] : linkedAccountId && (currencies[linkedAccountId].includes(base) ? base : currencies[linkedAccountId][0]);\n});\nexport var getDefaultState = createSelector(getDefaultAccountId, getDefaultCurrency, getDefaultLinkedAccountId, getDefaultLinkedCurrency, function (accountId, currency, linkedAccountId, linkedCurrency) {\n  var _tags;\n\n  return {\n    kind: defaultKind,\n    isModalOpen: false,\n    accountId: accountId || null,\n    currency: currency || null,\n    amount: '',\n    linkedAccountId: linkedAccountId || null,\n    linkedCurrency: linkedCurrency || null,\n    linkedAmount: '',\n    tags: (_tags = {}, _defineProperty(_tags, Expense, []), _defineProperty(_tags, Income, []), _tags),\n    date: format(new Date(), 'YYYY-MM-DD'),\n    note: ''\n  };\n});","map":{"version":3,"sources":["/Users/amipatel/Desktop/money-tracker/src/selectors/ui/form/transaction.js"],"names":["format","createSelector","getAccountsCurrencyMap","getAccountsAsOptions","getBaseCurrency","defaultKind","TransationKindT","Expense","Income","getForm","state","ui","form","transaction","getDefaultAccountId","options","length","key","getDefaultCurrency","accountId","currencies","base","includes","getDefaultLinkedAccountId","defaultAccountId","getDefaultLinkedCurrency","linkedAccountId","getDefaultState","currency","linkedCurrency","kind","isModalOpen","amount","linkedAmount","tags","date","Date","note"],"mappings":"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","sourcesContent":["import format from 'date-fns/format';\nimport { createSelector } from 'reselect';\nimport {\n  getAccountsCurrencyMap,\n  getAccountsAsOptions\n} from '../../entities/accounts';\nimport { getBaseCurrency } from '../../settings';\nimport { defaultKind, TransationKindT } from '../../../entities/Transaction';\n\nconst { Expense, Income } = TransationKindT;\n\nexport const getForm = state => state.ui.form.transaction;\n\nconst getDefaultAccountId = createSelector(\n  getAccountsAsOptions,\n  options => options.length > 0 && options[0].key\n);\n\nconst getDefaultCurrency = createSelector(\n  getDefaultAccountId,\n  getAccountsCurrencyMap,\n  getBaseCurrency,\n  (accountId, currencies, base) =>\n    accountId &&\n    (currencies[accountId].includes(base) ? base : currencies[accountId][0])\n);\n\nconst getDefaultLinkedAccountId = createSelector(\n  getAccountsAsOptions,\n  getDefaultAccountId,\n  getAccountsCurrencyMap,\n  (options, defaultAccountId, currencies) =>\n    options.length > 1\n      ? options[1].key\n      : defaultAccountId &&\n        currencies[defaultAccountId].length > 1 &&\n        defaultAccountId\n);\n\nconst getDefaultLinkedCurrency = createSelector(\n  getDefaultAccountId,\n  getDefaultLinkedAccountId,\n  getAccountsCurrencyMap,\n  getBaseCurrency,\n  (accountId, linkedAccountId, currencies, base) =>\n    accountId && accountId === linkedAccountId\n      ? currencies[accountId][1]\n      : linkedAccountId &&\n        (currencies[linkedAccountId].includes(base)\n          ? base\n          : currencies[linkedAccountId][0])\n);\n\nexport const getDefaultState = createSelector(\n  getDefaultAccountId,\n  getDefaultCurrency,\n  getDefaultLinkedAccountId,\n  getDefaultLinkedCurrency,\n  (accountId, currency, linkedAccountId, linkedCurrency) => {\n    return {\n      kind: defaultKind,\n      isModalOpen: false,\n      accountId: accountId || null,\n      currency: currency || null,\n      amount: '',\n      linkedAccountId: linkedAccountId || null,\n      linkedCurrency: linkedCurrency || null,\n      linkedAmount: '',\n      tags: {\n        [Expense]: [],\n        [Income]: []\n      },\n      date: format(new Date(), 'YYYY-MM-DD'),\n      note: ''\n    };\n  }\n);\n"]},"metadata":{},"sourceType":"module"}