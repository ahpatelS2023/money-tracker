{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nimport { getTask } from './usabilityTasks';\nimport { reducxEvent2HOC } from '../events/mappingEvents';\nimport * as _ from 'lodash';\nvar TASK_COUNT = 6;\nexport function sendResult() {\n  var payload = {};\n  var taskGroup = localStorage.getItem('taskGroup');\n  payload.id = uuidv4();\n  payload.demographics = JSON.parse(localStorage.getItem('demographics'));\n  payload.demographics.comment = localStorage.getItem('comment');\n  payload.demographics.group = taskGroup;\n  payload.survey = JSON.parse(localStorage.getItem(\"surveyResults\"));\n  payload.totalWaitTime = parseInt(localStorage.getItem('total_wait_time'));\n  payload.numberOfWaits = parseInt(localStorage.getItem('number_of_waits'));\n  var tasks = [];\n\n  for (var i = 0; i < TASK_COUNT; i++) {\n    var task = {};\n    task.id = getTask(taskGroup, i + 1).id;\n    task.events = JSON.parse(localStorage.getItem(\"task\".concat(i + 1, \"_events\")));\n    task.alerts = parseInt(localStorage.getItem(\"task\".concat(i + 1, \"_alerts\")));\n    tasks.push(task);\n  }\n\n  payload.tasks = tasks;\n  console.log(payload);\n  var newPayload = mapTasksFromReduxToHOC(_.clone(payload));\n  console.log(newPayload); // TODO: send payload to aws\n}\n\nvar mapTasksFromReduxToHOC = function mapTasksFromReduxToHOC(payload) {\n  var newTasks = [];\n  payload.tasks.forEach(function (task) {\n    var newEvents = [];\n    task.events.forEach(function (event) {\n      newEvents.push(reducxEvent2HOC(event));\n    });\n    task.events = newEvents;\n    newTasks.push(task);\n  });\n  payload.tasks = newTasks;\n  return payload;\n};","map":{"version":3,"sources":["/Users/amipatel/Desktop/money-tracker/src/tracking/utils/usabilityResult.js"],"names":["v4","uuidv4","getTask","reducxEvent2HOC","_","TASK_COUNT","sendResult","payload","taskGroup","localStorage","getItem","id","demographics","JSON","parse","comment","group","survey","totalWaitTime","parseInt","numberOfWaits","tasks","i","task","events","alerts","push","console","log","newPayload","mapTasksFromReduxToHOC","clone","newTasks","forEach","newEvents","event"],"mappings":"AAAA,SAASA,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,OAAO,KAAKC,CAAZ,MAAmB,QAAnB;AAEA,IAAMC,UAAU,GAAG,CAAnB;AAEA,OAAO,SAASC,UAAT,GAAsB;AACzB,MAAIC,OAAO,GAAG,EAAd;AACA,MAAMC,SAAS,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAlB;AACAH,EAAAA,OAAO,CAACI,EAAR,GAAaV,MAAM,EAAnB;AACAM,EAAAA,OAAO,CAACK,YAAR,GAAuBC,IAAI,CAACC,KAAL,CAAWL,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAX,CAAvB;AACAH,EAAAA,OAAO,CAACK,YAAR,CAAqBG,OAArB,GAA+BN,YAAY,CAACC,OAAb,CAAqB,SAArB,CAA/B;AACAH,EAAAA,OAAO,CAACK,YAAR,CAAqBI,KAArB,GAA6BR,SAA7B;AAEAD,EAAAA,OAAO,CAACU,MAAR,GAAiBJ,IAAI,CAACC,KAAL,CAAWL,YAAY,CAACC,OAAb,iBAAX,CAAjB;AACAH,EAAAA,OAAO,CAACW,aAAR,GAAwBC,QAAQ,CAACV,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAD,CAAhC;AACAH,EAAAA,OAAO,CAACa,aAAR,GAAwBD,QAAQ,CAACV,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAD,CAAhC;AAEA,MAAMW,KAAK,GAAG,EAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,UAApB,EAAgCiB,CAAC,EAAjC,EAAqC;AACjC,QAAIC,IAAI,GAAG,EAAX;AAEAA,IAAAA,IAAI,CAACZ,EAAL,GAAUT,OAAO,CAACM,SAAD,EAAYc,CAAC,GAAG,CAAhB,CAAP,CAA0BX,EAApC;AACAY,IAAAA,IAAI,CAACC,MAAL,GAAcX,IAAI,CAACC,KAAL,CAAWL,YAAY,CAACC,OAAb,eAA4BY,CAAC,GAAG,CAAhC,aAAX,CAAd;AACAC,IAAAA,IAAI,CAACE,MAAL,GAAcN,QAAQ,CAACV,YAAY,CAACC,OAAb,eAA4BY,CAAC,GAAG,CAAhC,aAAD,CAAtB;AAEAD,IAAAA,KAAK,CAACK,IAAN,CAAWH,IAAX;AACH;;AAEDhB,EAAAA,OAAO,CAACc,KAAR,GAAgBA,KAAhB;AAEAM,EAAAA,OAAO,CAACC,GAAR,CAAYrB,OAAZ;AAEA,MAAMsB,UAAU,GAAGC,sBAAsB,CAAC1B,CAAC,CAAC2B,KAAF,CAAQxB,OAAR,CAAD,CAAzC;AACAoB,EAAAA,OAAO,CAACC,GAAR,CAAYC,UAAZ,EA5ByB,CA8BzB;AACH;;AAED,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACvB,OAAD,EAAa;AACxC,MAAMyB,QAAQ,GAAG,EAAjB;AAEAzB,EAAAA,OAAO,CAACc,KAAR,CAAcY,OAAd,CAAsB,UAAAV,IAAI,EAAI;AAC1B,QAAMW,SAAS,GAAG,EAAlB;AAEAX,IAAAA,IAAI,CAACC,MAAL,CAAYS,OAAZ,CAAoB,UAAAE,KAAK,EAAI;AACzBD,MAAAA,SAAS,CAACR,IAAV,CAAevB,eAAe,CAACgC,KAAD,CAA9B;AACH,KAFD;AAIAZ,IAAAA,IAAI,CAACC,MAAL,GAAcU,SAAd;AACAF,IAAAA,QAAQ,CAACN,IAAT,CAAcH,IAAd;AACH,GATD;AAWAhB,EAAAA,OAAO,CAACc,KAAR,GAAgBW,QAAhB;AAEA,SAAOzB,OAAP;AACH,CAjBD","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { getTask } from './usabilityTasks';\nimport { reducxEvent2HOC } from '../events/mappingEvents';\nimport * as _ from 'lodash';\n\nconst TASK_COUNT = 6;\n\nexport function sendResult() {\n    let payload = {};\n    const taskGroup = localStorage.getItem('taskGroup');\n    payload.id = uuidv4();\n    payload.demographics = JSON.parse(localStorage.getItem('demographics'));\n    payload.demographics.comment = localStorage.getItem('comment');\n    payload.demographics.group = taskGroup;\n\n    payload.survey = JSON.parse(localStorage.getItem(`surveyResults`));\n    payload.totalWaitTime = parseInt(localStorage.getItem('total_wait_time'));\n    payload.numberOfWaits = parseInt(localStorage.getItem('number_of_waits'));\n\n    const tasks = [];\n    for (let i = 0; i < TASK_COUNT; i++) {\n        let task = {};\n\n        task.id = getTask(taskGroup, i + 1).id;\n        task.events = JSON.parse(localStorage.getItem(`task${i + 1}_events`));\n        task.alerts = parseInt(localStorage.getItem(`task${i + 1}_alerts`));\n\n        tasks.push(task);\n    }\n\n    payload.tasks = tasks;\n\n    console.log(payload);\n\n    const newPayload = mapTasksFromReduxToHOC(_.clone(payload));\n    console.log(newPayload);\n\n    // TODO: send payload to aws\n}\n\nconst mapTasksFromReduxToHOC = (payload) => {\n    const newTasks = [];\n\n    payload.tasks.forEach(task => {\n        const newEvents = [];\n\n        task.events.forEach(event => {\n            newEvents.push(reducxEvent2HOC(event));\n        });\n\n        task.events = newEvents;\n        newTasks.push(task);\n    });\n\n    payload.tasks = newTasks;\n\n    return payload;\n}"]},"metadata":{},"sourceType":"module"}