{"ast":null,"code":"import _regeneratorRuntime from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(syncSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(setPendingChangesFlagSaga);\n\nimport { takeLatest, call, put, select } from 'redux-saga/effects';\nimport { sync, syncRequest, syncSuccess, syncFailure, setPendingChangesFlag } from '../actions/ui/sync';\nimport { saveAccountSuccess, removeAccountSuccess } from '../actions/entities/accounts';\nimport { saveTransactionSuccess, removeTransactionSuccess } from '../actions/entities/transactions';\nimport { loadAccountsSaga } from './accounts';\nimport { loadTagsSaga } from './tags';\nimport { loadRecentTransactionsSaga } from './transactions';\nimport { isDemoUser } from 'features/user/state/User.selector';\nimport AccountsStorage from '../util/storage/accounts';\nimport TransactionsStorage from '../util/storage/transactions';\nimport TagsStorage from '../util/storage/tags';\nexport function syncSaga() {\n  var readOnly;\n  return _regeneratorRuntime.wrap(function syncSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return put(syncRequest());\n\n        case 2:\n          _context.prev = 2;\n          _context.next = 5;\n          return select(isDemoUser);\n\n        case 5:\n          readOnly = _context.sent;\n          _context.next = 8;\n          return call(AccountsStorage.sync, readOnly);\n\n        case 8:\n          _context.next = 10;\n          return call(TransactionsStorage.sync, readOnly);\n\n        case 10:\n          _context.next = 12;\n          return call(TagsStorage.sync, readOnly);\n\n        case 12:\n          _context.next = 14;\n          return loadRecentTransactionsSaga();\n\n        case 14:\n          _context.next = 16;\n          return loadAccountsSaga();\n\n        case 16:\n          _context.next = 18;\n          return loadTagsSaga();\n\n        case 18:\n          _context.next = 20;\n          return put(syncSuccess());\n\n        case 20:\n          _context.next = 26;\n          break;\n\n        case 22:\n          _context.prev = 22;\n          _context.t0 = _context[\"catch\"](2);\n          _context.next = 26;\n          return put(syncFailure(_context.t0));\n\n        case 26:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[2, 22]]);\n}\nexport function setPendingChangesFlagSaga() {\n  return _regeneratorRuntime.wrap(function setPendingChangesFlagSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return put(setPendingChangesFlag());\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}\nexport default [takeLatest(sync, syncSaga), takeLatest(saveAccountSuccess, setPendingChangesFlagSaga), takeLatest(removeAccountSuccess, setPendingChangesFlagSaga), takeLatest(saveTransactionSuccess, setPendingChangesFlagSaga), takeLatest(removeTransactionSuccess, setPendingChangesFlagSaga)];","map":{"version":3,"sources":["/Users/amipatel/Desktop/money-tracker/src/sagas/sync.js"],"names":["syncSaga","setPendingChangesFlagSaga","takeLatest","call","put","select","sync","syncRequest","syncSuccess","syncFailure","setPendingChangesFlag","saveAccountSuccess","removeAccountSuccess","saveTransactionSuccess","removeTransactionSuccess","loadAccountsSaga","loadTagsSaga","loadRecentTransactionsSaga","isDemoUser","AccountsStorage","TransactionsStorage","TagsStorage","readOnly"],"mappings":";;;;yBAwBiBA,Q;;;yBAgBAC,yB;;AAxCjB,SAASC,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,MAAhC,QAA8C,oBAA9C;AACA,SACEC,IADF,EAEEC,WAFF,EAGEC,WAHF,EAIEC,WAJF,EAKEC,qBALF,QAMO,oBANP;AAOA,SACEC,kBADF,EAEEC,oBAFF,QAGO,8BAHP;AAIA,SACEC,sBADF,EAEEC,wBAFF,QAGO,kCAHP;AAIA,SAASC,gBAAT,QAAiC,YAAjC;AACA,SAASC,YAAT,QAA6B,QAA7B;AACA,SAASC,0BAAT,QAA2C,gBAA3C;AACA,SAASC,UAAT,QAA2B,mCAA3B;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,mBAAP,MAAgC,8BAAhC;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AAEA,OAAO,SAAUrB,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAMI,GAAG,CAACG,WAAW,EAAZ,CAAT;;AADK;AAAA;AAAA;AAGc,iBAAMF,MAAM,CAACa,UAAD,CAAZ;;AAHd;AAGGI,UAAAA,QAHH;AAAA;AAIH,iBAAMnB,IAAI,CAACgB,eAAe,CAACb,IAAjB,EAAuBgB,QAAvB,CAAV;;AAJG;AAAA;AAKH,iBAAMnB,IAAI,CAACiB,mBAAmB,CAACd,IAArB,EAA2BgB,QAA3B,CAAV;;AALG;AAAA;AAMH,iBAAMnB,IAAI,CAACkB,WAAW,CAACf,IAAb,EAAmBgB,QAAnB,CAAV;;AANG;AAAA;AAOH,iBAAML,0BAA0B,EAAhC;;AAPG;AAAA;AAQH,iBAAMF,gBAAgB,EAAtB;;AARG;AAAA;AASH,iBAAMC,YAAY,EAAlB;;AATG;AAAA;AAUH,iBAAMZ,GAAG,CAACI,WAAW,EAAZ,CAAT;;AAVG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAYH,iBAAMJ,GAAG,CAACK,WAAW,aAAZ,CAAT;;AAZG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBP,OAAO,SAAUR,yBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAMG,GAAG,CAACM,qBAAqB,EAAtB,CAAT;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIP,eAAe,CACbR,UAAU,CAACI,IAAD,EAAON,QAAP,CADG,EAEbE,UAAU,CAACS,kBAAD,EAAqBV,yBAArB,CAFG,EAGbC,UAAU,CAACU,oBAAD,EAAuBX,yBAAvB,CAHG,EAIbC,UAAU,CAACW,sBAAD,EAAyBZ,yBAAzB,CAJG,EAKbC,UAAU,CAACY,wBAAD,EAA2Bb,yBAA3B,CALG,CAAf","sourcesContent":["import { takeLatest, call, put, select } from 'redux-saga/effects';\nimport {\n  sync,\n  syncRequest,\n  syncSuccess,\n  syncFailure,\n  setPendingChangesFlag\n} from '../actions/ui/sync';\nimport {\n  saveAccountSuccess,\n  removeAccountSuccess\n} from '../actions/entities/accounts';\nimport {\n  saveTransactionSuccess,\n  removeTransactionSuccess\n} from '../actions/entities/transactions';\nimport { loadAccountsSaga } from './accounts';\nimport { loadTagsSaga } from './tags';\nimport { loadRecentTransactionsSaga } from './transactions';\nimport { isDemoUser } from 'features/user/state/User.selector';\nimport AccountsStorage from '../util/storage/accounts';\nimport TransactionsStorage from '../util/storage/transactions';\nimport TagsStorage from '../util/storage/tags';\n\nexport function* syncSaga() {\n  yield put(syncRequest());\n  try {\n    const readOnly = yield select(isDemoUser);\n    yield call(AccountsStorage.sync, readOnly);\n    yield call(TransactionsStorage.sync, readOnly);\n    yield call(TagsStorage.sync, readOnly);\n    yield loadRecentTransactionsSaga();\n    yield loadAccountsSaga();\n    yield loadTagsSaga();\n    yield put(syncSuccess());\n  } catch (error) {\n    yield put(syncFailure(error));\n  }\n}\n\nexport function* setPendingChangesFlagSaga() {\n  yield put(setPendingChangesFlag());\n}\n\nexport default [\n  takeLatest(sync, syncSaga),\n  takeLatest(saveAccountSuccess, setPendingChangesFlagSaga),\n  takeLatest(removeAccountSuccess, setPendingChangesFlagSaga),\n  takeLatest(saveTransactionSuccess, setPendingChangesFlagSaga),\n  takeLatest(removeTransactionSuccess, setPendingChangesFlagSaga)\n];\n"]},"metadata":{},"sourceType":"module"}