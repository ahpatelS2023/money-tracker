{"ast":null,"code":"(function (root) {\n  'use strict';\n\n  function NumberAbbreviate() {\n    var units;\n\n    if (!(this instanceof NumberAbbreviate)) {\n      // function usage: abbrev(n, decPlaces, units)\n      var n = arguments[0];\n      var decPlaces = arguments[1];\n      units = arguments[2];\n      var ab = new NumberAbbreviate(units);\n      return ab.abbreviate(n, decPlaces);\n    } // class usage: new NumberAbbreviate(units)\n\n\n    units = arguments[0];\n    this.units = units == null ? ['k', 'm', 'b', 't'] : units;\n  }\n\n  NumberAbbreviate.prototype._abbreviate = function (number, decPlaces) {\n    decPlaces = Math.pow(10, decPlaces);\n\n    for (var i = this.units.length - 1; i >= 0; i--) {\n      var size = Math.pow(10, (i + 1) * 3);\n\n      if (size <= number) {\n        number = Math.round(number * decPlaces / size) / decPlaces;\n\n        if (number === 1000 && i < this.units.length - 1) {\n          number = 1;\n          i++;\n        }\n\n        number += this.units[i];\n        break;\n      }\n    }\n\n    return number;\n  };\n\n  NumberAbbreviate.prototype.abbreviate = function (number, decPlaces) {\n    var isNegative = number < 0;\n\n    var abbreviatedNumber = this._abbreviate(Math.abs(number), decPlaces || 0);\n\n    return isNegative ? '-' + abbreviatedNumber : abbreviatedNumber;\n  };\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = NumberAbbreviate;\n  } else {\n    root.NumberAbbreviate = NumberAbbreviate;\n  }\n})(this);","map":null,"metadata":{},"sourceType":"script"}