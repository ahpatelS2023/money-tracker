{"ast":null,"code":"import _defineProperty from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _DataLoaderMap;\n\nimport addMonths from 'date-fns/add_months';\nimport addYears from 'date-fns/add_years';\nimport endOfMonth from 'date-fns/end_of_month';\nimport endOfYear from 'date-fns/end_of_year';\nimport format from 'date-fns/format';\nimport startOfMonth from 'date-fns/start_of_month';\nimport startOfYear from 'date-fns/start_of_year';\nimport subMonths from 'date-fns/sub_months';\nimport subYears from 'date-fns/sub_years';\nimport { toUtcTimestamp } from 'util/timezone';\nimport ExpenseIncomeDataLoader from './Report/ExpenseIncomeData';\nimport NetWorthDataLoader from './Report/NetWorthData';\nimport ExpenseTagsDataLoader from './Report/ExpenseTagsData';\nexport var ReportKindT;\n\n(function (ReportKindT) {\n  ReportKindT[\"ExpenseIncome\"] = \"expense_income\";\n  ReportKindT[\"NetIncome\"] = \"net_income\";\n  ReportKindT[\"ExpenseTags\"] = \"expense_tags\";\n  ReportKindT[\"NetWorth\"] = \"net_worth\";\n})(ReportKindT || (ReportKindT = {}));\n\nexport var ReportTimespanT;\n\n(function (ReportTimespanT) {\n  ReportTimespanT[\"Yearly\"] = \"yearly\";\n  ReportTimespanT[\"Monthly\"] = \"monthly\";\n})(ReportTimespanT || (ReportTimespanT = {}));\n\nvar _ReportTimespanT = ReportTimespanT,\n    Yearly = _ReportTimespanT.Yearly,\n    Monthly = _ReportTimespanT.Monthly;\nexport var defaultKind = ReportKindT.ExpenseIncome;\nexport var defaultTimespan = Yearly;\nexport function defaultDate() {\n  var timespan = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultTimespan;\n  return dateRange(new Date(), timespan);\n}\nexport function moveDateBackwards(_ref, timespan) {\n  var start = _ref.start;\n  return dateRange(timespan === Yearly ? subYears(start, 1) : subMonths(start, 1), timespan);\n}\nexport function moveDateForwards(_ref2, timespan) {\n  var start = _ref2.start;\n  return dateRange(timespan === Yearly ? addYears(start, 1) : addMonths(start, 1), timespan);\n}\nexport function kindOptions() {\n  return [{\n    key: ReportKindT.ExpenseIncome,\n    value: ReportKindT.ExpenseIncome,\n    text: 'Expense & Income'\n  }, {\n    key: ReportKindT.ExpenseTags,\n    value: ReportKindT.ExpenseTags,\n    text: 'Expense by Tags'\n  }, {\n    key: ReportKindT.NetIncome,\n    value: ReportKindT.NetIncome,\n    text: 'Net Income'\n  }, {\n    key: ReportKindT.NetWorth,\n    value: ReportKindT.NetWorth,\n    text: 'Net Worth'\n  }];\n}\nexport function timespanOptions() {\n  return [{\n    key: Yearly,\n    value: Yearly,\n    text: 'Yearly'\n  }, {\n    key: Monthly,\n    value: Monthly,\n    text: 'Monthly'\n  }];\n}\nexport function timespanLabel(date, timespan) {\n  return format(date, timespan === Yearly ? 'YYYY' : 'MMM, YYYY');\n}\nexport function transactionFilters(_ref3) {\n  var date = _ref3.date,\n      accounts = _ref3.accounts;\n  return {\n    date: date,\n    accounts: accounts\n  };\n}\nvar DataLoaderMap = (_DataLoaderMap = {}, _defineProperty(_DataLoaderMap, ReportKindT.ExpenseIncome, ExpenseIncomeDataLoader), _defineProperty(_DataLoaderMap, ReportKindT.NetIncome, ExpenseIncomeDataLoader), _defineProperty(_DataLoaderMap, ReportKindT.ExpenseTags, ExpenseTagsDataLoader), _defineProperty(_DataLoaderMap, ReportKindT.NetWorth, NetWorthDataLoader), _DataLoaderMap);\nexport var loadReportData = function loadReportData(report) {\n  for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    rest[_key - 1] = arguments[_key];\n  }\n\n  return DataLoaderMap[report.kind].apply(DataLoaderMap, [report].concat(rest));\n};\n\nfunction dateRange(date, timespan) {\n  var startFn = timespan === Yearly ? startOfYear : startOfMonth;\n  var endFn = timespan === Yearly ? endOfYear : endOfMonth;\n  var tomorrow = new Date(date);\n  tomorrow.setDate(tomorrow.getDate() + 1);\n  return {\n    start: toUtcTimestamp(startFn(tomorrow)),\n    end: toUtcTimestamp(endFn(tomorrow))\n  };\n}","map":{"version":3,"sources":["/Users/amipatel/Desktop/money-tracker/src/entities/Report.ts"],"names":["addMonths","addYears","endOfMonth","endOfYear","format","startOfMonth","startOfYear","subMonths","subYears","toUtcTimestamp","ExpenseIncomeDataLoader","NetWorthDataLoader","ExpenseTagsDataLoader","ReportKindT","ReportTimespanT","Yearly","Monthly","defaultKind","ExpenseIncome","defaultTimespan","defaultDate","timespan","dateRange","Date","moveDateBackwards","start","moveDateForwards","kindOptions","key","value","text","ExpenseTags","NetIncome","NetWorth","timespanOptions","timespanLabel","date","transactionFilters","accounts","DataLoaderMap","loadReportData","report","rest","kind","startFn","endFn","tomorrow","setDate","getDate","end"],"mappings":"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","sourcesContent":["import addMonths from 'date-fns/add_months';\nimport addYears from 'date-fns/add_years';\nimport endOfMonth from 'date-fns/end_of_month';\nimport endOfYear from 'date-fns/end_of_year';\nimport format from 'date-fns/format';\nimport startOfMonth from 'date-fns/start_of_month';\nimport startOfYear from 'date-fns/start_of_year';\nimport subMonths from 'date-fns/sub_months';\nimport subYears from 'date-fns/sub_years';\nimport { ExchangeRateT } from 'entities/Currency';\nimport { toUtcTimestamp } from 'util/timezone';\nimport { TransactionStateT } from './Transaction';\nimport ExpenseIncomeDataLoader from './Report/ExpenseIncomeData';\nimport NetWorthDataLoader from './Report/NetWorthData';\nimport ExpenseTagsDataLoader from './Report/ExpenseTagsData';\n\nexport interface ReportDataT {\n  labels: string[];\n  series: number[][];\n  netWorthStart?: number;\n  netWorthEnd?: number;\n}\n\nexport interface ReportStateT {\n  kind: ReportKindT;\n  data: ReportDataT;\n  date: DateRangeT;\n  timespan: ReportTimespanT;\n  accounts: string[];\n  excludeTags: string[];\n  netWorthStack: number[];\n  isLoading: boolean;\n}\n\nexport enum ReportKindT {\n  ExpenseIncome = 'expense_income',\n  NetIncome = 'net_income',\n  ExpenseTags = 'expense_tags',\n  NetWorth = 'net_worth'\n}\n\nexport enum ReportTimespanT {\n  Yearly = 'yearly',\n  Monthly = 'monthly'\n}\n\ninterface DateRangeT {\n  start: number; // timestamp\n  end: number; // timestamp\n}\n\nconst { Yearly, Monthly } = ReportTimespanT;\nexport const defaultKind = ReportKindT.ExpenseIncome;\nexport const defaultTimespan = Yearly;\n\nexport function defaultDate(timespan = defaultTimespan) {\n  return dateRange(new Date(), timespan);\n}\n\nexport function moveDateBackwards(\n  { start }: DateRangeT,\n  timespan: ReportTimespanT\n) {\n  return dateRange(\n    timespan === Yearly ? subYears(start, 1) : subMonths(start, 1),\n    timespan\n  );\n}\n\nexport function moveDateForwards(\n  { start }: DateRangeT,\n  timespan: ReportTimespanT\n) {\n  return dateRange(\n    timespan === Yearly ? addYears(start, 1) : addMonths(start, 1),\n    timespan\n  );\n}\n\nexport function kindOptions() {\n  return [\n    {\n      key: ReportKindT.ExpenseIncome,\n      value: ReportKindT.ExpenseIncome,\n      text: 'Expense & Income'\n    },\n    {\n      key: ReportKindT.ExpenseTags,\n      value: ReportKindT.ExpenseTags,\n      text: 'Expense by Tags'\n    },\n    {\n      key: ReportKindT.NetIncome,\n      value: ReportKindT.NetIncome,\n      text: 'Net Income'\n    },\n    {\n      key: ReportKindT.NetWorth,\n      value: ReportKindT.NetWorth,\n      text: 'Net Worth'\n    }\n  ];\n}\n\nexport function timespanOptions() {\n  return [\n    {\n      key: Yearly,\n      value: Yearly,\n      text: 'Yearly'\n    },\n    {\n      key: Monthly,\n      value: Monthly,\n      text: 'Monthly'\n    }\n  ];\n}\n\nexport function timespanLabel(date: Date, timespan: ReportTimespanT) {\n  return format(date, timespan === Yearly ? 'YYYY' : 'MMM, YYYY');\n}\n\nexport function transactionFilters({ date, accounts }: ReportStateT) {\n  return { date, accounts };\n}\n\ntype DataLoaderFn = (\n  report: ReportStateT,\n  transactions: TransactionStateT[],\n  exchangeRate: ExchangeRateT,\n  base: string,\n  netWorthEnd: number\n) => ReportDataT;\ntype DataLoaderMapT = { [kind in ReportKindT]: DataLoaderFn };\n\nconst DataLoaderMap: DataLoaderMapT = {\n  [ReportKindT.ExpenseIncome]: ExpenseIncomeDataLoader,\n  [ReportKindT.NetIncome]: ExpenseIncomeDataLoader,\n  [ReportKindT.ExpenseTags]: ExpenseTagsDataLoader,\n  [ReportKindT.NetWorth]: NetWorthDataLoader\n};\n\nexport const loadReportData: DataLoaderFn = (report, ...rest) => {\n  return DataLoaderMap[report.kind](report, ...rest);\n};\n\nfunction dateRange(date: Date | number, timespan: ReportTimespanT): DateRangeT {\n  const startFn = timespan === Yearly ? startOfYear : startOfMonth;\n  const endFn = timespan === Yearly ? endOfYear : endOfMonth;\n  const tomorrow = new Date(date);\n  tomorrow.setDate(tomorrow.getDate() + 1);\n\n  return {\n    start: toUtcTimestamp(startFn(tomorrow)),\n    end: toUtcTimestamp(endFn(tomorrow))\n  };\n}\n"]},"metadata":{},"sourceType":"module"}