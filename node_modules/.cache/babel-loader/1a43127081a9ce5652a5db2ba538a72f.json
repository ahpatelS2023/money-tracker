{"ast":null,"code":"import _toConsumableArray from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _GroupToTextMap;\n\nimport Currency from 'entities/Currency';\nexport var AccountGroupT;\n\n(function (AccountGroupT) {\n  AccountGroupT[\"Cash\"] = \"cash\";\n  AccountGroupT[\"Bank\"] = \"bank\";\n  AccountGroupT[\"Deposit\"] = \"deposit\";\n  AccountGroupT[\"Credit\"] = \"credit\";\n  AccountGroupT[\"Asset\"] = \"asset\";\n})(AccountGroupT || (AccountGroupT = {}));\n\nexport var DeleteStrategyT;\n\n(function (DeleteStrategyT) {\n  DeleteStrategyT[DeleteStrategyT[\"Archive\"] = 0] = \"Archive\";\n  DeleteStrategyT[DeleteStrategyT[\"Cleanup\"] = 1] = \"Cleanup\";\n  DeleteStrategyT[DeleteStrategyT[\"Move\"] = 2] = \"Move\";\n})(DeleteStrategyT || (DeleteStrategyT = {}));\n\nvar GroupToTextMap = (_GroupToTextMap = {}, _defineProperty(_GroupToTextMap, AccountGroupT.Cash, 'Cash'), _defineProperty(_GroupToTextMap, AccountGroupT.Bank, 'Bank Account'), _defineProperty(_GroupToTextMap, AccountGroupT.Deposit, 'Deposit'), _defineProperty(_GroupToTextMap, AccountGroupT.Credit, 'Credit'), _defineProperty(_GroupToTextMap, AccountGroupT.Asset, 'Asset'), _GroupToTextMap);\nexport var defaultGroup = AccountGroupT.Cash;\nexport var defaultDeleteStrategy = DeleteStrategyT.Archive;\nexport function getGroupName(code) {\n  return GroupToTextMap[code];\n}\nexport function getAccountGroupOptions() {\n  return Object.entries(GroupToTextMap).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        code = _ref2[0],\n        text = _ref2[1];\n\n    return {\n      key: code,\n      value: code,\n      text: text\n    };\n  });\n}\nexport function getDeleteStartegyOptions() {\n  var hasMultipleAccounts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var stratgies = [{\n    key: DeleteStrategyT.Archive,\n    value: DeleteStrategyT.Archive,\n    text: 'Archive account, keep transactions as is'\n  }, {\n    key: DeleteStrategyT.Cleanup,\n    value: DeleteStrategyT.Cleanup,\n    text: 'Delete transactions with account'\n  }];\n\n  if (hasMultipleAccounts) {\n    stratgies.push({\n      key: DeleteStrategyT.Move,\n      value: DeleteStrategyT.Move,\n      text: 'Move transactions to another account'\n    });\n  }\n\n  return stratgies;\n}\nexport function formTostate(_ref3) {\n  var id = _ref3.id,\n      balance = _ref3.balance,\n      name = _ref3.name,\n      group = _ref3.group,\n      currencies = _ref3.currencies,\n      on_dashboard = _ref3.on_dashboard,\n      archived = _ref3.archived;\n  return {\n    id: id || \"A\".concat(Date.now()),\n    balance: Object.keys(balance).reduce(function (acc, code) {\n      acc[code] = Currency.numberToCents(balance[code] !== '' ? balance[code] : '0', code);\n      return acc;\n    }, {}),\n    name: name,\n    group: group,\n    currencies: currencies,\n    on_dashboard: on_dashboard,\n    archived: archived\n  };\n}\nexport function stateToForm(account) {\n  return _objectSpread({}, account, {\n    balance: Object.keys(account.balance).reduce(function (acc, code) {\n      acc[code] = Currency.centsToString(account.balance[code], code, false);\n      return acc;\n    }, {})\n  });\n}\nexport function storageToState(_ref4) {\n  var _id = _ref4._id,\n      name = _ref4.name,\n      group = _ref4.group,\n      balance = _ref4.balance,\n      currencies = _ref4.currencies,\n      on_dashboard = _ref4.on_dashboard,\n      archived = _ref4.archived;\n  return {\n    id: _id,\n    name: name,\n    group: group,\n    balance: balance,\n    currencies: currencies,\n    on_dashboard: on_dashboard,\n    archived: archived\n  };\n}\nexport function stateToStorage(_ref5) {\n  var name = _ref5.name,\n      group = _ref5.group,\n      balance = _ref5.balance,\n      currencies = _ref5.currencies,\n      on_dashboard = _ref5.on_dashboard,\n      archived = _ref5.archived;\n  return {\n    name: name,\n    group: group,\n    balance: balance,\n    currencies: currencies,\n    on_dashboard: on_dashboard,\n    archived: archived\n  };\n}\nexport function mutateBalance(account, currency, amount) {\n  return _objectSpread({}, account, {\n    currencies: _toConsumableArray(new Set(_toConsumableArray(account.currencies).concat([currency]))),\n    balance: _objectSpread({}, account.balance, _defineProperty({}, currency, parseInt(\"\".concat(account.balance[currency] || 0), 10) + amount))\n  });\n}","map":{"version":3,"sources":["/Users/amipatel/Desktop/money-tracker/src/entities/Account.ts"],"names":["Currency","AccountGroupT","DeleteStrategyT","GroupToTextMap","Cash","Bank","Deposit","Credit","Asset","defaultGroup","defaultDeleteStrategy","Archive","getGroupName","code","getAccountGroupOptions","Object","entries","map","text","key","value","getDeleteStartegyOptions","hasMultipleAccounts","stratgies","Cleanup","push","Move","formTostate","id","balance","name","group","currencies","on_dashboard","archived","Date","now","keys","reduce","acc","numberToCents","stateToForm","account","centsToString","storageToState","_id","stateToStorage","mutateBalance","currency","amount","Set","parseInt"],"mappings":"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","sourcesContent":["import Currency from 'entities/Currency';\n\ntype BalanceAsCentsT = {\n  [currency: string]: number;\n};\n\ntype BalanceAsInputStringT = {\n  [currency: string]: string;\n};\n\ninterface AccountBaseT {\n  group: AccountGroupT;\n  name: string;\n  currencies: string[];\n  on_dashboard: boolean;\n  archived?: boolean;\n}\n\nexport interface AccountStateT extends AccountBaseT {\n  id: string;\n  balance: BalanceAsCentsT;\n}\n\nexport interface AccountStorageT extends AccountBaseT {\n  _id: string;\n  _rev?: string;\n  _conflicts?: string[];\n  balance: BalanceAsCentsT;\n}\n\nexport interface AccountFormT extends AccountBaseT {\n  id?: string;\n  balance: BalanceAsInputStringT;\n  completed?: boolean;\n  isModalOpen?: boolean;\n  isDeleteRequest?: boolean;\n  isDeleteRunning?: boolean;\n  itemsToProcess?: number;\n  itemsProcessed?: number;\n}\n\nexport enum AccountGroupT {\n  Cash = 'cash',\n  Bank = 'bank',\n  Deposit = 'deposit',\n  Credit = 'credit',\n  Asset = 'asset'\n}\n\nexport enum DeleteStrategyT {\n  Archive,\n  Cleanup,\n  Move\n}\n\nconst GroupToTextMap: { [code in AccountGroupT]?: string } = {\n  [AccountGroupT.Cash]: 'Cash',\n  [AccountGroupT.Bank]: 'Bank Account',\n  [AccountGroupT.Deposit]: 'Deposit',\n  [AccountGroupT.Credit]: 'Credit',\n  [AccountGroupT.Asset]: 'Asset'\n};\n\nexport const defaultGroup = AccountGroupT.Cash;\nexport const defaultDeleteStrategy = DeleteStrategyT.Archive;\n\nexport function getGroupName(code: AccountGroupT) {\n  return GroupToTextMap[code];\n}\nexport function getAccountGroupOptions() {\n  return Object.entries(GroupToTextMap).map(([code, text]) => ({\n    key: code,\n    value: code,\n    text\n  }));\n}\n\nexport function getDeleteStartegyOptions(hasMultipleAccounts = false) {\n  const stratgies = [\n    {\n      key: DeleteStrategyT.Archive,\n      value: DeleteStrategyT.Archive,\n      text: 'Archive account, keep transactions as is'\n    },\n    {\n      key: DeleteStrategyT.Cleanup,\n      value: DeleteStrategyT.Cleanup,\n      text: 'Delete transactions with account'\n    }\n  ];\n  if (hasMultipleAccounts) {\n    stratgies.push({\n      key: DeleteStrategyT.Move,\n      value: DeleteStrategyT.Move,\n      text: 'Move transactions to another account'\n    });\n  }\n\n  return stratgies;\n}\n\nexport function formTostate({\n  id,\n  balance,\n  name,\n  group,\n  currencies,\n  on_dashboard,\n  archived\n}: AccountFormT): AccountStateT {\n  return {\n    id: id || `A${Date.now()}`,\n    balance: Object.keys(balance).reduce(\n      (acc: BalanceAsCentsT, code: string) => {\n        acc[code] = Currency.numberToCents(\n          balance[code] !== '' ? balance[code] : '0',\n          code\n        );\n        return acc;\n      },\n      {}\n    ),\n    name,\n    group,\n    currencies,\n    on_dashboard,\n    archived\n  };\n}\n\nexport function stateToForm(account: AccountStateT): AccountFormT {\n  return {\n    ...account,\n    balance: Object.keys(account.balance).reduce(\n      (acc: BalanceAsInputStringT, code: string) => {\n        acc[code] = Currency.centsToString(account.balance[code], code, false);\n        return acc;\n      },\n      {}\n    )\n  };\n}\n\nexport function storageToState({\n  _id,\n  name,\n  group,\n  balance,\n  currencies,\n  on_dashboard,\n  archived\n}: AccountStorageT): AccountStateT {\n  return {\n    id: _id,\n    name,\n    group,\n    balance,\n    currencies,\n    on_dashboard,\n    archived\n  };\n}\n\nexport function stateToStorage({\n  name,\n  group,\n  balance,\n  currencies,\n  on_dashboard,\n  archived\n}: AccountStateT) {\n  return { name, group, balance, currencies, on_dashboard, archived };\n}\n\nexport function mutateBalance(\n  account: AccountStorageT,\n  currency: string,\n  amount: number\n): AccountStorageT {\n  return {\n    ...account,\n    currencies: [...new Set([...account.currencies, currency])],\n    balance: {\n      ...account.balance,\n      [currency]: parseInt(`${account.balance[currency] || 0}`, 10) + amount\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}