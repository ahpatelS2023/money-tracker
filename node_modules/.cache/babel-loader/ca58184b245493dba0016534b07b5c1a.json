{"ast":null,"code":"import _defineProperty from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { TransationKindT } from '../entities/Transaction';\nvar Expense = TransationKindT.Expense,\n    Transfer = TransationKindT.Transfer,\n    Income = TransationKindT.Income;\nexport default (function (file) {\n  return new Promise(function (resolve, reject) {\n    var reader = new FileReader();\n    reader.onerror = reject;\n\n    reader.onload = function (event) {\n      try {\n        resolve(convert(event.target.result.split('\\n')));\n      } catch (error) {\n        reject(error);\n      }\n    };\n\n    reader.readAsText(file);\n  });\n});\nvar SEPARATOR = ';';\nvar COLUMN = {\n  DATE: 0,\n  ACCOUNT: 1,\n  TAGS: 2,\n  AMOUNT: 3,\n  CURRENCY: 4,\n  NOTE: 5,\n  TRANSFER: 6\n};\nvar transactions = [];\nvar accounts = new Map();\nvar currencies = new Set();\n\nfunction convert(rows) {\n  var header = rows[0].split(SEPARATOR);\n\n  if (header.length !== Object.keys(COLUMN).length) {\n    throw new Error(\"Invalid file format!\\n    Must be a CSV with following columns:\\n    date;account;tags;amount;currency;description;transfer\");\n  }\n\n  for (var line = 1; line < rows.length; line++) {\n    var row = rows[line].split(SEPARATOR);\n    if (row.length !== Object.keys(COLUMN).length) continue;\n    var transaction = {\n      kind: getKind(row),\n      account: getAccount(row),\n      amount: Math.abs(getAmount(row)),\n      currency: row[COLUMN.CURRENCY],\n      date: getDate(row),\n      tags: getTags(row),\n      note: row[COLUMN.NOTE]\n    };\n\n    if (transaction.kind === Transfer) {\n      var nextRow = rows[++line].split(SEPARATOR);\n      transaction.linkedAccount = getAccount(nextRow);\n      transaction.linkedAmount = getAmount(nextRow);\n      transaction.linkedCurrency = nextRow[COLUMN.CURRENCY];\n    }\n\n    transactions.push(transaction);\n  }\n\n  return {\n    transactions: transactions,\n    accounts: accounts,\n    currencies: currencies\n  };\n}\n\nfunction getAmount(row) {\n  return parseFloat(row[COLUMN.AMOUNT].replace(',', '.'));\n}\n\nfunction getKind(row) {\n  return row[COLUMN.TRANSFER].trim() ? Transfer : getAmount(row) < 0 ? Expense : Income;\n}\n\nfunction getAccount(row) {\n  var account = row[COLUMN.ACCOUNT];\n  var currency = row[COLUMN.CURRENCY];\n  if (!accounts.has(account)) accounts.set(account, new Set());\n  var accountCurrencies = accounts.get(account);\n  if (!accountCurrencies.has(currency)) accountCurrencies.add(currency);\n  if (!currencies.has(currency)) currencies.add(currency);\n  return account;\n}\n\nfunction getDate(row) {\n  return row[COLUMN.DATE].split('.').reverse().join('-');\n}\n\nfunction getTags(row) {\n  return row[COLUMN.TAGS].trim() && _defineProperty({}, getKind(row), row[COLUMN.TAGS].replace('\\\\', '/').split('/'));\n}","map":{"version":3,"sources":["/Users/amipatel/Desktop/money-tracker/src/util/CsvReader.js"],"names":["TransationKindT","Expense","Transfer","Income","file","Promise","resolve","reject","reader","FileReader","onerror","onload","event","convert","target","result","split","error","readAsText","SEPARATOR","COLUMN","DATE","ACCOUNT","TAGS","AMOUNT","CURRENCY","NOTE","TRANSFER","transactions","accounts","Map","currencies","Set","rows","header","length","Object","keys","Error","line","row","transaction","kind","getKind","account","getAccount","amount","Math","abs","getAmount","currency","date","getDate","tags","getTags","note","nextRow","linkedAccount","linkedAmount","linkedCurrency","push","parseFloat","replace","trim","has","set","accountCurrencies","get","add","reverse","join"],"mappings":"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","sourcesContent":["import { TransationKindT } from '../entities/Transaction';\n\nconst { Expense, Transfer, Income } = TransationKindT;\n\nexport default file =>\n  new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onerror = reject;\n    reader.onload = event => {\n      try {\n        resolve(convert(event.target.result.split('\\n')));\n      } catch (error) {\n        reject(error);\n      }\n    };\n\n    reader.readAsText(file);\n  });\n\nconst SEPARATOR = ';';\nconst COLUMN = {\n  DATE: 0,\n  ACCOUNT: 1,\n  TAGS: 2,\n  AMOUNT: 3,\n  CURRENCY: 4,\n  NOTE: 5,\n  TRANSFER: 6\n};\n\nconst transactions = [];\nconst accounts = new Map();\nconst currencies = new Set();\n\nfunction convert(rows) {\n  const header = rows[0].split(SEPARATOR);\n  if (header.length !== Object.keys(COLUMN).length) {\n    throw new Error(`Invalid file format!\n    Must be a CSV with following columns:\n    date;account;tags;amount;currency;description;transfer`);\n  }\n\n  for (let line = 1; line < rows.length; line++) {\n    const row = rows[line].split(SEPARATOR);\n    if (row.length !== Object.keys(COLUMN).length) continue;\n\n    const transaction = {\n      kind: getKind(row),\n      account: getAccount(row),\n      amount: Math.abs(getAmount(row)),\n      currency: row[COLUMN.CURRENCY],\n      date: getDate(row),\n      tags: getTags(row),\n      note: row[COLUMN.NOTE]\n    };\n\n    if (transaction.kind === Transfer) {\n      const nextRow = rows[++line].split(SEPARATOR);\n\n      transaction.linkedAccount = getAccount(nextRow);\n      transaction.linkedAmount = getAmount(nextRow);\n      transaction.linkedCurrency = nextRow[COLUMN.CURRENCY];\n    }\n\n    transactions.push(transaction);\n  }\n\n  return { transactions, accounts, currencies };\n}\n\nfunction getAmount(row) {\n  return parseFloat(row[COLUMN.AMOUNT].replace(',', '.'));\n}\n\nfunction getKind(row) {\n  return row[COLUMN.TRANSFER].trim()\n    ? Transfer\n    : getAmount(row) < 0\n    ? Expense\n    : Income;\n}\n\nfunction getAccount(row) {\n  const account = row[COLUMN.ACCOUNT];\n  const currency = row[COLUMN.CURRENCY];\n  if (!accounts.has(account)) accounts.set(account, new Set());\n  const accountCurrencies = accounts.get(account);\n  if (!accountCurrencies.has(currency)) accountCurrencies.add(currency);\n  if (!currencies.has(currency)) currencies.add(currency);\n\n  return account;\n}\n\nfunction getDate(row) {\n  return row[COLUMN.DATE]\n    .split('.')\n    .reverse()\n    .join('-');\n}\n\nfunction getTags(row) {\n  return (\n    row[COLUMN.TAGS].trim() && {\n      [getKind(row)]: row[COLUMN.TAGS].replace('\\\\', '/').split('/')\n    }\n  );\n}\n"]},"metadata":{},"sourceType":"module"}