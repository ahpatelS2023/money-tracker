{"ast":null,"code":"import _regeneratorRuntime from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { accountsDB, remoteAccountsDB, destroyAccountsDB } from './pouchdb';\nimport { storageToState, stateToStorage, mutateBalance as mutateAccountBalance } from '../../entities/Account';\nexport default {\n  sync: sync,\n  loadAll: loadAll,\n  save: save,\n  archive: archive,\n  mutateBalance: mutateBalance,\n  remove: remove,\n  destroy: destroy\n};\n\nfunction sync() {\n  return _sync.apply(this, arguments);\n}\n\nfunction _sync() {\n  _sync = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var readOnly,\n        accounts,\n        from,\n        to,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            readOnly = _args.length > 0 && _args[0] !== undefined ? _args[0] : false;\n\n            if (remoteAccountsDB()) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 3:\n            _context.next = 5;\n            return accountsDB().replicate.from(remoteAccountsDB());\n\n          case 5:\n            from = _context.sent;\n\n            if (!(from.docs_written > 0)) {\n              _context.next = 11;\n              break;\n            }\n\n            _context.next = 9;\n            return loadAll();\n\n          case 9:\n            accounts = _context.sent;\n            updateLastSyncedBalance(accounts);\n\n          case 11:\n            if (!readOnly) {\n              _context.next = 13;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 13:\n            _context.next = 15;\n            return accountsDB().replicate.to(remoteAccountsDB());\n\n          case 15:\n            to = _context.sent;\n\n            if (!(to.docs_written > 0)) {\n              _context.next = 21;\n              break;\n            }\n\n            _context.next = 19;\n            return loadAll();\n\n          case 19:\n            accounts = _context.sent;\n            updateLastSyncedBalance(accounts);\n\n          case 21:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _sync.apply(this, arguments);\n}\n\nfunction destroy() {\n  return destroyAccountsDB();\n}\n\nfunction loadAll() {\n  return accountsDB().allDocs({\n    include_docs: true,\n    conflicts: true,\n    startkey: 'A',\n    endkey: \"A\\uFFFF\"\n  }).then(function (response) {\n    return Promise.all(response.rows.map(resolveConflicts));\n  }).then(function (docs) {\n    return docs.map(storageToState);\n  });\n}\n\nfunction save(account) {\n  return accountsDB().get(account.id).then(function (doc) {\n    return accountsDB().put(_objectSpread({}, doc, stateToStorage(account)));\n  }).catch(function (err) {\n    if (err.status !== 404) throw err;\n    return accountsDB().put(_objectSpread({\n      _id: account.id\n    }, stateToStorage(account)));\n  });\n}\n\nfunction archive(accountId) {\n  return accountsDB().get(accountId).then(function (doc) {\n    return accountsDB().put(_objectSpread({}, doc, {\n      archived: true\n    }));\n  });\n}\n\nfunction mutateBalance(_ref) {\n  var accountId = _ref.accountId,\n      currency = _ref.currency,\n      amount = _ref.amount;\n  return accountsDB().get(accountId).then(function (doc) {\n    return accountsDB().put(mutateAccountBalance(doc, currency, amount));\n  }).then(function (_ref2) {\n    var rev = _ref2.rev;\n    return accountsDB().get(accountId, rev);\n  }).then(function (doc) {\n    return storageToState(doc);\n  });\n}\n\nfunction remove(accountId) {\n  return accountsDB().get(accountId).then(function (doc) {\n    return accountsDB().put(_objectSpread({}, doc, {\n      _deleted: true\n    }));\n  }).catch(function (err) {\n    if (err.status !== 404) throw err;\n    return true;\n  });\n}\n\nfunction updateLastSyncedBalance(accounts) {\n  accounts.forEach(function (account) {\n    localStorage.setItem(account.id, JSON.stringify(account.balance));\n  });\n}\n\nfunction resolveConflicts(_x) {\n  return _resolveConflicts.apply(this, arguments);\n}\n\nfunction _resolveConflicts() {\n  _resolveConflicts = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4(row) {\n    var lastSyncedBalance, conflictedBalances;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (row.doc._conflicts) {\n              _context4.next = 2;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", row.doc);\n\n          case 2:\n            lastSyncedBalance = JSON.parse(localStorage.getItem(row.doc._id));\n            _context4.next = 5;\n            return Promise.all(row.doc._conflicts.map(\n            /*#__PURE__*/\n            function () {\n              var _ref3 = _asyncToGenerator(\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function _callee2(rev) {\n                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        return _context2.abrupt(\"return\", accountsDB().get(row.doc._id, {\n                          rev: rev\n                        }).then(function (doc) {\n                          return doc.balance;\n                        }));\n\n                      case 1:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2, this);\n              }));\n\n              return function (_x2) {\n                return _ref3.apply(this, arguments);\n              };\n            }()));\n\n          case 5:\n            conflictedBalances = _context4.sent;\n            conflictedBalances.push(row.doc.balance);\n            row.doc.balance = resolveBalance(lastSyncedBalance, conflictedBalances);\n            return _context4.abrupt(\"return\", Promise.all(row.doc._conflicts.map(\n            /*#__PURE__*/\n            function () {\n              var _ref4 = _asyncToGenerator(\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function _callee3(rev) {\n                return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        return _context3.abrupt(\"return\", accountsDB().remove(row.doc._id, rev));\n\n                      case 1:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }\n                }, _callee3, this);\n              }));\n\n              return function (_x3) {\n                return _ref4.apply(this, arguments);\n              };\n            }())).then(function () {\n              return accountsDB().put(row.doc);\n            }).then(function () {\n              return row.doc;\n            }));\n\n          case 9:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, this);\n  }));\n  return _resolveConflicts.apply(this, arguments);\n}\n\nfunction resolveBalance(lastSynced, conflictedBalances) {\n  return Object.keys(lastSynced).reduce(function (balance, code) {\n    balance[code] = lastSynced[code] + conflictedBalances.reduce(function (delta, conflicted) {\n      return delta + (conflicted[code] - lastSynced[code]);\n    }, 0);\n    return balance;\n  }, {});\n}","map":{"version":3,"sources":["/Users/amipatel/Desktop/money-tracker/src/util/storage/accounts.js"],"names":["accountsDB","remoteAccountsDB","destroyAccountsDB","storageToState","stateToStorage","mutateBalance","mutateAccountBalance","sync","loadAll","save","archive","remove","destroy","readOnly","replicate","from","docs_written","accounts","updateLastSyncedBalance","to","allDocs","include_docs","conflicts","startkey","endkey","then","response","Promise","all","rows","map","resolveConflicts","docs","account","get","id","doc","put","catch","err","status","_id","accountId","archived","currency","amount","rev","_deleted","forEach","localStorage","setItem","JSON","stringify","balance","row","_conflicts","lastSyncedBalance","parse","getItem","conflictedBalances","push","resolveBalance","lastSynced","Object","keys","reduce","code","delta","conflicted"],"mappings":"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","sourcesContent":["import { accountsDB, remoteAccountsDB, destroyAccountsDB } from './pouchdb';\nimport {\n  storageToState,\n  stateToStorage,\n  mutateBalance as mutateAccountBalance\n} from '../../entities/Account';\n\nexport default {\n  sync,\n  loadAll,\n  save,\n  archive,\n  mutateBalance,\n  remove,\n  destroy\n};\n\nasync function sync(readOnly = false) {\n  if (!remoteAccountsDB()) return;\n  let accounts;\n\n  const from = await accountsDB().replicate.from(remoteAccountsDB());\n  if (from.docs_written > 0) {\n    accounts = await loadAll();\n    updateLastSyncedBalance(accounts);\n  }\n\n  if (readOnly) return;\n\n  const to = await accountsDB().replicate.to(remoteAccountsDB());\n  if (to.docs_written > 0) {\n    accounts = await loadAll();\n    updateLastSyncedBalance(accounts);\n  }\n}\n\nfunction destroy() {\n  return destroyAccountsDB();\n}\n\nfunction loadAll() {\n  return accountsDB()\n    .allDocs({\n      include_docs: true,\n      conflicts: true,\n      startkey: 'A',\n      endkey: 'A\\uffff'\n    })\n    .then(response => Promise.all(response.rows.map(resolveConflicts)))\n    .then(docs => docs.map(storageToState));\n}\n\nfunction save(account) {\n  return accountsDB()\n    .get(account.id)\n    .then(doc => accountsDB().put({ ...doc, ...stateToStorage(account) }))\n    .catch(err => {\n      if (err.status !== 404) throw err;\n      return accountsDB().put({\n        _id: account.id,\n        ...stateToStorage(account)\n      });\n    });\n}\n\nfunction archive(accountId) {\n  return accountsDB()\n    .get(accountId)\n    .then(doc => accountsDB().put({ ...doc, archived: true }));\n}\n\nfunction mutateBalance({ accountId, currency, amount }) {\n  return accountsDB()\n    .get(accountId)\n    .then(doc => accountsDB().put(mutateAccountBalance(doc, currency, amount)))\n    .then(({ rev }) => accountsDB().get(accountId, rev))\n    .then(doc => storageToState(doc));\n}\n\nfunction remove(accountId) {\n  return accountsDB()\n    .get(accountId)\n    .then(doc => accountsDB().put({ ...doc, _deleted: true }))\n    .catch(err => {\n      if (err.status !== 404) throw err;\n      return true;\n    });\n}\n\nfunction updateLastSyncedBalance(accounts) {\n  accounts.forEach(account => {\n    localStorage.setItem(account.id, JSON.stringify(account.balance));\n  });\n}\n\nasync function resolveConflicts(row) {\n  if (!row.doc._conflicts) return row.doc;\n\n  const lastSyncedBalance = JSON.parse(localStorage.getItem(row.doc._id));\n  const conflictedBalances = await Promise.all(\n    row.doc._conflicts.map(async rev =>\n      accountsDB()\n        .get(row.doc._id, { rev })\n        .then(doc => doc.balance)\n    )\n  );\n  conflictedBalances.push(row.doc.balance);\n  row.doc.balance = resolveBalance(lastSyncedBalance, conflictedBalances);\n\n  return Promise.all(\n    row.doc._conflicts.map(async rev => accountsDB().remove(row.doc._id, rev))\n  )\n    .then(() => accountsDB().put(row.doc))\n    .then(() => row.doc);\n}\n\nfunction resolveBalance(lastSynced, conflictedBalances) {\n  return Object.keys(lastSynced).reduce((balance, code) => {\n    balance[code] =\n      lastSynced[code] +\n      conflictedBalances.reduce(\n        (delta, conflicted) => delta + (conflicted[code] - lastSynced[code]),\n        0\n      );\n    return balance;\n  }, {});\n}\n"]},"metadata":{},"sourceType":"module"}