{"ast":null,"code":"import _regeneratorRuntime from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(resetTransactionFormSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadFilterTransactionsSaga),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadRecentTransactionsSaga),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(removeTransactionSaga),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(saveTransactionSaga),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(updateAccountsBalance);\n\nimport { takeLatest, call, put, select } from 'redux-saga/effects';\nimport { loadFilterTransactions, loadFilterTransactionsSuccess, loadRecentTransactions, loadRecentTransactionsSuccess, saveTransaction, saveTransactionSuccess, removeTransaction, removeTransactionSuccess } from '../actions/entities/transactions';\nimport { changeFilterDate, applyFilters } from '../actions/ui/transaction/filter';\nimport { fillInTransactionForm, resetTransactionForm } from '../actions/ui/form/transaction';\nimport { getDefaultState } from '../selectors/ui/form/transaction';\nimport { getFilters } from '../selectors/ui/transaction/filter';\nimport getAccountsMutations from '../entities/Transaction/AccountMutations';\nimport { updateAccountBalanceSaga } from './accounts';\nimport { updateTagsUsage } from './tags';\nimport TransactionsStorage from '../util/storage/transactions';\nexport function resetTransactionFormSaga() {\n  var initialData;\n  return _regeneratorRuntime.wrap(function resetTransactionFormSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return select(getDefaultState);\n\n        case 2:\n          initialData = _context.sent;\n          _context.next = 5;\n          return put(fillInTransactionForm(initialData));\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this);\n}\nexport function loadFilterTransactionsSaga() {\n  var filters, transactions;\n  return _regeneratorRuntime.wrap(function loadFilterTransactionsSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return select(getFilters);\n\n        case 2:\n          filters = _context2.sent;\n          _context2.next = 5;\n          return call(TransactionsStorage.loadFiltered, filters);\n\n        case 5:\n          transactions = _context2.sent;\n          _context2.next = 8;\n          return put(loadFilterTransactionsSuccess(transactions));\n\n        case 8:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}\nexport function loadRecentTransactionsSaga() {\n  var transactions;\n  return _regeneratorRuntime.wrap(function loadRecentTransactionsSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return call(TransactionsStorage.loadRecent);\n\n        case 2:\n          transactions = _context3.sent;\n          _context3.next = 5;\n          return put(loadRecentTransactionsSuccess(transactions));\n\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, this);\n}\nexport function removeTransactionSaga(action) {\n  var prev;\n  return _regeneratorRuntime.wrap(function removeTransactionSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return call(TransactionsStorage.remove, action.payload);\n\n        case 2:\n          prev = _context4.sent;\n          _context4.next = 5;\n          return call(updateAccountsBalance, prev);\n\n        case 5:\n          _context4.next = 7;\n          return call(updateTagsUsage, prev);\n\n        case 7:\n          _context4.next = 9;\n          return call(loadRecentTransactionsSaga);\n\n        case 9:\n          _context4.next = 11;\n          return call(loadFilterTransactionsSaga);\n\n        case 11:\n          _context4.next = 13;\n          return call(resetTransactionFormSaga);\n\n        case 13:\n          _context4.next = 15;\n          return put(removeTransactionSuccess());\n\n        case 15:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, this);\n}\nexport function saveTransactionSaga(action) {\n  var next, prev;\n  return _regeneratorRuntime.wrap(function saveTransactionSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          next = action.payload;\n          _context5.next = 3;\n          return call(TransactionsStorage.remove, next.id);\n\n        case 3:\n          prev = _context5.sent;\n          next.id = \"T\".concat(next.date, \"-\").concat(Date.now());\n          _context5.next = 7;\n          return call(TransactionsStorage.save, next);\n\n        case 7:\n          _context5.next = 9;\n          return call(updateAccountsBalance, prev, next);\n\n        case 9:\n          _context5.next = 11;\n          return call(updateTagsUsage, prev, next);\n\n        case 11:\n          _context5.next = 13;\n          return call(loadRecentTransactionsSaga);\n\n        case 13:\n          _context5.next = 15;\n          return call(loadFilterTransactionsSaga);\n\n        case 15:\n          _context5.next = 17;\n          return call(resetTransactionFormSaga);\n\n        case 17:\n          _context5.next = 19;\n          return put(saveTransactionSuccess());\n\n        case 19:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, this);\n}\n\nfunction updateAccountsBalance(prev, next) {\n  var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, mutation;\n\n  return _regeneratorRuntime.wrap(function updateAccountsBalance$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _iteratorNormalCompletion = true;\n          _didIteratorError = false;\n          _iteratorError = undefined;\n          _context6.prev = 3;\n          _iterator = getAccountsMutations(prev, next)[Symbol.iterator]();\n\n        case 5:\n          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n            _context6.next = 12;\n            break;\n          }\n\n          mutation = _step.value;\n          _context6.next = 9;\n          return call(updateAccountBalanceSaga, mutation);\n\n        case 9:\n          _iteratorNormalCompletion = true;\n          _context6.next = 5;\n          break;\n\n        case 12:\n          _context6.next = 18;\n          break;\n\n        case 14:\n          _context6.prev = 14;\n          _context6.t0 = _context6[\"catch\"](3);\n          _didIteratorError = true;\n          _iteratorError = _context6.t0;\n\n        case 18:\n          _context6.prev = 18;\n          _context6.prev = 19;\n\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n\n        case 21:\n          _context6.prev = 21;\n\n          if (!_didIteratorError) {\n            _context6.next = 24;\n            break;\n          }\n\n          throw _iteratorError;\n\n        case 24:\n          return _context6.finish(21);\n\n        case 25:\n          return _context6.finish(18);\n\n        case 26:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, this, [[3, 14, 18, 26], [19,, 21, 25]]);\n}\n\nexport default [takeLatest(resetTransactionForm, resetTransactionFormSaga), takeLatest(loadFilterTransactions, loadFilterTransactionsSaga), takeLatest(changeFilterDate, loadFilterTransactionsSaga), takeLatest(applyFilters, loadFilterTransactionsSaga), takeLatest(loadRecentTransactions, loadRecentTransactionsSaga), takeLatest(removeTransaction, removeTransactionSaga), takeLatest(saveTransaction, saveTransactionSaga)];","map":{"version":3,"sources":["/Users/amipatel/Desktop/money-tracker/src/sagas/transactions.js"],"names":["resetTransactionFormSaga","loadFilterTransactionsSaga","loadRecentTransactionsSaga","removeTransactionSaga","saveTransactionSaga","updateAccountsBalance","takeLatest","call","put","select","loadFilterTransactions","loadFilterTransactionsSuccess","loadRecentTransactions","loadRecentTransactionsSuccess","saveTransaction","saveTransactionSuccess","removeTransaction","removeTransactionSuccess","changeFilterDate","applyFilters","fillInTransactionForm","resetTransactionForm","getDefaultState","getFilters","getAccountsMutations","updateAccountBalanceSaga","updateTagsUsage","TransactionsStorage","initialData","filters","loadFiltered","transactions","loadRecent","action","remove","payload","prev","next","id","date","Date","now","save","mutation"],"mappings":"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","sourcesContent":["import { takeLatest, call, put, select } from 'redux-saga/effects';\nimport {\n  loadFilterTransactions,\n  loadFilterTransactionsSuccess,\n  loadRecentTransactions,\n  loadRecentTransactionsSuccess,\n  saveTransaction,\n  saveTransactionSuccess,\n  removeTransaction,\n  removeTransactionSuccess\n} from '../actions/entities/transactions';\nimport {\n  changeFilterDate,\n  applyFilters\n} from '../actions/ui/transaction/filter';\nimport {\n  fillInTransactionForm,\n  resetTransactionForm\n} from '../actions/ui/form/transaction';\nimport { getDefaultState } from '../selectors/ui/form/transaction';\nimport { getFilters } from '../selectors/ui/transaction/filter';\nimport getAccountsMutations from '../entities/Transaction/AccountMutations';\nimport { updateAccountBalanceSaga } from './accounts';\nimport { updateTagsUsage } from './tags';\nimport TransactionsStorage from '../util/storage/transactions';\n\nexport function* resetTransactionFormSaga() {\n  const initialData = yield select(getDefaultState);\n  yield put(fillInTransactionForm(initialData));\n}\n\nexport function* loadFilterTransactionsSaga() {\n  const filters = yield select(getFilters);\n  const transactions = yield call(TransactionsStorage.loadFiltered, filters);\n  yield put(loadFilterTransactionsSuccess(transactions));\n}\n\nexport function* loadRecentTransactionsSaga() {\n  const transactions = yield call(TransactionsStorage.loadRecent);\n  yield put(loadRecentTransactionsSuccess(transactions));\n}\n\nexport function* removeTransactionSaga(action) {\n  const prev = yield call(TransactionsStorage.remove, action.payload);\n\n  yield call(updateAccountsBalance, prev);\n  yield call(updateTagsUsage, prev);\n  yield call(loadRecentTransactionsSaga);\n  yield call(loadFilterTransactionsSaga);\n  yield call(resetTransactionFormSaga);\n  yield put(removeTransactionSuccess());\n}\n\nexport function* saveTransactionSaga(action) {\n  const next = action.payload;\n  const prev = yield call(TransactionsStorage.remove, next.id);\n  next.id = `T${next.date}-${Date.now()}`;\n\n  yield call(TransactionsStorage.save, next);\n  yield call(updateAccountsBalance, prev, next);\n  yield call(updateTagsUsage, prev, next);\n  yield call(loadRecentTransactionsSaga);\n  yield call(loadFilterTransactionsSaga);\n  yield call(resetTransactionFormSaga);\n  yield put(saveTransactionSuccess());\n}\n\nfunction* updateAccountsBalance(prev, next) {\n  for (const mutation of getAccountsMutations(prev, next)) {\n    yield call(updateAccountBalanceSaga, mutation);\n  }\n}\n\nexport default [\n  takeLatest(resetTransactionForm, resetTransactionFormSaga),\n  takeLatest(loadFilterTransactions, loadFilterTransactionsSaga),\n  takeLatest(changeFilterDate, loadFilterTransactionsSaga),\n  takeLatest(applyFilters, loadFilterTransactionsSaga),\n  takeLatest(loadRecentTransactions, loadRecentTransactionsSaga),\n  takeLatest(removeTransaction, removeTransactionSaga),\n  takeLatest(saveTransaction, saveTransactionSaga)\n];\n"]},"metadata":{},"sourceType":"module"}