{"ast":null,"code":"import _toConsumableArray from \"/Users/amipatel/Desktop/money-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/amipatel/Desktop/money-tracker/src/components/Settings/Currency/ExchangeRateGrid.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table } from 'semantic-ui-react';\n\nvar ExchangeRateGrid = function ExchangeRateGrid(props) {\n  var currencies = [props.base].concat(_toConsumableArray(props.secondary));\n  return React.createElement(Table, {\n    celled: true,\n    unstackable: true,\n    definition: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, React.createElement(Table.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, React.createElement(Table.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, React.createElement(Table.HeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }), currencies.map(function (code) {\n    return React.createElement(Table.HeaderCell, {\n      key: code,\n      textAlign: \"center\",\n      content: code,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    });\n  }))), React.createElement(Table.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, currencies.map(function (code) {\n    return React.createElement(Table.Row, {\n      key: code,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, React.createElement(Table.Cell, {\n      textAlign: \"center\",\n      content: code,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }), currencies.map(function (other) {\n      var rate = props.exchangeRate[other] / props.exchangeRate[code];\n      return React.createElement(Table.Cell, {\n        key: \"\".concat(code, \"-\").concat(other),\n        disabled: code === other,\n        textAlign: \"center\",\n        content: Number(rate).toLocaleString(undefined, {\n          minimumFractionDigits: 4,\n          maximumFractionDigits: rate < 0.001 ? 6 : 4\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      });\n    }));\n  })));\n};\n\nExchangeRateGrid.propTypes = {\n  base: PropTypes.string,\n  secondary: PropTypes.arrayOf(PropTypes.string),\n  exchangeRate: PropTypes.objectOf(PropTypes.number)\n};\nexport default ExchangeRateGrid;","map":{"version":3,"sources":["/Users/amipatel/Desktop/money-tracker/src/components/Settings/Currency/ExchangeRateGrid.js"],"names":["React","PropTypes","Table","ExchangeRateGrid","props","currencies","base","secondary","map","code","other","rate","exchangeRate","Number","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","propTypes","string","arrayOf","objectOf","number"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,KAAT,QAAsB,mBAAtB;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,KAAK,EAAI;AAChC,MAAMC,UAAU,IAAID,KAAK,CAACE,IAAV,4BAAmBF,KAAK,CAACG,SAAzB,EAAhB;AACA,SACE,oBAAC,KAAD;AAAO,IAAA,MAAM,MAAb;AAAc,IAAA,WAAW,MAAzB;AAA0B,IAAA,UAAU,MAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD,CAAO,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGF,UAAU,CAACG,GAAX,CAAe,UAAAC,IAAI;AAAA,WAClB,oBAAC,KAAD,CAAO,UAAP;AAAkB,MAAA,GAAG,EAAEA,IAAvB;AAA6B,MAAA,SAAS,EAAC,QAAvC;AAAgD,MAAA,OAAO,EAAEA,IAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADkB;AAAA,GAAnB,CAFH,CADF,CADF,EASE,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,UAAU,CAACG,GAAX,CAAe,UAAAC,IAAI;AAAA,WAClB,oBAAC,KAAD,CAAO,GAAP;AAAW,MAAA,GAAG,EAAEA,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD,CAAO,IAAP;AAAY,MAAA,SAAS,EAAC,QAAtB;AAA+B,MAAA,OAAO,EAAEA,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEGJ,UAAU,CAACG,GAAX,CAAe,UAAAE,KAAK,EAAI;AACvB,UAAMC,IAAI,GAAGP,KAAK,CAACQ,YAAN,CAAmBF,KAAnB,IAA4BN,KAAK,CAACQ,YAAN,CAAmBH,IAAnB,CAAzC;AACA,aACE,oBAAC,KAAD,CAAO,IAAP;AACE,QAAA,GAAG,YAAKA,IAAL,cAAaC,KAAb,CADL;AAEE,QAAA,QAAQ,EAAED,IAAI,KAAKC,KAFrB;AAGE,QAAA,SAAS,EAAC,QAHZ;AAIE,QAAA,OAAO,EAAEG,MAAM,CAACF,IAAD,CAAN,CAAaG,cAAb,CAA4BC,SAA5B,EAAuC;AAC9CC,UAAAA,qBAAqB,EAAE,CADuB;AAE9CC,UAAAA,qBAAqB,EAAEN,IAAI,GAAG,KAAP,GAAe,CAAf,GAAmB;AAFI,SAAvC,CAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAWD,KAbA,CAFH,CADkB;AAAA,GAAnB,CADH,CATF,CADF;AAiCD,CAnCD;;AAqCAR,gBAAgB,CAACe,SAAjB,GAA6B;AAC3BZ,EAAAA,IAAI,EAAEL,SAAS,CAACkB,MADW;AAE3BZ,EAAAA,SAAS,EAAEN,SAAS,CAACmB,OAAV,CAAkBnB,SAAS,CAACkB,MAA5B,CAFgB;AAG3BP,EAAAA,YAAY,EAAEX,SAAS,CAACoB,QAAV,CAAmBpB,SAAS,CAACqB,MAA7B;AAHa,CAA7B;AAMA,eAAenB,gBAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table } from 'semantic-ui-react';\n\nconst ExchangeRateGrid = props => {\n  const currencies = [props.base, ...props.secondary];\n  return (\n    <Table celled unstackable definition>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell />\n          {currencies.map(code => (\n            <Table.HeaderCell key={code} textAlign=\"center\" content={code} />\n          ))}\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        {currencies.map(code => (\n          <Table.Row key={code}>\n            <Table.Cell textAlign=\"center\" content={code} />\n            {currencies.map(other => {\n              const rate = props.exchangeRate[other] / props.exchangeRate[code];\n              return (\n                <Table.Cell\n                  key={`${code}-${other}`}\n                  disabled={code === other}\n                  textAlign=\"center\"\n                  content={Number(rate).toLocaleString(undefined, {\n                    minimumFractionDigits: 4,\n                    maximumFractionDigits: rate < 0.001 ? 6 : 4\n                  })}\n                />\n              );\n            })}\n          </Table.Row>\n        ))}\n      </Table.Body>\n    </Table>\n  );\n};\n\nExchangeRateGrid.propTypes = {\n  base: PropTypes.string,\n  secondary: PropTypes.arrayOf(PropTypes.string),\n  exchangeRate: PropTypes.objectOf(PropTypes.number)\n};\n\nexport default ExchangeRateGrid;\n"]},"metadata":{},"sourceType":"module"}